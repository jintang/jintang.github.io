<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>堂的博客</title>
  <icon>https://www.gravatar.com/avatar/1cd3b9a1836ae249e23b21e52371c204</icon>
  <subtitle>给岁月以学习,而不是给学习以岁月</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jintang.github.io/"/>
  <updated>2018-09-14T03:03:27.222Z</updated>
  <id>http://jintang.github.io/</id>
  
  <author>
    <name>堂</name>
    <email>LCX6916356@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react vs vue</title>
    <link href="http://jintang.github.io/2018/09/05/react-vs-vue/"/>
    <id>http://jintang.github.io/2018/09/05/react-vs-vue/</id>
    <published>2018-09-05T08:14:03.000Z</published>
    <updated>2018-09-14T03:03:27.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先接触了 <code>vue</code> ，感觉 <code>vue</code> 特别方便，优雅的想让你上瘾。后面接触了 <code>react native</code> 开发 App， 过来过去都感觉不适应，再慢慢用过一段日子之后，感觉 <code>react</code> 也有自己鲜明的特点，在使用 <code>react</code> 的时候，总想着和 <code>vue</code> 对比一下。由于自己使用 <code>react</code> 主要是在用 <code>react native</code>， 所以有些东西可能了解不深，望海涵。通过对比借此加深下理解的。</p></blockquote><table><thead><tr><th>Vue</th><th style="text-align:center">React</th><th style="text-align:center">补充说明</th></tr></thead><tbody><tr><td>Computed、watch</td><td style="text-align:center">React 不监听数据变化</td><td style="text-align:center">React可以使用 <code>mobx</code> 库来实现这些功能，在 vue 官方描述的 <a href="https://cn.vuejs.org/v2/guide/comparison.html#MobX" target="_blank" rel="noopener">对比其他框架</a> 里面有这样一句话： 在有限程度上，React + Mobx 也可以被认为是更繁琐的 Vue</td></tr><tr><td>v-model, 这只是通过语法糖定义了一个自定义指令，本质跟 React 一样. 修饰符<code>.async</code> 也是一样</td><td style="text-align:center">React是单向数据流，只能通过事件触发，然后再setState，React没有自定义指令</td><td style="text-align:center">/</td></tr><tr><td>传统 HTML标签渲染 / jsx render渲染</td><td style="text-align:center">jsx</td><td style="text-align:center">/</td></tr><tr><td>Vuex</td><td style="text-align:center">Redux</td><td style="text-align:center">react 有一个中间件react-redux 可以让我们方便的使用 Redux</td></tr><tr><td>EventBus 非父子组件通信</td><td style="text-align:center"><a href="https://github.com/mroderick/PubSubJS" target="_blank" rel="noopener">PubSubJS</a> 或 <a href="http://millermedeiros.github.io/js-signals/" target="_blank" rel="noopener">js-signals</a></td><td style="text-align:center">react-native 中还没用过，没遇到需要的场景</td></tr><tr><td>混入：mixins</td><td style="text-align:center">class组件不可用，在使用 <code>createReactClass</code> 创建 <code>React</code> 组件的时候可用 mixins</td><td style="text-align:center">我们可以要把 mixin 的东西写到单独的 js 文件里，通过 import 实现 mixin，这个本来就是锦上添花，不甚重要</td></tr><tr><td>slot</td><td style="text-align:center">props.chldren</td><td style="text-align:center">自定义组件获取使用时传入的子元素</td></tr><tr><td>自定义指令</td><td style="text-align:center">自己通过事件触发实现类似效果</td><td style="text-align:center">自定义指令可以实现类似于 限制 input 输入格式 等效果</td></tr></tbody></table><p>还有一些是两者非常类似的，只要会了一个，另一个也就会了：</p><ul><li>生命周期方法： 虽然名称不同，但使用一样</li><li>ref ： react 有多种使用 ref 的方法， 具体请看 <a href="https://jintang.github.io/2018/05/11/react-native%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/">另外一篇文章</a></li></ul><a id="more"></a><h2 id="React-补充"><a href="#React-补充" class="headerlink" title="React 补充"></a>React 补充</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>本质上来讲， <code>JSX</code> 只是为 <code>React.createElement(component, props, ...children)</code> 方法提供的语法糖， 所以文件中必须引入 <code>React</code> —— <code>import &#39;React&#39; from &#39;react&#39;</code></p><ul><li><code>JSX</code> 中使用的标签，小写代表内置组件，大写代表自定义组件。如 <code>&lt;div&gt;&lt;/div&gt;</code> 与 <code>&lt;Hello&gt;</code> 分别是内置组件和自定义组件</li><li><code>JSX</code> 可以直接使用的判断运算符： <code>&amp;&amp;</code> 、 <code>? :</code> ；可以直接使用的循环遍历方法： <code>map</code> ，因为 <code>map</code> 会返回一个新数组</li></ul><p><em>注意：</em> 循环渲染时，数组元素中使用的 <code>key</code> 在其兄弟之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的键。 另外 <code>key</code> 尽量不要使用 index 或其他随机数，如果数组重排的话 React 的差异比较算法会认为全部需要重新渲染。</p><h3 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">            &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;</span><br><span class="line">                Welcome</span><br><span class="line">            &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FancyBorder&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上我们定义了一个 <code>FancyBorder</code> 自定义组件， 那么它内部的 <code>props.children</code> 就是它的子元素，即 <code>&lt;h1&gt;</code> 包裹的那一段。</p><h3 id="构造函数是唯一能够初始化-this-state-的地方。而其他地方更新-state-只能用-setState-updater-callback"><a href="#构造函数是唯一能够初始化-this-state-的地方。而其他地方更新-state-只能用-setState-updater-callback" class="headerlink" title="构造函数是唯一能够初始化 this.state 的地方。而其他地方更新 state 只能用 setState(updater, [callback])"></a>构造函数是唯一能够初始化 this.state 的地方。而其他地方更新 <code>state</code> 只能用 <code>setState(updater, [callback])</code></h3><p><em>注意：</em> <code>setState()</code> 认为是一次请求而不是一次立即执行更新组件的命令。为了更为可观的性能， <code>React</code> 可能会推迟它，稍后会一次性更新这些组件。 <code>React</code> 不会保证在 <code>setState</code> 之后，能够立刻拿到改变的结果。</p><p>第一个参数 updater 如下:</p><ul><li>普通对象，最常见，如： <code>this.setState({name: &#39;小明&#39;})</code></li><li>updater函数，因为 this.state 可能是异步更新的，如果之后的状态依赖于之前的状态，此时就需要这种方式实现。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* Correct */</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">    counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><p>第二个参数在 <code>setState</code> 执行完成同时组件被重渲之后执行。通常，对于这类逻辑，我们推荐使用 <code>componentDidUpdate</code></p><h3 id="事件绑定-this-JSX-回调函数中的-this，类的方法默认是不会绑定-this-的"><a href="#事件绑定-this-JSX-回调函数中的-this，类的方法默认是不会绑定-this-的" class="headerlink" title="事件绑定 this : JSX 回调函数中的 this，类的方法默认是不会绑定 this 的"></a>事件绑定 this : <code>JSX</code> 回调函数中的 this，类的方法默认是不会绑定 this 的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">funciton handleClick1(param, e) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            <span class="comment">/* 1. 利用 bind, 此时 e 会是参数中的最后一个 */</span></span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick1.bind(<span class="keyword">this</span>， param)&#125;&gt;方法<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            /</span>* <span class="number">2.</span> 利用 箭头函数，需将 handleClick 定义为箭头函数格式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;this.handleClick2&#125;&gt;方法2&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><em>注意：</em> 事件回调事件不能通过 <code>reture false</code> 来阻止默认行为，必须得通过 <code>e.preventDefault()</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;先接触了 &lt;code&gt;vue&lt;/code&gt; ，感觉 &lt;code&gt;vue&lt;/code&gt; 特别方便，优雅的想让你上瘾。后面接触了 &lt;code&gt;react native&lt;/code&gt; 开发 App， 过来过去都感觉不适应，再慢慢用过一段日子之后，感觉 &lt;code&gt;react&lt;/code&gt; 也有自己鲜明的特点，在使用 &lt;code&gt;react&lt;/code&gt; 的时候，总想着和 &lt;code&gt;vue&lt;/code&gt; 对比一下。由于自己使用 &lt;code&gt;react&lt;/code&gt; 主要是在用 &lt;code&gt;react native&lt;/code&gt;， 所以有些东西可能了解不深，望海涵。通过对比借此加深下理解的。&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Vue&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;React&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;补充说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Computed、watch&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;React 不监听数据变化&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;React可以使用 &lt;code&gt;mobx&lt;/code&gt; 库来实现这些功能，在 vue 官方描述的 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/comparison.html#MobX&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;对比其他框架&lt;/a&gt; 里面有这样一句话： 在有限程度上，React + Mobx 也可以被认为是更繁琐的 Vue&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;v-model, 这只是通过语法糖定义了一个自定义指令，本质跟 React 一样. 修饰符&lt;code&gt;.async&lt;/code&gt; 也是一样&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;React是单向数据流，只能通过事件触发，然后再setState，React没有自定义指令&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;传统 HTML标签渲染 / jsx render渲染&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;jsx&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Vuex&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;Redux&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;react 有一个中间件react-redux 可以让我们方便的使用 Redux&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;EventBus 非父子组件通信&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/mroderick/PubSubJS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PubSubJS&lt;/a&gt; 或 &lt;a href=&quot;http://millermedeiros.github.io/js-signals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;js-signals&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;react-native 中还没用过，没遇到需要的场景&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;混入：mixins&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;class组件不可用，在使用 &lt;code&gt;createReactClass&lt;/code&gt; 创建 &lt;code&gt;React&lt;/code&gt; 组件的时候可用 mixins&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;我们可以要把 mixin 的东西写到单独的 js 文件里，通过 import 实现 mixin，这个本来就是锦上添花，不甚重要&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;slot&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;props.chldren&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;自定义组件获取使用时传入的子元素&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;自定义指令&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;自己通过事件触发实现类似效果&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;自定义指令可以实现类似于 限制 input 输入格式 等效果&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;还有一些是两者非常类似的，只要会了一个，另一个也就会了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;生命周期方法： 虽然名称不同，但使用一样&lt;/li&gt;&lt;li&gt;ref ： react 有多种使用 ref 的方法， 具体请看 &lt;a href=&quot;https://jintang.github.io/2018/05/11/react-native%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/&quot;&gt;另外一篇文章&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jintang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://jintang.github.io/tags/react/"/>
    
      <category term="react native" scheme="http://jintang.github.io/tags/react-native/"/>
    
      <category term="vue" scheme="http://jintang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>区块链学习</title>
    <link href="http://jintang.github.io/2018/08/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jintang.github.io/2018/08/13/区块链学习/</id>
    <published>2018-08-13T14:57:20.000Z</published>
    <updated>2018-08-21T07:53:22.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hash-函数"><a href="#Hash-函数" class="headerlink" title="Hash 函数"></a>Hash 函数</h3><p>区块链中区块相连是依靠：后一个区块持有前一个区块的 hash ，这个 hash 一般放在区块头中。 Hash 函数一般有两类：</p><ol><li>MD 系列： 如 MD5 ，已被证实不是特别安全</li><li>SH 系列： 是美国国家安全局 (NSA) 设计。经历了SHA-0，SHA-1，SHA-2，SHA-3系列发展，比特币采用SHA256算法，该算法属于SHA-2系列，在中本聪发明比特币时（2008）被公认为最安全最先进的算法之一</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hash-函数&quot;&gt;&lt;a href=&quot;#Hash-函数&quot; class=&quot;headerlink&quot; title=&quot;Hash 函数&quot;&gt;&lt;/a&gt;Hash 函数&lt;/h3&gt;&lt;p&gt;区块链中区块相连是依靠：后一个区块持有前一个区块的 hash ，这个 hash 一般放在区块头中。 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello 智能合约</title>
    <link href="http://jintang.github.io/2018/08/03/hello-%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>http://jintang.github.io/2018/08/03/hello-智能合约/</id>
    <published>2018-08-02T17:46:20.000Z</published>
    <updated>2018-08-12T07:26:35.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎查看 跟着大佬一起动手系列，点击<a href="https://learnblockchain.cn/2017/11/24/init-env/" target="_blank" rel="noopener">这儿</a>查看大佬的博文</p></blockquote><h2 id="什么是智能合约"><a href="#什么是智能合约" class="headerlink" title="什么是智能合约"></a>什么是智能合约</h2><p><strong>以太坊上的程序称之为智能合约，它是代码和数据(状态)的集合。</strong></p><p>如果做比喻的话智能合约更像是JAVA程序，JAVA程序通过JAVA虚拟机（JVM）将代码解释字节进行执行，以太坊的智能合约通过以太坊虚拟机（EVM）解释成字节码进行执行。</p><p>智能合约可以理解为在区块链上可以自动执行的（由消息驱动的）、以代码形式编写的合同（特殊的交易）。</p><p>比特币的交易是可以编程的，但是比特币脚本有很多的限制，能够编写的程序也有限，而以太坊具有 <a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7" target="_blank" rel="noopener">图灵完备</a>，通俗来说可以完全模拟一台计算机所能做的所有事情。比特币可以执行一些简单脚本，但是他就不是图灵完备，比如循环指令比特币就无法执行。</p><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>用户不可能直接编写以太坊虚拟机（EVM）字节码，所以以太坊提供了几种编写智能合约的高级语言。</p><p>Solidity：类似JavaScript，这是以太坊推荐的旗舰语言，也是最流行的智能合约语言。具体用法参加Solidity文档，地址：<a href="https://solidity.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/latest/</a></p><blockquote><p>还有Viper，Serpent，LLL及Bamboo，建议大家还是使用Solidity。Serpent官方已经不再推荐，建议Serpent的用户转换到Viper，他们都是类Python语言。</p></blockquote><p>可以根据不同的习惯选择不同的高级语言，目前最流行的是Solidity。</p><p>我们下面使用 <a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Browser-Solidity</a> IDE （也就是 Remix ）进行合约的编写和编译</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="以太坊客户端：-geth-安装"><a href="#以太坊客户端：-geth-安装" class="headerlink" title="以太坊客户端： geth 安装"></a>以太坊客户端： geth 安装</h3><p>在这儿我们使用 Geth ，全称是 go-ethereum，是以太坊的 go 语言命令行客户端，也是最流行的客户端 —— <a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">geth官方安装指引</a> 。</p><p>Geth提供了一个交互式命令控制台，通过命令控制台中包含了以太坊的各种功能（API）。拥有账户管理、挖矿、转账、智能合约的部署和执行等等功能。其中，EVM就是由以太坊客户端提供的。</p><blockquote><p>相对于Geth，Mist则是图形化操作界面的以太坊客户端。</p></blockquote><h3 id="使用geth启动环境"><a href="#使用geth启动环境" class="headerlink" title="使用geth启动环境"></a>使用geth启动环境</h3><blockquote><p>智能合约的开发需要使用以太坊的资源，所以是需要付费的，这个费用表现为 以太币。下面我们用 geth 启动开发者网络（模式）,会自动分配一个有大量余额的开发者账户给我们使用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir testNet --dev console 2&gt;&gt; test.log</span><br></pre></td></tr></table></figure><p>参数解析，更多请查看<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options" target="_blank" rel="noopener">这儿</a>:</p><ul><li><code>–dev</code> 启用开发者网络（模式），开发者网络会使用POA共识，默认预分配一个开发者账户并且会自动开启挖矿。</li><li><code>–datadir</code> 后面的参数是区块数据及秘钥存放目录。<br>第一次输入命令后，它会放在当前目录下新建一个testNet目录来存放数据。</li><li><code>console</code> 进入控制台</li><li><code>2&gt;&gt; test.log</code> 表示把控制台日志输出到test.log文件</li></ul><p>为了更好的理解，建议新开一个命令行终端，实时显示日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f test.log</span><br></pre></td></tr></table></figure><h3 id="准备账户"><a href="#准备账户" class="headerlink" title="准备账户"></a>准备账户</h3><p>智能合约的部署是指把合约字节码发布到区块链上，并使用一个特定的地址来标示这个合约，这个地址称为合约账户。</p><blockquote><p>以太坊中有两类账户：</p><ul><li>外部账户：该类账户被私钥控制（由人控制），没有关联任何代码。</li><li>合约账户: 该类账户被它们的合约代码控制且有代码与之关联。</li></ul></blockquote><blockquote><p><strong>外部账户与合约账户的区别和关系：</strong></p><p>一个外部账户可以通过创建和用自己的私钥来对交易进行签名，来发送消息给另一个外部账户或合约账户。在两个外部账户之间传送消息是价值转移的过程。</p><p>但从外部账户到合约账户的消息会激活合约账户的代码，允许它执行各种动作（比如转移代币，写入内部存储，挖出一个新代币，执行一些运算，创建一个新的合约等等）。</p><p>只有当外部账户发出指令时，合同账户才会执行相应的操作。</p></blockquote><p>智能合约的部署是指把合约字节码发布到区块链上，并使用一个特定的地址来标示这个合约，这个地址称为合约账户。</p><p>部署智能合约需要一个外部账户，我们先来看看分配的开发者账户，这个开发者账户里有充足的以太币。</p><p><em>查看账户:</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.accounts</span><br><span class="line"><span class="comment"># ["0x231b0a1ce4258e708cec69831f89d752822e25aa"] 返回了分配的开发者账户</span></span><br></pre></td></tr></table></figure><p></p><p><em>查看账户余额：</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.getBalance(eth.accounts[0])</span><br><span class="line"><span class="comment"># 1.15792089237316195423570985008687907853269984665640564039457584007913129639927e+77 数字非常大</span></span><br></pre></td></tr></table></figure><p></p><p>开发者账户因余额太多，如果用这个账户来部署合约时会无法看到余额变化，为了更好的体验完整的过程，这里选择创建一个新的账户。</p><p><em>创建账户:</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.newAccount(<span class="string">"tang"</span>)</span><br><span class="line"><span class="comment"># 返回了新的账号 "0x44e805ccb02b8c14e41d1e166e46d7b615c911ca"， tang 是账号密码</span></span><br><span class="line">&gt; eth.accounts</span><br><span class="line"><span class="comment"># ["0x231b0a1ce4258e708cec69831f89d752822e25aa", "0x44e805ccb02b8c14e41d1e166e46d7b615c911ca"] 多了一个</span></span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 0 查看的是第二个账号的余额</span></span><br></pre></td></tr></table></figure><p></p><p><em>给新账号转账:</em> 转 1 ether 以太币, ether 是 以太币 的单位，以太币的最小单位是 wei ，详情查看 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3towei" target="_blank" rel="noopener">这儿</a><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.sendTransaction(&#123;from: <span class="string">'0x231b0a1ce4258e708cec69831f89d752822e25aa'</span>, to: <span class="string">'0x44e805ccb02b8c14e41d1e166e46d7b615c911ca'</span>, value: web3.toWei(1, <span class="string">"ether"</span>)&#125;)</span><br><span class="line"><span class="comment"># "0xf7953104df919ca3d44f262ed291c1a19a82ad34469af6bd4e2a1b7357d93a4f"</span></span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 1000000000000000000</span></span><br></pre></td></tr></table></figure><p></p><p><em>解锁账户:</em> 在部署合约前需要先解锁账户（就像银行转账要输入密码一样）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.unlockAccount(eth.accounts[1],<span class="string">"tang"</span>, 0);</span><br><span class="line"><span class="comment"># true  第二个参数是对应账号的密码</span></span><br></pre></td></tr></table></figure><p></p><h2 id="编写、编译、部署-合约代码"><a href="#编写、编译、部署-合约代码" class="headerlink" title="编写、编译、部署 合约代码"></a>编写、编译、部署 合约代码</h2><p><em>solidity代码如下:</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line">contract hello &#123;</span><br><span class="line">    string greeting;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">string _greeting</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">public</span> <span class="title">returns</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们定义了一个名为hello的合约，在合约初始化时保存了一个字符串（我们会传入hello world），每次调用say返回字符串。</p><p>把这段代码写(拷贝)到 <a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Browser-Solidity</a>，Browser-Solidity 要选中 <code>Auto Compile</code> 。如果没有错误，说明编译成功。点击Details获取部署代码（警告可以不理）。</p><p>在弹出的对话框中找到WEB3DEPLOY部分，点拷贝，粘贴到随便的一个编辑器后，修改初始化字符串为hello world。最后结果为：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _greeting = <span class="string">"hello world"</span> ;</span><br><span class="line"><span class="comment">// Creates a contract object</span></span><br><span class="line"><span class="keyword">var</span> helloContract = web3.eth.contract([&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"say"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"stateMutability"</span>:<span class="string">"view"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"_greeting"</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"stateMutability"</span>:<span class="string">"nonpayable"</span>,<span class="string">"type"</span>:<span class="string">"constructor"</span>&#125;]);</span><br><span class="line"><span class="comment">// deploy new contract</span></span><br><span class="line"><span class="keyword">var</span> hello = helloContract.new(</span><br><span class="line">   _greeting, <span class="comment">// constructorParam, 可存在多个</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">from</span>: web3.eth.accounts[<span class="number">1</span>],  <span class="comment">// 部署账号</span></span><br><span class="line">     data: <span class="string">'0x608060405234801561001057600080fd5b5060405161027c38038061027c83398101604052805101805161003a906000906020840190610041565b50506100dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008257805160ff19168380011785556100af565b828001600101855582156100af579182015b828111156100af578251825591602001919060010190610094565b506100bb9291506100bf565b5090565b6100d991905b808211156100bb57600081556001016100c5565b90565b610191806100eb6000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663954ab4b28114610045575b600080fd5b34801561005157600080fd5b5061005a6100cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009457818101518382015260200161007c565b50505050905090810190601f1680156100c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561015b5780601f106101305761010080835404028352916020019161015b565b820191906000526020600020905b81548152906001019060200180831161013e57829003601f168201915b50505050509050905600a165627a7a7230582095d42238dd45ab5b9cf241235d3dbba2dae94a09053bc96b0935ed98ac9a4ec10029'</span>,  <span class="comment">// 合约编译后的字节码</span></span><br><span class="line">     gas: <span class="string">'4700000'</span> <span class="comment">// 以太坊用 gas 计算要智能合约需要的以太币</span></span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e, contract</span>)</span>&#123; <span class="comment">// 部署后的回调函数</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The callback will fire twice!</span></span><br><span class="line">    <span class="comment">// Once the contract has the transactionHash property set and once its deployed on an address.</span></span><br><span class="line">    <span class="built_in">console</span>.log(e, contract);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> contract.address !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'Contract mined! address: '</span> + contract.address + <span class="string">' transactionHash: '</span> + contract.transactionHash);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p></p><p><code>eth.contract</code> ：<a href="https://solidity.readthedocs.io/en/develop/abi-spec.html" target="_blank" rel="noopener">api说明</a></p><blockquote><p>需要修改的地方：</p><ul><li>第1行：修改字符串为 hello world</li><li>第6行：修改部署账户为新账户索引，即使用新账户来部署合约。</li></ul></blockquote><p>然后一行一行拷贝到 geth 中执行。出现以下类似 log 说明 <strong>部署成功</strong>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Contract mined! address: 0x8500c68000dbbebea6d5673d28927b28b9470854 transactionHash: 0x16c8aa6129693edaf22b43fd043748857d05511251f65b5e9f9faf8355b95656</span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 查看账号余额，发现变少了</span></span><br></pre></td></tr></table></figure><p></p><p>同时也可以在日志中看到挖矿记录等<br><img src="http://7xphbb.com1.z0.glb.clouddn.com/mine-log.png" alt="mine-log"></p><h2 id="运行合约"><a href="#运行合约" class="headerlink" title="运行合约"></a>运行合约</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello.say()</span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure><p>不知道为什么公司的电脑运行成功了，而家里的电脑却报错了 <code>TypeError: &#39;say&#39; is not a function</code>，明明合约创建成功了。</p><p>跟上面截图的最底部的 error: <code>waiting for transactions</code> 没关系，公司的电脑上也有这行日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;欢迎查看 跟着大佬一起动手系列，点击&lt;a href=&quot;https://learnblockchain.cn/2017/11/24/init-env/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;查看大佬的博文&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;什么是智能合约&quot;&gt;&lt;a href=&quot;#什么是智能合约&quot; class=&quot;headerlink&quot; title=&quot;什么是智能合约&quot;&gt;&lt;/a&gt;什么是智能合约&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;以太坊上的程序称之为智能合约，它是代码和数据(状态)的集合。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果做比喻的话智能合约更像是JAVA程序，JAVA程序通过JAVA虚拟机（JVM）将代码解释字节进行执行，以太坊的智能合约通过以太坊虚拟机（EVM）解释成字节码进行执行。&lt;/p&gt;&lt;p&gt;智能合约可以理解为在区块链上可以自动执行的（由消息驱动的）、以代码形式编写的合同（特殊的交易）。&lt;/p&gt;&lt;p&gt;比特币的交易是可以编程的，但是比特币脚本有很多的限制，能够编写的程序也有限，而以太坊具有 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图灵完备&lt;/a&gt;，通俗来说可以完全模拟一台计算机所能做的所有事情。比特币可以执行一些简单脚本，但是他就不是图灵完备，比如循环指令比特币就无法执行。&lt;/p&gt;&lt;h2 id=&quot;编程语言&quot;&gt;&lt;a href=&quot;#编程语言&quot; class=&quot;headerlink&quot; title=&quot;编程语言&quot;&gt;&lt;/a&gt;编程语言&lt;/h2&gt;&lt;p&gt;用户不可能直接编写以太坊虚拟机（EVM）字节码，所以以太坊提供了几种编写智能合约的高级语言。&lt;/p&gt;&lt;p&gt;Solidity：类似JavaScript，这是以太坊推荐的旗舰语言，也是最流行的智能合约语言。具体用法参加Solidity文档，地址：&lt;a href=&quot;https://solidity.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://solidity.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;还有Viper，Serpent，LLL及Bamboo，建议大家还是使用Solidity。Serpent官方已经不再推荐，建议Serpent的用户转换到Viper，他们都是类Python语言。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以根据不同的习惯选择不同的高级语言，目前最流行的是Solidity。&lt;/p&gt;&lt;p&gt;我们下面使用 &lt;a href=&quot;https://ethereum.github.io/browser-solidity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Browser-Solidity&lt;/a&gt; IDE （也就是 Remix ）进行合约的编写和编译&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node常用</title>
    <link href="http://jintang.github.io/2018/07/16/node%E5%B8%B8%E7%94%A8/"/>
    <id>http://jintang.github.io/2018/07/16/node常用/</id>
    <published>2018-07-16T01:53:51.000Z</published>
    <updated>2018-08-12T07:26:35.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node常用命令"><a href="#node常用命令" class="headerlink" title="node常用命令"></a>node常用命令</h2><h3 id="进入、退出命令行"><a href="#进入、退出命令行" class="headerlink" title="进入、退出命令行"></a>进入、退出命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入命令行</span></span><br><span class="line">node</span><br><span class="line"><span class="comment"># 正常退出退出命令行</span></span><br><span class="line">.<span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 强制退出</span></span><br><span class="line">ctrl + c <span class="comment"># 两次</span></span><br></pre></td></tr></table></figure><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><p>谷歌浏览器内置了 <code>node</code> 的调试器，可以很方便的打断点，看 log , 我们需要以调试模式运行 <code>node</code> 程序<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node --inspect index</span><br><span class="line"><span class="comment"># 也是以node --inspect的方式启动，只不过加了supervisor的保存即时生效</span></span><br><span class="line">supervisor --inspect index</span><br></pre></td></tr></table></figure><p></p><h3 id="软连接全局-node-包"><a href="#软连接全局-node-包" class="headerlink" title="软连接全局 node 包"></a>软连接全局 node 包</h3><p>我们可以通过 <code>npm install -g 包名</code> 的方式全局安装第远程包，但对于没有在 <code>node</code> 仓库的包无能为力。这儿有另一种方法全局添加自己写的包<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 文件夹</span><br><span class="line">npm link</span><br></pre></td></tr></table></figure><p></p><p>在全局的包仓库下引用了此仓库，原理类似于快捷方式。然后就可以全局使用自己的包命令了，不想用了的话删除软连接<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unlink</span><br></pre></td></tr></table></figure><p></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;node常用命令&quot;&gt;&lt;a href=&quot;#node常用命令&quot; class=&quot;headerlink&quot; title=&quot;node常用命令&quot;&gt;&lt;/a&gt;node常用命令&lt;/h2&gt;&lt;h3 id=&quot;进入、退出命令行&quot;&gt;&lt;a href=&quot;#进入、退出命令行&quot; class=&quot;headerlink&quot; title=&quot;进入、退出命令行&quot;&gt;&lt;/a&gt;进入、退出命令行&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 正常退出退出命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 强制退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl + c &lt;span class=&quot;comment&quot;&gt;# 两次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;调试模式&quot;&gt;&lt;a href=&quot;#调试模式&quot; class=&quot;headerlink&quot; title=&quot;调试模式&quot;&gt;&lt;/a&gt;调试模式&lt;/h3&gt;&lt;p&gt;谷歌浏览器内置了 &lt;code&gt;node&lt;/code&gt; 的调试器，可以很方便的打断点，看 log , 我们需要以调试模式运行 &lt;code&gt;node&lt;/code&gt; 程序&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node --inspect index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 也是以node --inspect的方式启动，只不过加了supervisor的保存即时生效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisor --inspect index&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&quot;软连接全局-node-包&quot;&gt;&lt;a href=&quot;#软连接全局-node-包&quot; class=&quot;headerlink&quot; title=&quot;软连接全局 node 包&quot;&gt;&lt;/a&gt;软连接全局 node 包&lt;/h3&gt;&lt;p&gt;我们可以通过 &lt;code&gt;npm install -g 包名&lt;/code&gt; 的方式全局安装第远程包，但对于没有在 &lt;code&gt;node&lt;/code&gt; 仓库的包无能为力。这儿有另一种方法全局添加自己写的包&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; 文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm link&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在全局的包仓库下引用了此仓库，原理类似于快捷方式。然后就可以全局使用自己的包命令了，不想用了的话删除软连接&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm unlink&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://jintang.github.io/categories/node/"/>
    
    
      <category term="node" scheme="http://jintang.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>网页适配问题</title>
    <link href="http://jintang.github.io/2018/07/12/%E7%BD%91%E9%A1%B5%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://jintang.github.io/2018/07/12/网页适配问题/</id>
    <published>2018-07-12T02:36:41.000Z</published>
    <updated>2018-08-12T07:26:35.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自己对网页自适应有些不足，补充一下。另外区分一下 自适应 与 响应式 的区别。</p><ul><li>自适应是为了解决如何才能在不同大小的设备上呈现同样的网页</li><li>响应式是自动识别屏幕宽度、并做出相应调整的网页设计，布局和展示的内容可能会有所变动</li></ul></blockquote><h3 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h3><p>可知需要设置大小的样式： <code>width</code> 、 <code>height</code> 、 <code>margin</code> 、 <code>padding</code> 、<code>font-size</code> ，列出来方便思考。<br>可知技术方案： 百分比布局、媒体查询 、 <code>rem</code> 、 <code>vw系列</code> 、 <code>flex</code> 。每一项都有自己的优缺点，我们需要结合起来使用。以实验过程来说明一些问题：</p><ol><li>只用百分比布局</li></ol><ul><li>优点： 浏览器大小改变时布局不变。实现了 自适应网页</li><li>缺点：<ul><li>如果屏幕过小，某个 <code>div</code> 内的内容可能过于拥挤，现在 <strong>PC</strong> 的屏幕不会太小，一般不会影响，但如果想要手机端或者平板访问此网页，效果可想而知。</li><li>如果屏幕过大，某个 <code>div</code> 内的内容可能过于稀少，那么我们需要字体同步放大，需要图片或其他媒体资源同步放大</li></ul></li></ul><ol start="2"><li><p>加上媒体查询</p><p>百分比布局加上这个就可以实现 <a href="https://alistapart.com/article/responsive-web-design" target="_blank" rel="noopener">响应式布局</a>，<a href="https://mediaqueri.es/" target="_blank" rel="noopener">这儿</a> 有很多案例</p></li></ol><ul><li>优点： 可以根据 <code>@media</code> 查询设置不同的样式，甚至布局。这样移动端通过修改布局也可以得到好的体验。</li><li>缺点： 要多写好几倍的 <code>css</code></li></ul><ol start="3"><li><p>锦上添花</p><p>理论上上面的两个已经可以解决布局问题，但现实中你可能没有时间写那么多的 <code>css</code>。那我们需要其他好东西。</p></li></ol><ul><li><p><code>rem</code> ：根据网页的根元素来设置字体大小。现代浏览器默认的根元素字体大小是 <code>font-size: 16px</code>。<br>设置这个可以让不同屏幕下的字体大小同步缩放，也可以设置给 <code>width</code>、 <code>padding</code> 、 <code>margin</code>。但不同的屏幕下需要给 <code>html</code> 节点 设定不同的 <code>font-size</code> 基准值。下面是几种方式：</p><ol><li><p>配合 <code>@media</code>,例如： <a href="http://3g.163.com/touch/news?version=v_standard" target="_blank" rel="noopener">网易新闻</a></p><p>手机的屏幕宽度： iphone5 是 320px ， iphone6/7/8/X 是 375px ， iphone6/7/8 plus 是 414px ，下面是部分代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">42.667px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">361px</span>) and (max-width:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">413px</span>) and (max-width:<span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">55.2px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的 <code>font-size</code> 是由 屏幕宽度/7.5 得到的，网易新闻 的设计图应该是 750px 的，除以 7.5之后 <code>font-size</code> 就是 100px ，方便其他元素的计算。子元素都是通过 <code>rem</code> 设的宽高等，因为 <code>414:375:320 = 55.2:50:42.667</code> ， 所以在 320px、375px、414px下显示的效果是一样的，上面还用了 <code>vw</code> ，如果浏览器支持的话，可以不使用 <code>@media</code> ，直接设置 <code>html: {font-size: 13.33333}vw</code>， 13.33333 是通过 100/7.5 得到的。然后根据设计图将 <code>px</code> 换算为 <code>rem</code> 就行了，你也可以修改 7.5 为其他值，比如说 10 。</p></li><li><p><code>js</code> 动态计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在 window.resize 方法里也要添加下面这条命令 */</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">10</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>calc</code> 自动计算</p><p>可以直接设置 <code>html: {font-size: 13.33333}vw</code> ，好粗暴。 <a href="https://www.zhangxinxu.com/wordpress/2016/08/vw-viewport-responsive-layout-typography/" target="_blank" rel="noopener">张鑫旭大神</a> 有实践大型项目后的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(100% + 2 * (100vw - 375px) / <span class="number">39</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(16px + 2 * (100vw - 375px) / <span class="number">39</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 414px-1000px每100像素宽字体增加1px(18px-22px) */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(112.5% + 4 * (100vw - 414px) / <span class="number">586</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(18px + 4 * (100vw - 414px) / <span class="number">586</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 600px-1000px每100像素宽字体增加1px(20px-24px) */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(125% + 4 * (100vw - 600px) / <span class="number">400</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(20px + 4 * (100vw - 600px) / <span class="number">400</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1000px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 1000px往后是每100像素0.5px增加 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(137.5% + 6 * (100vw - 1000px) / <span class="number">1000</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(22px + 6 * (100vw - 1000px) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>vw系列</code> : <code>vw</code> 代表屏幕的可见宽度，类似的还有 <code>vh</code> 、 <code>vmin</code> 、 <code>vmax</code> 。百分比宽度是根据父节点的宽度设定的，当嵌套多层之后，用 <code>vw</code> 比较方便。如果浏览器都支持 <code>vw</code> 的话，完全可以用 <code>vw</code> 取代 <code>rem</code> ，上面 网易新闻 的 demo 还用 <code>vw</code> 来设定 <code>html</code> 的 <code>font-size</code></p></li><li><code>flex</code>: 让子元素成比例，垂直居中…等等，不要太方便</li></ul><h3 id="图片等媒体资源处理"><a href="#图片等媒体资源处理" class="headerlink" title="图片等媒体资源处理"></a>图片等媒体资源处理</h3><p>jpg 等图片如果大小设置不合理会发生失真或者截取一部分的情况。所以我们通常这样处理：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样，图片最大的时候会保持其原始大小和比例，不会放大失真。而图片变小时也会保持比例。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;自己对网页自适应有些不足，补充一下。另外区分一下 自适应 与 响应式 的区别。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;自适应是为了解决如何才能在不同大小的设备上呈现同样的网页&lt;/li&gt;&lt;li&gt;响应式是自动识别屏幕宽度、并做出相应调整的网页设计，布局和展示的内容可能会有所变动&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;技术选择&quot;&gt;&lt;a href=&quot;#技术选择&quot; class=&quot;headerlink&quot; title=&quot;技术选择&quot;&gt;&lt;/a&gt;技术选择&lt;/h3&gt;&lt;p&gt;可知需要设置大小的样式： &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;margin&lt;/code&gt; 、 &lt;code&gt;padding&lt;/code&gt; 、&lt;code&gt;font-size&lt;/code&gt; ，列出来方便思考。&lt;br&gt;可知技术方案： 百分比布局、媒体查询 、 &lt;code&gt;rem&lt;/code&gt; 、 &lt;code&gt;vw系列&lt;/code&gt; 、 &lt;code&gt;flex&lt;/code&gt; 。每一项都有自己的优缺点，我们需要结合起来使用。以实验过程来说明一些问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;只用百分比布局&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;优点： 浏览器大小改变时布局不变。实现了 自适应网页&lt;/li&gt;&lt;li&gt;缺点：&lt;ul&gt;&lt;li&gt;如果屏幕过小，某个 &lt;code&gt;div&lt;/code&gt; 内的内容可能过于拥挤，现在 &lt;strong&gt;PC&lt;/strong&gt; 的屏幕不会太小，一般不会影响，但如果想要手机端或者平板访问此网页，效果可想而知。&lt;/li&gt;&lt;li&gt;如果屏幕过大，某个 &lt;code&gt;div&lt;/code&gt; 内的内容可能过于稀少，那么我们需要字体同步放大，需要图片或其他媒体资源同步放大&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;p&gt;加上媒体查询&lt;/p&gt;&lt;p&gt;百分比布局加上这个就可以实现 &lt;a href=&quot;https://alistapart.com/article/responsive-web-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;响应式布局&lt;/a&gt;，&lt;a href=&quot;https://mediaqueri.es/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt; 有很多案例&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;优点： 可以根据 &lt;code&gt;@media&lt;/code&gt; 查询设置不同的样式，甚至布局。这样移动端通过修改布局也可以得到好的体验。&lt;/li&gt;&lt;li&gt;缺点： 要多写好几倍的 &lt;code&gt;css&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;&lt;p&gt;锦上添花&lt;/p&gt;&lt;p&gt;理论上上面的两个已经可以解决布局问题，但现实中你可能没有时间写那么多的 &lt;code&gt;css&lt;/code&gt;。那我们需要其他好东西。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;rem&lt;/code&gt; ：根据网页的根元素来设置字体大小。现代浏览器默认的根元素字体大小是 &lt;code&gt;font-size: 16px&lt;/code&gt;。&lt;br&gt;设置这个可以让不同屏幕下的字体大小同步缩放，也可以设置给 &lt;code&gt;width&lt;/code&gt;、 &lt;code&gt;padding&lt;/code&gt; 、 &lt;code&gt;margin&lt;/code&gt;。但不同的屏幕下需要给 &lt;code&gt;html&lt;/code&gt; 节点 设定不同的 &lt;code&gt;font-size&lt;/code&gt; 基准值。下面是几种方式：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;配合 &lt;code&gt;@media&lt;/code&gt;,例如： &lt;a href=&quot;http://3g.163.com/touch/news?version=v_standard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网易新闻&lt;/a&gt;&lt;/p&gt;&lt;p&gt;手机的屏幕宽度： iphone5 是 320px ， iphone6/7/8/X 是 375px ， iphone6/7/8 plus 是 414px ，下面是部分代码&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-width: &lt;span class=&quot;number&quot;&gt;320px&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42.667px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;13.33333vw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (min-width: &lt;span class=&quot;number&quot;&gt;361px&lt;/span&gt;) and (max-width:&lt;span class=&quot;number&quot;&gt;375px&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;13.33333vw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (min-width: &lt;span class=&quot;number&quot;&gt;413px&lt;/span&gt;) and (max-width:&lt;span class=&quot;number&quot;&gt;414px&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;55.2px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;13.33333vw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jintang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://jintang.github.io/tags/css/"/>
    
      <category term="html" scheme="http://jintang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>移动端调试网页需知</title>
    <link href="http://jintang.github.io/2018/07/10/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E7%BD%91%E9%A1%B5%E9%9C%80%E7%9F%A5/"/>
    <id>http://jintang.github.io/2018/07/10/移动端调试网页需知/</id>
    <published>2018-07-10T02:56:33.000Z</published>
    <updated>2018-08-12T07:26:35.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意是网页，而不是 App</p></blockquote><h2 id="常见国内移动端浏览器"><a href="#常见国内移动端浏览器" class="headerlink" title="常见国内移动端浏览器"></a>常见国内移动端浏览器</h2><p>手机浏览器内核基本都是 <code>webkit</code>，只不过国内的重新封装了一层，所以谷歌浏览器自带的 <code>Inspect Device</code> 检测不出国内浏览器。</p><ol><li>微信内置、qq浏览器： <code>X5内核</code> ，由腾讯开发的。</li></ol><ul><li>一加自带浏览器： X5内核 037322GPU-M，目前我的是这个版本，问题好多， <code>vue</code> 已经用 <code>babel</code> 转了，但还是不支持，不知道为什么</li><li>QQ浏览器： X5内核 038615GPU-UU，目前我的是这个版本</li><li>UC浏览器： U4内核，由 UC 自主开发</li></ul><p>由于移动端浏览器的五花八门，经常会遇到莫名其妙的 bug ， 我们需要好用的调试工具，看下文。</p><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><ul><li><a href="http://www.browsersync.cn/" target="_blank" rel="noopener">BrowerSync</a>： 可以同时在PC、平板、手机等设备下进项调试，需要电脑和手机在同一 <code>wifi</code> 下</li><li><code>Weinre</code> : 功能与 Chrome DevTools 相似，需要在页面中插入一段 JS 脚本来实时调试页面 DOM 结构、样式、JS 等，另外它使用的是代理的方式，所以兼容性很好，无论是新老设备系统通吃。如果你的手机安装了 Chrome 浏览器，那么可以通过 USB 用 Chrome DevTools 调试，但是国内的手机用的浏览器在 Chrome DevTools 上无法识别，所以可以用过 <code>Weinre</code> 调试。详细可参考 <a href="https://aotu.io/notes/2017/02/24/Mobile-debug/" target="_blank" rel="noopener">这儿</a>，利用此工具可以调试这些：<ul><li>dom 元素</li><li>network 监听</li><li>source 打断点</li><li>console 查看日志</li></ul></li><li><code>fiddle</code> 等代理工具，通过 <code>usb</code> 连接。我没成功…<a id="more"></a></li></ul><h2 id="响应式问题"><a href="#响应式问题" class="headerlink" title="响应式问题"></a>响应式问题</h2><p>现代浏览器我们直接使用了 <code>vw</code> ，创建了一个 <code>px</code> 转 <code>vw</code> 的函数，然后在 <code>scss</code> 中使用对应的像素值。<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">function</span> px2vw($number) &#123;</span><br><span class="line">    <span class="comment">/* 因为我们的设计稿是320 */</span></span><br><span class="line">    @<span class="keyword">return</span> $number/<span class="number">320</span>*<span class="number">100</span>+vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>使用：</em><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">px2vw</span>(30);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">px2vw</span>(12);</span><br><span class="line">    <span class="comment">/* 其他属性如margin、padding、line-height这些都可以用vw */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>以下情况需要酌情使用 <code>@media</code>:</p><ul><li>如果需要适配 <code>ipad</code> ，因为这个屏幕比手机大很多，所以最好用 <code>@media</code> 修改下页面布局。不用 <code>@media</code> 直接让等比缩放也勉强可以接受。</li><li>用 <code>css</code> 写了特殊样式，比如说写一个 三个横杠的菜单图标，我们要为每个横杠设置高度，这个值一般比较小，直接上面的 <code>px2vw</code> 函数最后可能生成的是带小数的 <code>px</code>，在手机端你会发现三个横杠不一样高。这时候我们需要用 <code>@media</code> 设置整数的高度</li></ul><h2 id="1px-border-问题"><a href="#1px-border-问题" class="headerlink" title="1px border 问题"></a>1px border 问题</h2><p>利用伪类 和 <code>transform</code> 的 <code>scale</code><br><em>scss mixin:</em><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border1px ($color)&#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    border: 1px solid $color;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-2</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        &amp;:before &#123;</span><br><span class="line">            <span class="selector-tag">content</span>: "";</span><br><span class="line">            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">            <span class="selector-tag">top</span>: 0;</span><br><span class="line">            <span class="selector-tag">left</span>: 0;</span><br><span class="line">            <span class="selector-tag">width</span>: 200%;</span><br><span class="line">            <span class="selector-tag">height</span>: 200%;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>);</span><br><span class="line">            <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">            border: 1px solid $color;</span><br><span class="line">            <span class="selector-tag">transform-origin</span>: 0 0;</span><br><span class="line">            <span class="selector-tag">pointer-events</span>: <span class="selector-tag">none</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-3</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        &amp;:before &#123;</span><br><span class="line">            <span class="selector-tag">content</span>: "";</span><br><span class="line">            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">            <span class="selector-tag">top</span>: 0;</span><br><span class="line">            <span class="selector-tag">left</span>: 0;</span><br><span class="line">            <span class="selector-tag">width</span>: 300%;</span><br><span class="line">            <span class="selector-tag">height</span>: 300%;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.33</span>);</span><br><span class="line">            <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">            border: 1px solid $color;</span><br><span class="line">            <span class="selector-tag">transform-origin</span>: 0 0;</span><br><span class="line">            <span class="selector-tag">pointer-events</span>: <span class="selector-tag">none</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>js :</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">Math</span>.floor(<span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (dpr &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.className = <span class="string">'pixel-ratio-'</span> + dpr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的例子是四个方向都有 <code>border</code> ，若只有一个方向的，比如 <code>border-top</code> ，<em>js</em> 部分不变， <em>scss</em> 部分为 :<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border1px-top ($color)&#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">background-color</span>: $color;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        html.pixel-ratio-2 &amp; &#123;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(0<span class="selector-class">.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-3</span> &amp; &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.33);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="最小字体限制"><a href="#最小字体限制" class="headerlink" title="最小字体限制"></a>最小字体限制</h2><p>移动端浏览器没有 pc 浏览器最小字体 <code>12px</code> 的限制，可以直接指定小于 <code>12px</code> 的字体</p><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><ol><li><p>图片模糊问题：</p><p>有些手机屏幕是高清屏，比如说 <code>iphone</code> 系列，现在它的主流 <code>dpr</code> 是 2 和 3 ，所以如果我们要用图片的话需要使用 2倍图 和 3倍图，不然高清屏下图片会模糊。</p><p>当然用 <code>svg</code> 也是可以的， <code>svg</code> 号称不会失真 , 但我在用 <code>iphoneX</code> 下有个小图标竟然有些模糊，原因不明…很纳闷</p></li><li><p>大图问题：</p><p>设计mm截的图有些 <code>svg</code> 有些大。对于这些 <code>svg</code> ， 设计mm就帮我改成了 <code>jpg</code> 或 <code>png</code>， 图片变小了一些，但还有部分大小还是有些大。</p><p>然后我用了 <a href="https://tinypng.com/" target="_blank" rel="noopener">压缩图片工具</a>，这个工具压缩后的图片不会修改图片的分辨率，所以不会影响图片的清晰度。它的原理是减少了原本图片里使用的颜色数量，肉眼是看不出来区别的。</p></li><li><p><code>Svg</code> 大小问题：</p><p><code>svg</code> 文件中不要设置固定px的 <code>width</code> 与 <code>height</code>（如果设置了， <code>svg</code> 就不会根据 <code>img</code> 标签设置的宽高变化了），可以设值为 100% 。用 <code>viewBox</code> 来描述 <code>svg</code> 的宽高比就行了。</p><p>然后在引用 <code>svg</code> 的 <code>img</code> 标签上设置宽高，或者只设置其中的一个。本来设计mm给我的 <code>svg</code> 有固定的宽高，我手动改成了 100% ，其他手机浏览器下可以自动缩放适应，但在 <code>IOS</code> 下这些改过的没有缩放，最后通过添加下面样式解决：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 父容器</span><br><span class="line"><span class="selector-class">.parent</span> &#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line">// svg</span><br><span class="line"><span class="selector-class">.icon</span> &#123;<span class="attribute">flex-shrink</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="个别机型问题"><a href="#个别机型问题" class="headerlink" title="个别机型问题"></a>个别机型问题</h2><ol><li><code>UC</code> 、 <code>QQ</code> 、 <code>360</code> 、 <code>Chrome</code> … 浏览器首屏工具栏问题：</li></ol><p>若需要做首屏占满屏幕：</p><ul><li><p>我用 <code>vh</code> 来实现占满屏幕，底部的工具栏会盖住一部分内容，但如果滚动到最底部，工具栏却不会盖住内容，应该是浏览器对 <code>vh</code> 的支持不太友好。针对首屏被盖住内容的部分，按下面处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browser = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span> (browser.indexOf(<span class="string">'MQQBrowser'</span>) !== <span class="number">-1</span> || browser.indexOf(<span class="string">'UCBrowser'</span>) !== <span class="number">-1</span> || browser.indexOf(<span class="string">'Chrome'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不知道工具栏具体的高度，所以是大概的给需要改变位置的元素加了 50px</span></span><br><span class="line">    <span class="keyword">let</span> downSignEle = <span class="built_in">document</span>.querySelector(<span class="string">'.down-sign'</span>);</span><br><span class="line">    downSignEle.style.bottom = <span class="built_in">parseInt</span>(getComputedStyle(downSignEle)[<span class="string">'bottom'</span>]) + <span class="number">50</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用 <code>js</code> 计算屏幕可见高度，建议这种方式，各种浏览器下都会统一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> screenH = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"><span class="keyword">let</span> firstPageEle = <span class="built_in">document</span>.querySelector(<span class="string">'.first-page'</span>);</span><br><span class="line">firstPageEle.style.height = screenH + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p><code>IOS</code> 系统下滚动不流畅，添加下面的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">height</span>: 100%;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">scroll</span>;</span><br><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>IOS</code> 点击去除灰色选中效果，添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0);</span><br></pre></td></tr></table></figure></li><li><p><code>UC</code> 下 <code>text-align:center</code> 无效<br>使用的 <code>UIkit</code> 的 <code>banner</code> 中 <code>text-align:center</code> 生效，但自己写的却不生效，对比样式发现没啥区别，没找到原因，最后用了下面的方案实现 <code>center</code> 效果，有哪位大佬知道请留言。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;注意是网页，而不是 App&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;常见国内移动端浏览器&quot;&gt;&lt;a href=&quot;#常见国内移动端浏览器&quot; class=&quot;headerlink&quot; title=&quot;常见国内移动端浏览器&quot;&gt;&lt;/a&gt;常见国内移动端浏览器&lt;/h2&gt;&lt;p&gt;手机浏览器内核基本都是 &lt;code&gt;webkit&lt;/code&gt;，只不过国内的重新封装了一层，所以谷歌浏览器自带的 &lt;code&gt;Inspect Device&lt;/code&gt; 检测不出国内浏览器。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;微信内置、qq浏览器： &lt;code&gt;X5内核&lt;/code&gt; ，由腾讯开发的。&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;一加自带浏览器： X5内核 037322GPU-M，目前我的是这个版本，问题好多， &lt;code&gt;vue&lt;/code&gt; 已经用 &lt;code&gt;babel&lt;/code&gt; 转了，但还是不支持，不知道为什么&lt;/li&gt;&lt;li&gt;QQ浏览器： X5内核 038615GPU-UU，目前我的是这个版本&lt;/li&gt;&lt;li&gt;UC浏览器： U4内核，由 UC 自主开发&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于移动端浏览器的五花八门，经常会遇到莫名其妙的 bug ， 我们需要好用的调试工具，看下文。&lt;/p&gt;&lt;h2 id=&quot;调试工具&quot;&gt;&lt;a href=&quot;#调试工具&quot; class=&quot;headerlink&quot; title=&quot;调试工具&quot;&gt;&lt;/a&gt;调试工具&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.browsersync.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BrowerSync&lt;/a&gt;： 可以同时在PC、平板、手机等设备下进项调试，需要电脑和手机在同一 &lt;code&gt;wifi&lt;/code&gt; 下&lt;/li&gt;&lt;li&gt;&lt;code&gt;Weinre&lt;/code&gt; : 功能与 Chrome DevTools 相似，需要在页面中插入一段 JS 脚本来实时调试页面 DOM 结构、样式、JS 等，另外它使用的是代理的方式，所以兼容性很好，无论是新老设备系统通吃。如果你的手机安装了 Chrome 浏览器，那么可以通过 USB 用 Chrome DevTools 调试，但是国内的手机用的浏览器在 Chrome DevTools 上无法识别，所以可以用过 &lt;code&gt;Weinre&lt;/code&gt; 调试。详细可参考 &lt;a href=&quot;https://aotu.io/notes/2017/02/24/Mobile-debug/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;，利用此工具可以调试这些：&lt;ul&gt;&lt;li&gt;dom 元素&lt;/li&gt;&lt;li&gt;network 监听&lt;/li&gt;&lt;li&gt;source 打断点&lt;/li&gt;&lt;li&gt;console 查看日志&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;fiddle&lt;/code&gt; 等代理工具，通过 &lt;code&gt;usb&lt;/code&gt; 连接。我没成功…
    
    </summary>
    
      <category term="移动端" scheme="http://jintang.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://jintang.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>洛阳纸贵</title>
    <link href="http://jintang.github.io/2018/06/26/%E6%B4%9B%E9%98%B3%E7%BA%B8%E8%B4%B5/"/>
    <id>http://jintang.github.io/2018/06/26/洛阳纸贵/</id>
    <published>2018-06-26T06:33:29.000Z</published>
    <updated>2018-08-12T07:26:35.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>离开意味着新的开始，感叹下自己这离奇的9天</p></blockquote><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><ol><li><p>程序员最好有一台自己的笔记本，这样环境只需要配一次，不用换个公司又重新配一遍环境。我没用过 <code>Mac</code>， 但我感觉 <code>windows</code> 和 <code>linux</code> 双系统也挺棒的</p></li><li><p>我也经历过好几家公司了，每家公司的网都不咋地。除了用本地局域网联调外，我决定其他的连手机热点，网速比这快多了。</p></li><li><p>作为一个中国程序员，每次装环境之后还需要额外设置一些东西：</p><ul><li><code>node</code>、<code>yarn</code>： 装完之后受限于国内的网络，设置镜像。有几个包还需要额外设置镜像仓库，比如大名鼎鼎的 <code>node-sass</code>，参考 <a href="https://gist.github.com/52cik/c1de8926e20971f415dd" target="_blank" rel="noopener">这儿</a>，设置一次 <code>npm</code> 和 <code>yarn</code> 同时生效，设置完之后可以通过 <code>npm config list</code> 和 <code>yarn config list</code> 查看。</li><li><code>git</code>：基本配置查看 <a href="https://jintang.github.io/2016/06/24/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">这儿</a></li><li><p><code>dokcer</code> ： 同样设置镜像</p><ul><li><p><code>linux</code> 中在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后重新启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docke</span></span><br></pre></td></tr></table></figure></li><li><p><code>Windows10</code> 在系统右下角托盘 <code>Docker</code> 图标内右键菜单选择 <code>Settings</code> ，打开配置窗口后左侧导航菜单选择 <code>Daemon</code> 。在 <code>Registry mirrors</code> 一栏中填写加速器地址 <code>https://registry.docker-cn.com</code> ，之后点击 <code>Apply</code> 保存后 <code>Docker</code> 就会重启并应用配置的镜像地址了</p></li></ul></li><li><code>vue</code> :<ul><li>安装：<code>npm install -g @vue/cli</code> ， <code>vue-cli</code> 到 3 了，加了可视化配置，更新的好快</li><li>初始化项目模板： <code>vue create 项目名</code></li></ul></li><li><code>react-native</code> :<ul><li>安装： <code>npm install -g react-native-cli</code></li><li>初始化项目模板： <code>react-native init AwesomeProject</code></li></ul></li><li><code>android</code>： 既然要用 <code>react-native</code>， 肯定要配置 <code>android</code> 与 <code>ios</code> 的环境，可惜我没 <code>mac</code><ul><li><code>jdk1.8</code>： <code>Android Studio</code> 必须。 需手动配置环境变量 <code>JAVA_HOME</code> 与 <code>Path</code></li><li><code>Android Studio</code> 、 <code>SDK</code> 、 <code>ANDROID_HOME</code>: 可以帮助我们编译 <code>Android</code> 原生相关，用里面的 <code>SDK Manager</code>安装相关 <code>sdk</code>，配置环境变量 <code>ANDROID_HOME</code></li><li>手机模拟器： <code>windows</code> 下如果你装了 <code>docker</code> 就不能用 <code>genymotion</code> 了，原因看后面。 选择 <code>Visual Studio Emulator for Android</code></li></ul></li><li>自动化工具： 这只是个工具，不应该将很多精力放在这上面<ul><li><code>grunt</code>: 已经很少用了，需全局安装： <code>npm install -g grunt-cli</code></li><li><code>gulp</code>: 有些还在用，也需全局安装： <code>npm install gulp-cli -g</code></li><li><code>webpack</code>: 很流行。 可以全局安装，也可以只在项目中安装</li></ul></li></ul></li><li>常用 <code>IDE</code> 的设置存到云盘：我常用的 <code>vscode</code> 、 <code>webstorm</code> （jetbrain 家 IDE 的配置可以通用）<a id="more"></a></li></ol><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>记录经历主要是为了吐槽， 但还有一个方面非常重要。每次配环境都是匆匆的配，想起一点配一点，很糟。</p><ol><li><p>拿到新的电脑，查看代码规范文档，看着同事的 <code>mac</code> 们羡慕不已，对有规范文档暗暗点头，是家有范的公司。</p></li><li><p>后端是 <code>php</code> ，关系不大。为毛我也要装 <code>php</code> 跟 <code>php</code> 框架 <code>laravel</code>，什么，前后端没分离…我擦。本地装完 <code>laravel</code> 后才发现大家都用的 <code>docker</code> 保持环境的一致，我记得之前学这个的时候记得 <code>windows</code> 下只有 <code>win10</code> 可以安装 <code>docker</code>，在建议下装 <code>ubuntu</code></p></li><li><p>装双系统需要给 <code>linux</code> 系统压缩出一块硬盘，怕不够特意比网上的多分配了差不多一倍。 <code>ubuntu18.04</code> 装好了，我的台式机用的无线网卡，苦逼的发现连不上网，好不容易下了网卡驱动，又没有 <code>gcc</code> 的编译环境，无法 <code>make</code> ， 好蛋疼，最后找了根网线，醉了醉了。 装了一大堆的其他环境：<code>git</code> 、 <code>node</code> 、 <code>yarn</code> 、<code>php</code> … <code>docker</code> 怎么也下不到最新版的，在 <code>docker</code> 官方仓库 <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> 里也找不到，怪不得安装不上最新的。然后我在 6.24 日（过了一个礼拜）的时候重新打开看了下，神奇的有了 <img src="http://7xphbb.com1.z0.glb.clouddn.com/docker-address.png" alt="docker-address">。我很无语…</p></li><li><p>项目里的 <code>docker</code> ，我们的项目里配置了很多容器，需要搭配好，项目我不熟，最后是后台的同事帮助搞定了 <code>docker</code> 环境，自己一脸懵逼。</p></li><li><p>又是一个项目， <code>docker</code> 的配置还是后台同事帮忙配的，这次大概明白了点，主要修改 <code>haproxy</code> 配置、 <code>nginx</code> 配置、<code>docker-compose.yml</code>, 进入 <code>nginx-php-fpm</code> 容器安装 <code>php</code> 依赖—— <code>composer install</code>，本地项目安装前端依赖—— <code>yarn install</code>，因为项目用了 <code>laravel</code> 框架， 所以还要配 <code>.env</code> 文件， 用 <code>php atisan keg:generate</code> 生成 <strong>APP-key</strong> ，其他配置按需求。修改 <code>host</code> ， 因为 <code>nginx</code> 中配的是自定义域名，自定义域名指向 127.0.0.1 ，用的是 <code>SwitchHosts</code> 这个工具，这个是跨平台的，比较好用。 还要给 <code>Storage</code> 文件夹下赋权限 777，不太懂…开始修改 bug</p></li><li><p>其他的 bug 修改完了，还有 360 浏览器的兼容性 bug 。一脸苦笑，我一个 <code>ubuntu</code> 哪来的 360 。好吧，装虚拟机吧，装个 win10 的虚拟机，幸好有之前使用这台电脑的哥们留着的 iso 镜像，我不用等很久很久，网速好慢。装好了，网络设为 <strong>桥接</strong> ，可以访问宿主机调试了。在装一些方便的软件： 谷歌浏览器、 <code>shadows-qt5</code> 搭配谷歌插件 <code>SwitchyOmega</code> 来浏览器翻墙（终端翻墙需要另外的配置）、 <code>webStorm</code> 、 <code>vscode</code> 、搜狐输入法、 <code>wine-qq</code> 、 <code>wine-钉钉</code> 、微信、 <code>gnome-tweak-tool</code> （优化主题等，优化后的系统真好看）… <code>vscode</code> 这种软件配置成自己的习惯好麻烦，所以我找了以前的同事帮我备份了下我以前的配置，然后导入，再然后保存到百度云盘里， <code>webstorm</code> 同样处理。话说回来，整个 <code>ubuntu</code> 的配置能不能云备份，下次我装的时候一键解决…</p></li><li><p>360 兼容模式下使用的是 <strong>IE</strong> 内核，绝大多数的兼容性 bug 都是因为在 <code>blade.php</code> 文件里用了 <code>es6</code> 的语法。 为啥用不了呢，下面是回答的原文, 再附上 <a href="https://laracasts.com/discuss/channels/elixir/babel-es6-in-blade-template" target="_blank" rel="noopener">链接</a>，我还是不太明白深层的含义</p><blockquote><p>The only reason you should have javascript in a blade template is because you’re passing variables from PHP.There’s no way that can be compiled anywhere other than at run time.</p></blockquote></li><li><p>得知消息说要开始做 app 了，选用 <code>react-native</code> ， 嗯…那我先装环境， <code>java</code> 环境没装完就报我 <code>/home</code> 卷满了，用磁盘分析工具发现那个虚拟机就占了 18G ，我整个 <code>/home</code> 卷才配了 20G …好吧，找篇教程开始扩容。马有失蹄啊，扩容后重启，整个系统崩了…我好崩溃，我装 <code>ubuntu</code> 的 U盘带回家了，不然我就重装 <code>ubuntu了</code>。也许是天意，接了一圈借到了 <code>win10</code> 的安装盘，好吧，听同事说他用的 <code>win10</code>， 可以装 <code>docker</code> ，我也不想再折腾了。那就 <code>win10</code> 吧，借到的这个是 <strong>家庭版</strong> ， 装不了 <code>docker</code> ， 虽然明天是周六，看来得自己来加班了…这几天装环境装的人身心俱疲，查到的资料一大堆乱乱的充斥在脑子里，所以我做了一件好事，把 <strong>魂斗罗</strong> 手游给戒了，垃圾游戏，天天各种任务，毁我视力，浪费时间，浪费生命。</p></li><li><p>带着家里网速杠杠制作的 <code>win10企业版</code> 安装盘来装系统，以防万一我还带了 <code>ubuntu18.04</code> 的安装盘 。为毛这么热啊，空调是摆设吗，根本就调不了那个温度嘛，感觉一直在被蒸着，后面才知道周末大楼为了节约是关了中央空调的。一上午就装好了，开始装 <code>docker</code>。通过 <code>bios</code> 设置 <code>Intel Virtual technology: enable</code>， 这样系统就开启了 <code>Hyper-V</code> ，这是个 <code>win10</code> 自带的虚拟机， <code>docker</code> 需要这个才可以安装。发现还是装不了，需要升级 <code>windows</code> 版本， 至少要到 <code>14393</code> 版本。通过 <strong>运行</strong> —— <code>winver</code> 查看自己的版本号，果然不够。好吧，来个在线升级吧，真的不想再装系统了。下载 <strong>易升</strong> 开始在线升级，这时刚到中午，速度好像不给力啊，如果速度稳定的话，这 100% 得到下午 4 点了。 在等待的过程中在 <code>windows</code> 上用 <code>Hyper-V</code> 装了 <code>ubuntu</code> 的虚拟机，再选择版本的时候想起来上次没找到 <code>ubuntu18.04</code> 对应的 <code>docker</code> 新版本，这次在 <code>docker</code> 仓库上重新查看，发现 <code>17.10</code> 有，鬼使神差的又去看了 <code>18.04</code>，竟然也有，这就是我之前写到为啥会重新查看的原因，使用感觉很不好…主要是反应慢一拍。被蒸了一下午，到了 5 点，终于 100% 了，竟然又来了个进度条… 这个速度稍微快点，我想今天怎么着也得弄完吧，一直到了 7 点，才到 80% ，中间我意识到可能是因为我没有全局代理翻墙，但是不敢切，怕整个连接都断了。天啊，晚上还有人约饭呢，算了，我明天再来吧…草。 值得安慰的是朋友做了一大堆好吃的，喝果啤看球赛，在他的怂恿下压了 100元 的德国，如果这把德国输了德国就小组淘汰了，很有道理。</p></li><li><p>昨天蒸了一天，早上醒来感觉自己感冒了，发现德国赢了，来公司发现升级好了，鉴于公司这么垃圾的网速，我决定跟宽带办一个绑定的无线流量卡，以后开热点，自力更生。整个人软软的，接着装好了 <code>docker</code> ，好像没问题，具体得，明天周一配置项目了验证下，自己对整个配置过程还不是很明白。</p></li><li><p>经过同事的帮助，项目成功跑起来了，看来我以后还是用 <code>windows</code> 吧， <code>qq</code> 这些东西起码方便。再重新装 <code>git</code> 、 <code>node</code> 、 <code>yarn</code> 、<code>php</code> … <code>php</code> 环境好麻烦，最后用了 <code>phpStudy</code> 的集成环境，再从 <code>composer</code> 官网下载 <code>composer</code> 安装包，会自动配置好环境变量。</p></li><li><p>因为要运行 <code>react-native</code> ，所以需要手机模拟器，之前一直用的 <code>genymotion</code> 启动不起来…原来是 <code>virtual box</code> 跟 <code>Hyper-V</code> 冲突了。最后安装了 <code>Visual Studio Emulator for Android</code>，不需要装 <code>VS</code>这个模拟器也是用的 <code>Hyper-V</code> 虚拟机。但是无法同时启动 <code>Android模拟器</code> 和 <code>docker</code> ， 原因是我的内存不够…</p></li></ol><p>我的折腾环境总算告一段落了，感冒让我欲仙欲死…这样的过程我再也不想来第二遍了，如果还要我重装的话，我选择自己买台电脑，以后在公司用自己的电脑。最后在上面列一下自己苦逼的经验。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;离开意味着新的开始，感叹下自己这离奇的9天&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;干货&quot;&gt;&lt;a href=&quot;#干货&quot; class=&quot;headerlink&quot; title=&quot;干货&quot;&gt;&lt;/a&gt;干货&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;程序员最好有一台自己的笔记本，这样环境只需要配一次，不用换个公司又重新配一遍环境。我没用过 &lt;code&gt;Mac&lt;/code&gt;， 但我感觉 &lt;code&gt;windows&lt;/code&gt; 和 &lt;code&gt;linux&lt;/code&gt; 双系统也挺棒的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我也经历过好几家公司了，每家公司的网都不咋地。除了用本地局域网联调外，我决定其他的连手机热点，网速比这快多了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;作为一个中国程序员，每次装环境之后还需要额外设置一些东西：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;node&lt;/code&gt;、&lt;code&gt;yarn&lt;/code&gt;： 装完之后受限于国内的网络，设置镜像。有几个包还需要额外设置镜像仓库，比如大名鼎鼎的 &lt;code&gt;node-sass&lt;/code&gt;，参考 &lt;a href=&quot;https://gist.github.com/52cik/c1de8926e20971f415dd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;，设置一次 &lt;code&gt;npm&lt;/code&gt; 和 &lt;code&gt;yarn&lt;/code&gt; 同时生效，设置完之后可以通过 &lt;code&gt;npm config list&lt;/code&gt; 和 &lt;code&gt;yarn config list&lt;/code&gt; 查看。&lt;/li&gt;&lt;li&gt;&lt;code&gt;git&lt;/code&gt;：基本配置查看 &lt;a href=&quot;https://jintang.github.io/2016/06/24/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/&quot;&gt;这儿&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dokcer&lt;/code&gt; ： 同样设置镜像&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;linux&lt;/code&gt; 中在 &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; 中写入如下内容（如果文件不存在请新建该文件）&lt;/p&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;registry-mirrors&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;https://registry.docker-cn.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之后重新启动服务。&lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo systemctl daemon-reload&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo systemctl restart docke&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Windows10&lt;/code&gt; 在系统右下角托盘 &lt;code&gt;Docker&lt;/code&gt; 图标内右键菜单选择 &lt;code&gt;Settings&lt;/code&gt; ，打开配置窗口后左侧导航菜单选择 &lt;code&gt;Daemon&lt;/code&gt; 。在 &lt;code&gt;Registry mirrors&lt;/code&gt; 一栏中填写加速器地址 &lt;code&gt;https://registry.docker-cn.com&lt;/code&gt; ，之后点击 &lt;code&gt;Apply&lt;/code&gt; 保存后 &lt;code&gt;Docker&lt;/code&gt; 就会重启并应用配置的镜像地址了&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;vue&lt;/code&gt; :&lt;ul&gt;&lt;li&gt;安装：&lt;code&gt;npm install -g @vue/cli&lt;/code&gt; ， &lt;code&gt;vue-cli&lt;/code&gt; 到 3 了，加了可视化配置，更新的好快&lt;/li&gt;&lt;li&gt;初始化项目模板： &lt;code&gt;vue create 项目名&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;react-native&lt;/code&gt; :&lt;ul&gt;&lt;li&gt;安装： &lt;code&gt;npm install -g react-native-cli&lt;/code&gt;&lt;/li&gt;&lt;li&gt;初始化项目模板： &lt;code&gt;react-native init AwesomeProject&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;android&lt;/code&gt;： 既然要用 &lt;code&gt;react-native&lt;/code&gt;， 肯定要配置 &lt;code&gt;android&lt;/code&gt; 与 &lt;code&gt;ios&lt;/code&gt; 的环境，可惜我没 &lt;code&gt;mac&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;jdk1.8&lt;/code&gt;： &lt;code&gt;Android Studio&lt;/code&gt; 必须。 需手动配置环境变量 &lt;code&gt;JAVA_HOME&lt;/code&gt; 与 &lt;code&gt;Path&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Android Studio&lt;/code&gt; 、 &lt;code&gt;SDK&lt;/code&gt; 、 &lt;code&gt;ANDROID_HOME&lt;/code&gt;: 可以帮助我们编译 &lt;code&gt;Android&lt;/code&gt; 原生相关，用里面的 &lt;code&gt;SDK Manager&lt;/code&gt;安装相关 &lt;code&gt;sdk&lt;/code&gt;，配置环境变量 &lt;code&gt;ANDROID_HOME&lt;/code&gt;&lt;/li&gt;&lt;li&gt;手机模拟器： &lt;code&gt;windows&lt;/code&gt; 下如果你装了 &lt;code&gt;docker&lt;/code&gt; 就不能用 &lt;code&gt;genymotion&lt;/code&gt; 了，原因看后面。 选择 &lt;code&gt;Visual Studio Emulator for Android&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自动化工具： 这只是个工具，不应该将很多精力放在这上面&lt;ul&gt;&lt;li&gt;&lt;code&gt;grunt&lt;/code&gt;: 已经很少用了，需全局安装： &lt;code&gt;npm install -g grunt-cli&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;gulp&lt;/code&gt;: 有些还在用，也需全局安装： &lt;code&gt;npm install gulp-cli -g&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt;: 很流行。 可以全局安装，也可以只在项目中安装&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;常用 &lt;code&gt;IDE&lt;/code&gt; 的设置存到云盘：我常用的 &lt;code&gt;vscode&lt;/code&gt; 、 &lt;code&gt;webstorm&lt;/code&gt; （jetbrain 家 IDE 的配置可以通用）
    
    </summary>
    
      <category term="闲语" scheme="http://jintang.github.io/categories/%E9%97%B2%E8%AF%AD/"/>
    
    
      <category term="闲语" scheme="http://jintang.github.io/tags/%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>面试遇到的</title>
    <link href="http://jintang.github.io/2018/05/29/%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84/"/>
    <id>http://jintang.github.io/2018/05/29/面试遇到的/</id>
    <published>2018-05-29T12:34:58.000Z</published>
    <updated>2018-09-17T07:33:23.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一有离意便按耐不住自己，面试了一周半便确定了自己即将去的地方，不知道是不是太快了点…前后林林总总面了10家过一点，有5家给了我offer，有些问题没回答上来但还是通过了，还有些就没通过，再次根据回忆主要记录下, 问的太多了，所以下面的问题都是印象比较深刻的，印象深刻嘛，要嘛是不会的，要嘛是问了次数比较多的。对了，我是一个前端，主要的问题也都是针对前端，因为一直在做 <code>vue</code> 项目，所以很多问题也都跟 <code>vue</code> 相关</p></blockquote><blockquote><p>一位腾讯大佬有这样的面试技巧（或者说招聘技巧）：看候选人 <code>github</code> 有个技巧，看他 <strong>activity</strong> 里 <strong>issue</strong> 区讨论、给知名开源项目的 <strong>PR、merged PR</strong> 数量和质量</p></blockquote><h3 id="被问到两次以上的"><a href="#被问到两次以上的" class="headerlink" title="被问到两次以上的"></a>被问到两次以上的</h3><h4 id="前端优化方案"><a href="#前端优化方案" class="headerlink" title="前端优化方案"></a>前端优化方案</h4><p>涉及太多请自行谷歌</p><h4 id="webpack相关"><a href="#webpack相关" class="headerlink" title="webpack相关"></a>webpack相关</h4><p>当你讲述你的项目经验的时候，当面试官听到你在用 <code>vue</code> 全家桶的时候，所有相关的问题都会问题， 其他的我都能说个123来，但 <code>webpack</code> 却没咋用，项目中都是别人构建的…也为后面的 <code>thoughtwork</code> 一道开放性作品题失败埋下了伏笔。面试官听到我不会也就没再问了，现在开始补 <code>webpack</code> 的知识</p><h4 id="es6相关"><a href="#es6相关" class="headerlink" title="es6相关"></a>es6相关</h4><p>你用了哪些 <code>es6</code> 的东西，都是啥，其中 <strong>箭头函数</strong> 与普通函数的区别最常被问</p><h4 id="原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程"><a href="#原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程" class="headerlink" title="原型链相关：如何实现原型链继承，原型与构造函数的关系，new 对象的时候发生的过程"></a>原型链相关：如何实现原型链继承，原型与构造函数的关系，<code>new</code> 对象的时候发生的过程</h4><p>下面这张图可以清晰明白的帮助我们理解，如果还想深入理解，参考 <a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">这儿</a><br><img src="http://7xphbb.com1.z0.glb.clouddn.com/prototype-series.png" alt="原型链"></p><a id="more"></a><h4 id="apply-与-call-的区别"><a href="#apply-与-call-的区别" class="headerlink" title="apply 与 call 的区别"></a>apply 与 call 的区别</h4><p>都是为了改变调用函数的上下文，唯一的区别就是传参格式的区别，<code>call</code> 接受多个参数， <code>apply</code> 接受数组参数，如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun().call(thisObj, arg1, arg2 ...)</span><br><span class="line">fun().apply(thisObj, [arg1, arg2 ...])</span><br></pre></td></tr></table></figure><p></p><h4 id="vue-的生命周期"><a href="#vue-的生命周期" class="headerlink" title="vue 的生命周期"></a>vue 的生命周期</h4><p>请参照 <a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noopener">vue官网</a></p><h4 id="vue-父子、兄弟组件间传递消息"><a href="#vue-父子、兄弟组件间传递消息" class="headerlink" title="vue 父子、兄弟组件间传递消息"></a>vue 父子、兄弟组件间传递消息</h4><p>父子： <code>$emit</code>, <code>props</code><br>兄弟： <code>eventBus</code>, <code>vuex</code></p><h4 id="cookie、localStorage、sessionStorage的区别"><a href="#cookie、localStorage、sessionStorage的区别" class="headerlink" title="cookie、localStorage、sessionStorage的区别"></a>cookie、localStorage、sessionStorage的区别</h4><p>可以参考我的这篇 <a href="http://jintang.github.io/2016/10/08/H5%E4%B8%ADlocalStorage%E4%B8%8EsessionStorage%E7%9A%84%E5%8C%BA%E5%88%AB/">文章</a></p><h4 id="登陆超时如何处理"><a href="#登陆超时如何处理" class="headerlink" title="登陆超时如何处理"></a>登陆超时如何处理</h4><p>客户端 <code>cookie</code> 存 <code>sessionId</code>，<code>ajax</code> 请求携带 <code>cookie</code>，后端判断对应 <code>sessionId</code> 对应的客户，后端存的 <code>session</code> 如果超时了就给接口返回超时的标志位，前端根据该标志跳转到登录页并清空 <code>cookie</code>。<br>其他的方法还有使用 <code>token</code> ,具体可以参照 <a href="http://www.cnblogs.com/xiekeli/p/5607107.html" target="_blank" rel="noopener">这儿</a></p><h4 id="如何适配不同大小的显示屏"><a href="#如何适配不同大小的显示屏" class="headerlink" title="如何适配不同大小的显示屏"></a>如何适配不同大小的显示屏</h4><p>我回答了 响应式布局、 rem 、 flex，自己对这个并不深入</p><h3 id="只被问了一次的"><a href="#只被问了一次的" class="headerlink" title="只被问了一次的"></a>只被问了一次的</h3><h4 id="vuex-一般什么时候使用"><a href="#vuex-一般什么时候使用" class="headerlink" title="vuex 一般什么时候使用"></a>vuex 一般什么时候使用</h4><p>为了存储一些公用的数据，比如有一个功能需要好几步，你还可以返回上一步，这时候就要用了。</p><h4 id="项目中使用了-keep-alive，如何让返回列表页的时候重新刷新数据"><a href="#项目中使用了-keep-alive，如何让返回列表页的时候重新刷新数据" class="headerlink" title="项目中使用了 keep-alive，如何让返回列表页的时候重新刷新数据"></a>项目中使用了 keep-alive，如何让返回列表页的时候重新刷新数据</h4><p>我们的项目中并没有使用 <code>keep-alive</code> ，但我知道使用了之后组件的 <strong>生命周期方法</strong> 是不触发的，于是询问面试官（这个面试官非常和善） <code>route</code> 的钩子触发吗？<br>面试官给了肯定的答复后作了下面的回答：</p><blockquote><p>可以利用 <code>route</code> 的导航钩子： <code>beforeRouteEnter</code>，在这里处理刷新事项</p></blockquote><p>面试官点了点头。后面经过查证，这个钩子确实是触发的，同时还有我从没注意到的 <strong>生命周期方法</strong> 也会被触发: <code>activated</code> 与 <code>deactivated</code>，这是 <code>vue</code> 专门为了 <code>keep-alive</code> 创建的钩子</p><h4 id="跨域如何处理"><a href="#跨域如何处理" class="headerlink" title="跨域如何处理"></a>跨域如何处理</h4><p>有 <code>jsonp</code>、<code>cors</code>、<code>nginx</code>反向代理等方法，项目上线肯定不能用 <code>nginx</code>反向代理，<code>jsonp</code>我还从没用过，我知道局限性很大， <code>cors</code> 设置的 <code>allow-origin:　*</code> 又不安全。而在 <code>vue</code> 项目的开发中，使用的是 <code>webpack</code> 的 <code>proxy</code></p><h4 id="什么是重绘和回流"><a href="#什么是重绘和回流" class="headerlink" title="什么是重绘和回流"></a>什么是重绘和回流</h4><p>请参考 <a href="http://www.css88.com/archives/4996" target="_blank" rel="noopener">这儿</a></p><h4 id="深拷贝一个function"><a href="#深拷贝一个function" class="headerlink" title="深拷贝一个function"></a>深拷贝一个function</h4><p>请参考 <a href="http://jintang.github.io/2017/05/17/vue%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/">这篇文章</a> 里关于 <code>深拷贝</code> 的描述</p><h4 id="浏览器渲染html的详细过程"><a href="#浏览器渲染html的详细过程" class="headerlink" title="浏览器渲染html的详细过程"></a>浏览器渲染html的详细过程</h4><p>回头翻答案，发现自己也了解过这个…但是被问到的时候，一点印象都没，只记得是先渲染 <code>dom</code> 树 ，再渲染具体的。具体的渲染过程请参照 <a href="https://juejin.im/entry/59e1d31f51882578c3411c77" target="_blank" rel="noopener">这儿</a></p><h4 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h4><p><strong>排序算法：</strong> 可能是我记性太差，我总感觉不常用的东西很容易忘。排序算法我也模拟实现了插值排序，其他算法也都看过好几遍，结果…写纸上，也没法验证，根据面试官的表情好像写错了。<br><strong>数组去重：</strong> 人家要求说出两种，第一种可以用 <code>[...new Set(arr)]</code>， 第二种自己实现…唉，问我的时候我比较慌，说了个双层遍历的方法，下面提供一个单层遍历的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr) &amp;&amp; arr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">            obj[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="require导入和import导入有啥区别"><a href="#require导入和import导入有啥区别" class="headerlink" title="require导入和import导入有啥区别"></a>require导入和import导入有啥区别</h4><p>刚开始接触 <code>es6</code> 的时候还看过这个，时间久了又忘记了…<br><code>CommonJS</code> 是 <code>node</code> 的规范，它是用 <code>require</code>。而 <code>es6</code> 是用 <code>import</code>,下面是他们的区别：</p><ul><li><code>CommonJS</code> 模块输出的是一个值的拷贝，<code>ES6</code> 模块输出的是值的引用。</li><li><code>CommonJS</code> 模块是运行时加载，<code>ES6</code> 模块是编译时输出接口。</li></ul><p>第二个差异是因为 <code>CommonJS</code> 加载的是一个对象（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 <code>ES6</code> 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。显然 编译期 早于 运行期。</p><p>更多了解请查看阮大神的 <a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><p><em>注意：</em> 你可以在同一个文件中同时使用 <code>require</code> 和 <code>export</code>. 但不能同时使用 <code>import</code> 和 <code>module.exports</code>. 不然会报错——<code>Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</code></p><h4 id="请列举下js的数据类型"><a href="#请列举下js的数据类型" class="headerlink" title="请列举下js的数据类型"></a>请列举下js的数据类型</h4><p>一共7种，<code>es6</code>中新增加了一个数据类型 <code>Symbol</code>。其中 <strong>引用类型</strong> 只有一种，就是 <code>Object</code>，<code>Array</code> 与 <code>Function</code> 都不算，具体请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types" target="_blank" rel="noopener">这儿</a></p><h4 id="移动端点击事件-200ms-延迟处理"><a href="#移动端点击事件-200ms-延迟处理" class="headerlink" title="移动端点击事件 200ms 延迟处理"></a>移动端点击事件 200ms 延迟处理</h4><p>我回答的是可以用 <code>tap</code> 代替 <code>click</code>，面试官又问为啥，我说 <code>angular</code> 还是 <code>ionic</code> 里有这么个方法，官方推荐使用这个…这明显不是面试官想要的答案<br>有个小同事给了这个 <code>css</code> 属性: <code>touch-action: manipulation;</code> 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要,具体可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">这儿</a></p><h4 id="移动端-1px-边框问题"><a href="#移动端-1px-边框问题" class="headerlink" title="移动端 1px 边框问题"></a>移动端 1px 边框问题</h4><p>同样是看过的东西，又忘了… 可以参考 <a href="https://segmentfault.com/a/1190000011466832" target="_blank" rel="noopener">这儿</a></p><h4 id="sql相关"><a href="#sql相关" class="headerlink" title="sql相关"></a>sql相关</h4><p>有面试官问了些简单的 <code>sql</code> ，因为我说我不熟，所以问的都很简单，而且我面的是前端岗…涉及太多请自行谷歌</p><h4 id="vuex原理"><a href="#vuex原理" class="headerlink" title="vuex原理"></a>vuex原理</h4><p>很抱歉我没了解这个，源码也没看过…请自行谷歌</p><h3 id="机试题和开放性题目"><a href="#机试题和开放性题目" class="headerlink" title="机试题和开放性题目"></a>机试题和开放性题目</h3><p>我们常碰到的是笔试然后面试，偶尔也会碰到机试题，我这次就碰到了。还碰到了两家比较牛的公司，是让我先做开放性的题目，然后将东西发给人家，人家审核通过了再给你发面试邀请。</p><ul><li>机试的公司要求是用框架搭建一个小页面，挺简单的。</li><li>一家公司的题库里我选做的是 <strong>杨辉三角</strong>， 虽然结果正确，但人家邮件回复说没通过，不知道为什么，问原因也没回我。</li><li>另一家就是 <code>thoughtwork</code> ，大概的题目是要 自己搭建脚手架工具，我选择了 <code>webpack</code>，再用原生 <code>js</code> 实现一个小的管理系统，不涉及数据库，附带的功能有 响应式布局、单元测试… 很繁杂，虽然花了很久，但没做出来…这就是经常用框架的坏处吧，发现自己短板还挺多的…得补充下了</li></ul><h3 id="非技术性问题"><a href="#非技术性问题" class="headerlink" title="非技术性问题"></a>非技术性问题</h3><h4 id="为什么离职"><a href="#为什么离职" class="headerlink" title="为什么离职"></a>为什么离职</h4><p>我说的是为了多见识多学习，^_^</p><h4 id="最近解决的最难的问题是什么"><a href="#最近解决的最难的问题是什么" class="headerlink" title="最近解决的最难的问题是什么"></a>最近解决的最难的问题是什么</h4><p>…因人而异</p><h4 id="你做的哪件事表现出你有出色的学习能力"><a href="#你做的哪件事表现出你有出色的学习能力" class="headerlink" title="你做的哪件事表现出你有出色的学习能力"></a>你做的哪件事表现出你有出色的学习能力</h4><p>…同上</p><h4 id="以后的发展规划"><a href="#以后的发展规划" class="headerlink" title="以后的发展规划"></a>以后的发展规划</h4><p>这个我也比较迷茫，我觉得前端有些浅，希望能接触到其他的技术。再就是走一步看一步了</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>还有很多问题都忘记了，想到了会再加上去。想要抱怨的是一些大公司审核太慢了…等你们的时间我已经找到了。上面的题有些是不是很难，哈哈，其中难得题目大多数都是由3个人问出来的： 一个架构师、 一个大公司的大佬、一家使用 <code>jquery</code>的技术leader（他们还没有拥抱 <code>es6</code> ，所以对 <code>es5</code> 里的一些比较麻烦的问题问的比较多），一般的问题都是比较简单的。和行业内的大佬交流挺有意思的，大多数面试官都感觉人很好。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;一有离意便按耐不住自己，面试了一周半便确定了自己即将去的地方，不知道是不是太快了点…前后林林总总面了10家过一点，有5家给了我offer，有些问题没回答上来但还是通过了，还有些就没通过，再次根据回忆主要记录下, 问的太多了，所以下面的问题都是印象比较深刻的，印象深刻嘛，要嘛是不会的，要嘛是问了次数比较多的。对了，我是一个前端，主要的问题也都是针对前端，因为一直在做 &lt;code&gt;vue&lt;/code&gt; 项目，所以很多问题也都跟 &lt;code&gt;vue&lt;/code&gt; 相关&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;一位腾讯大佬有这样的面试技巧（或者说招聘技巧）：看候选人 &lt;code&gt;github&lt;/code&gt; 有个技巧，看他 &lt;strong&gt;activity&lt;/strong&gt; 里 &lt;strong&gt;issue&lt;/strong&gt; 区讨论、给知名开源项目的 &lt;strong&gt;PR、merged PR&lt;/strong&gt; 数量和质量&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;被问到两次以上的&quot;&gt;&lt;a href=&quot;#被问到两次以上的&quot; class=&quot;headerlink&quot; title=&quot;被问到两次以上的&quot;&gt;&lt;/a&gt;被问到两次以上的&lt;/h3&gt;&lt;h4 id=&quot;前端优化方案&quot;&gt;&lt;a href=&quot;#前端优化方案&quot; class=&quot;headerlink&quot; title=&quot;前端优化方案&quot;&gt;&lt;/a&gt;前端优化方案&lt;/h4&gt;&lt;p&gt;涉及太多请自行谷歌&lt;/p&gt;&lt;h4 id=&quot;webpack相关&quot;&gt;&lt;a href=&quot;#webpack相关&quot; class=&quot;headerlink&quot; title=&quot;webpack相关&quot;&gt;&lt;/a&gt;webpack相关&lt;/h4&gt;&lt;p&gt;当你讲述你的项目经验的时候，当面试官听到你在用 &lt;code&gt;vue&lt;/code&gt; 全家桶的时候，所有相关的问题都会问题， 其他的我都能说个123来，但 &lt;code&gt;webpack&lt;/code&gt; 却没咋用，项目中都是别人构建的…也为后面的 &lt;code&gt;thoughtwork&lt;/code&gt; 一道开放性作品题失败埋下了伏笔。面试官听到我不会也就没再问了，现在开始补 &lt;code&gt;webpack&lt;/code&gt; 的知识&lt;/p&gt;&lt;h4 id=&quot;es6相关&quot;&gt;&lt;a href=&quot;#es6相关&quot; class=&quot;headerlink&quot; title=&quot;es6相关&quot;&gt;&lt;/a&gt;es6相关&lt;/h4&gt;&lt;p&gt;你用了哪些 &lt;code&gt;es6&lt;/code&gt; 的东西，都是啥，其中 &lt;strong&gt;箭头函数&lt;/strong&gt; 与普通函数的区别最常被问&lt;/p&gt;&lt;h4 id=&quot;原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程&quot;&gt;&lt;a href=&quot;#原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程&quot; class=&quot;headerlink&quot; title=&quot;原型链相关：如何实现原型链继承，原型与构造函数的关系，new 对象的时候发生的过程&quot;&gt;&lt;/a&gt;原型链相关：如何实现原型链继承，原型与构造函数的关系，&lt;code&gt;new&lt;/code&gt; 对象的时候发生的过程&lt;/h4&gt;&lt;p&gt;下面这张图可以清晰明白的帮助我们理解，如果还想深入理解，参考 &lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://7xphbb.com1.z0.glb.clouddn.com/prototype-series.png&quot; alt=&quot;原型链&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jintang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试" scheme="http://jintang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vue我们应该知道的</title>
    <link href="http://jintang.github.io/2018/05/11/vue%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/"/>
    <id>http://jintang.github.io/2018/05/11/vue我们应该知道的/</id>
    <published>2018-05-11T01:42:20.000Z</published>
    <updated>2018-08-12T07:26:35.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="route开启h5模式"><a href="#route开启h5模式" class="headerlink" title="route开启h5模式"></a>route开启h5模式</h3><p>路由里面加一个 <code>mode: &#39;history&#39;</code><br><strong>作用:</strong> 实现页面后退时，还原滚动位置</p><h3 id="vuex模块话"><a href="#vuex模块话" class="headerlink" title="vuex模块话"></a>vuex模块话</h3><p><em>默认：</em> 内部的 <code>action</code> 、 <code>mutation</code> 和 <code>getter</code> 是注册在全局命名空间的。不包括 <code>state</code></p><p>所以，当 <code>commit</code> 一个子模块的 <code>mutation</code> 时，若还有其他子模块有相同的 <code>mutation</code> 时,<br>这两者都会触发。<strong>bug:</strong> 再次发现中，下一步的扫描时间初始化不是0，而是先变成了上一步的扫描时间，然后才变成0。因为点击下一步的时候触发了上一步的同名 <code>mutation</code></p><p><strong>解决方案：</strong> 给子模块添加 <code>namespaced: true</code> 让子模块成为命名空间模块，这样可以封装单独作用域</p><p>此时要 <code>commit</code> 一个子模块的 <code>mutation</code> 时，就需要<code>this.$store.commit(&#39;子模块名/事件名&#39;)</code></p><p><strong>tip:</strong> 不论是不是命名空间模块， <code>state</code> 的获取都是这样的： <code>this.$store.state.子模块名.变量名</code><br>或者利用 <code>mapState</code> :<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapState(<span class="string">'子模块名'</span>, [</span><br><span class="line">    <span class="string">'变量名'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="引用类型的复制可以用-lodash"><a href="#引用类型的复制可以用-lodash" class="headerlink" title="引用类型的复制可以用 lodash"></a>引用类型的复制可以用 lodash</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.clone(obj)</span><br><span class="line">_.cloneDeep(obj)</span><br></pre></td></tr></table></figure><h3 id="unicode字符串-如-u0000-页面显示乱码"><a href="#unicode字符串-如-u0000-页面显示乱码" class="headerlink" title="unicode字符串(如\u0000)页面显示乱码"></a>unicode字符串(如\u0000)页面显示乱码</h3><p>使用 <code>v-html</code> 代替 <code>{{}}</code> 、<code>v-text</code> ,这样才可以显示不转义的字符串</p><h3 id="使用debounce节流函数"><a href="#使用debounce节流函数" class="headerlink" title="使用debounce节流函数"></a>使用debounce节流函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    checkChange: debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;, <span class="number">500</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-cli分析工具"><a href="#vue-cli分析工具" class="headerlink" title="vue-cli分析工具"></a>vue-cli分析工具</h3><p><code>npm run build --report</code></p><h3 id="vue的循环v-for如何一次循环2条项目？"><a href="#vue的循环v-for如何一次循环2条项目？" class="headerlink" title="vue的循环v-for如何一次循环2条项目？"></a>vue的循环v-for如何一次循环2条项目？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"i in (items.length / 2)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;items[(i - 1) * 2].name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;items[(i - 1) * 2 + 1].name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要处理奇数问题</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;route开启h5模式&quot;&gt;&lt;a href=&quot;#route开启h5模式&quot; class=&quot;headerlink&quot; title=&quot;route开启h5模式&quot;&gt;&lt;/a&gt;route开启h5模式&lt;/h3&gt;&lt;p&gt;路由里面加一个 &lt;code&gt;mode: &amp;#39;history&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;作用:&lt;/strong&gt; 实现页面后退时，还原滚动位置&lt;/p&gt;&lt;h3 id=&quot;vuex模块话&quot;&gt;&lt;a href=&quot;#vuex模块话&quot; class=&quot;headerlink&quot; title=&quot;vuex模块话&quot;&gt;&lt;/a&gt;vuex模块话&lt;/h3&gt;&lt;p&gt;&lt;em&gt;默认：&lt;/em&gt; 内部的 &lt;code&gt;action&lt;/code&gt; 、 &lt;code&gt;mutation&lt;/code&gt; 和 &lt;code&gt;getter&lt;/code&gt; 是注册在全局命名空间的。不包括 &lt;code&gt;state&lt;/code&gt;&lt;/p&gt;&lt;p&gt;所以，当 &lt;code&gt;commit&lt;/code&gt; 一个子模块的 &lt;code&gt;mutation&lt;/code&gt; 时，若还有其他子模块有相同的 &lt;code&gt;mutation&lt;/code&gt; 时,&lt;br&gt;这两者都会触发。&lt;strong&gt;bug:&lt;/strong&gt; 再次发现中，下一步的扫描时间初始化不是0，而是先变成了上一步的扫描时间，然后才变成0。因为点击下一步的时候触发了上一步的同名 &lt;code&gt;mutation&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt; 给子模块添加 &lt;code&gt;namespaced: true&lt;/code&gt; 让子模块成为命名空间模块，这样可以封装单独作用域&lt;/p&gt;&lt;p&gt;此时要 &lt;code&gt;commit&lt;/code&gt; 一个子模块的 &lt;code&gt;mutation&lt;/code&gt; 时，就需要&lt;code&gt;this.$store.commit(&amp;#39;子模块名/事件名&amp;#39;)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;tip:&lt;/strong&gt; 不论是不是命名空间模块， &lt;code&gt;state&lt;/code&gt; 的获取都是这样的： &lt;code&gt;this.$store.state.子模块名.变量名&lt;/code&gt;&lt;br&gt;或者利用 &lt;code&gt;mapState&lt;/code&gt; :&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...mapState(&lt;span class=&quot;string&quot;&gt;&#39;子模块名&#39;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;变量名&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://jintang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://jintang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react-native我们应该知道的</title>
    <link href="http://jintang.github.io/2018/05/11/react-native%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/"/>
    <id>http://jintang.github.io/2018/05/11/react-native我们应该知道的/</id>
    <published>2018-05-11T01:16:20.000Z</published>
    <updated>2018-09-13T08:52:19.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录下自己遇到的…</p></blockquote><h3 id="react-native-须知"><a href="#react-native-须知" class="headerlink" title="react-native 须知"></a>react-native 须知</h3><h4 id="React的每个组件里，必须import-React"><a href="#React的每个组件里，必须import-React" class="headerlink" title="React的每个组件里，必须import React"></a><code>React</code>的每个组件里，必须<code>import React</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><p>因为组件内部隐式的使用了<code>React</code>，比如<code>jsx</code>语法等</p><h4 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h4><p>分为函数式组件和 class 组件，我们一般使用 class 组件。</p><ul><li><p>函数式组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 接受的参数是 props */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong> 组件名称必须以大写字母开头。</p><h4 id="组件触发事件"><a href="#组件触发事件" class="headerlink" title="组件触发事件"></a>组件触发事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 方法1. 在Render中使用bind绑定，此时方法的定义用es5的这种语法</span></span><br><span class="line">        &lt;Text onPress=&#123;<span class="keyword">this</span>.handleClick1.bind(<span class="keyword">this</span>)&#125;&gt;点击&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 方法2. 定义类属性，使用es6的语法定义方法</span></span><br><span class="line"><span class="regexp">        &lt;Text onPress=&#123;this.handleClick2&#125;&gt;点击&lt;/</span>Text&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick1() &#123;</span><br><span class="line">    <span class="comment">// do something1</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something2...  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用方式2，简单明了，且没有副作用。详解请参看 <a href="https://react.docschina.org/docs/faq-functions.html" target="_blank" rel="noopener">官方文档</a><br><a id="more"></a></p><h4 id="遍历渲染组件："><a href="#遍历渲染组件：" class="headerlink" title="遍历渲染组件："></a>遍历渲染组件：</h4><p><code>jsx</code> 中只能写表达式，不能写多行语句,所以不能写 <code>if else</code> 、 <code>for</code> … 最佳循环写法是使用 <code>map</code> 函数<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    arr.map((item, index) =&gt; <span class="tag">&lt;<span class="name">View</span> <span class="attr">key</span>=<span class="string">&#123;item.id</span> || <span class="attr">index</span>&#125; /&gt;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  或----------------------------------  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    arr.map((index, index) =&gt; &#123;</span><br><span class="line">        return (<span class="tag">&lt;<span class="name">View</span> <span class="attr">key</span>=<span class="string">&#123;index.id</span> || <span class="attr">index</span>&#125; /&gt;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><em>注意：</em></p><ul><li><code>key</code> 必须在其兄弟节点中是唯一的，而非全局唯一</li><li>并不建议使用元素在数组中的索引作为 <code>key</code> 。若数组没有重排，该方法效果不错，但若重排了（比如数组内重新排序、数组头部插入新元素），那样，内容相同的元素他们的 <code>key</code> 并不相同， <code>React</code> 就会都重新渲染，而且相同 <code>key</code> 元素也有可能以意想不到的方式混淆和更新。详情参考 <a href="https://react.docschina.org/docs/reconciliation.html" target="_blank" rel="noopener">这儿</a></li></ul><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref :"></a><a href="https://react.docschina.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">Ref</a> :</h4><p>分为 String 类型 和 回调函数类型，推荐使用回调函数类型，<code>React</code> 官方称 String 类型已过时并在未来版本可能被删除。还有一种是传递 <code>createRef()</code> 创建的 <code>ref</code> 属性 ，个人感觉不太方便，具体请看标题的超链接。</p><ul><li>当 <code>ref</code> 属性被用于一个普通的 <code>HTML</code> 元素时，回调函数将接收底层 <code>DOM</code> 元素作为它的参数</li><li>当 <code>ref</code> 属性被用于一个自定义类组件时，回调函数将接收 该组件已挂载的实例 作为它的参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoFocusTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.textInput.focusTextInput();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;CustomTextInput</span><br><span class="line">            <span class="comment">// input是CustomTextInput的实例</span></span><br><span class="line">            ref=&#123;(input) =&gt; &#123; <span class="keyword">this</span>.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>注意:</em> <code>ref</code> 只能用于 class 组件 ，不能用于 函数式组件， 因为函数式组件没有实例。</p><h4 id="PureComponent-与-shouldComponentUpdate-nextProps-nextState"><a href="#PureComponent-与-shouldComponentUpdate-nextProps-nextState" class="headerlink" title="PureComponent 与 shouldComponentUpdate(nextProps, nextState)"></a>PureComponent 与 shouldComponentUpdate(nextProps, nextState)</h4><p><code>shouldComponentUpdate(nextProps, nextState)</code>：</p><ul><li>不在初始化渲染或当使用 <code>forceUpdate()</code> 时被调用。当接收到新属性或状态时，<code>shouldComponentUpdate()</code> 在 <code>render()</code> 前被调用。</li><li>默认返回 <code>true</code> ，表示重新渲染。若我们想要在 <code>props</code>、 <code>state</code> 中的某些值变化时不重新渲染，通过与 <code>nextProps</code> 、 <code>nextState</code> 比较实现逻辑，在你想要的地方返回 <code>false</code></li></ul><p><code>PureComponent</code> ：<br>在某些场景下你可以使用 <code>React.PureComponent</code> 来提升性能。与 <code>React.Component</code> 几乎完全相同，但 <code>React.PureComponent</code> 通过 <code>prop</code> 和 <code>state</code> 的浅对比来实现 <code>shouldComponentUpate()</code></p><p>更多查看 <a href="https://react.docschina.org/docs/react-api.html" target="_blank" rel="noopener">这儿</a></p><h3 id="react-native-调试"><a href="#react-native-调试" class="headerlink" title="react-native 调试"></a>react-native 调试</h3><p>在调试网页的时候我们使用<code>Chrome Devtool</code> ，它上面有些面板非常好用，我最常用的有： <code>Source</code>、<code>Console</code> 、<code>Elements</code>、<code>NetWork</code>，现在我们调试 <code>React Native</code> 的 app 。我们分别使用以下工具来操作上面各项的调试：</p><ul><li><code>Source</code>、<code>Console</code> : 模拟器上打开 <code>Debug JS Remotely</code>， 就会在 <a href="http://localhost:8081/debugger-ui" target="_blank" rel="noopener">http://localhost:8081/debugger-ui</a> 上打开调试页面，将这个页面在 <code>Chrome</code> 中打开，然后就可以跟调试网页一样，可惜只能调试这两个面板，无法监控 <code>Network</code></li><li><code>Elements</code>； 安装 <code>react-devtools</code>， 并在模拟器上打开 <code>Toggle Inspector</code> 配合使用。具体参考 <a href="https://reactnative.cn/docs/debugging/" target="_blank" rel="noopener">官方文档</a></li><li><p><code>NetWork</code>: 前面说到 <code>Debug JS Remotely</code> 没法监控 <code>Network</code> , 这个问题官方还没解决，可以查看这个 <a href="https://github.com/facebook/react-native/issues/934" target="_blank" rel="noopener">issue</a>。当然聪明人很多，有大佬开发了 <a href="https://github.com/infinitered/reactotron" target="_blank" rel="noopener">reactotron</a> ,使用的话：</p><ul><li>需要安装这个软件、项目中安装依赖 <code>yarn add reactotron-react-native -D</code></li><li><p>添加配置文件<code>ReactotronConfig.js</code> 并引入到入门文件——<code>index.js</code>/<code>App.js</code> 首行即可</p><p>具体的请参考 <a href="https://github.com/infinitered/reactotron/blob/master/docs/quick-start-react-native.md" target="_blank" rel="noopener">官方链接</a> 或 <a href="https://juejin.im/post/5a61641751882573443cc202" target="_blank" rel="noopener">掘金的这篇文章</a>。<br><em>注意：</em> 如果要监听 <code>Android</code> 模拟器的请求，需要运行 <code>adb reverse tcp:9090 tcp:9090</code> （<strong>9090</strong>是 <code>Reactotron</code> 的默认端口） , 并且在 <code>ReactotronConfig.js</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reactotron.configure(&#123; <span class="attr">host</span>: <span class="string">'宿主机ip'</span> &#125;).connect()</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://github.com/infinitered/reactotron/issues/174" target="_blank" rel="noopener">此issue</a></p></li></ul></li></ul><h4 id="开启自动刷新：真机或者模拟器中Enable-Live-Reload-和Enable-Hot-Reloading同时打开，下面的情况需要重新编译"><a href="#开启自动刷新：真机或者模拟器中Enable-Live-Reload-和Enable-Hot-Reloading同时打开，下面的情况需要重新编译" class="headerlink" title="开启自动刷新：真机或者模拟器中Enable Live Reload 和Enable Hot Reloading同时打开，下面的情况需要重新编译:"></a>开启自动刷新：真机或者模拟器中<code>Enable Live Reload</code> 和<code>Enable Hot Reloading</code>同时打开，下面的情况需要重新编译:</h4><ul><li>增加了新的资源(比如给 <code>iOS</code> 的Images.xcassets或是 <code>Andorid</code> 的res/drawable文件夹添加了图片)</li><li>更改了任何的原生代码（objective-c/swift/java）</li></ul><h4 id="同时启动两个项目-需要同时启动两个packger与模拟器"><a href="#同时启动两个项目-需要同时启动两个packger与模拟器" class="headerlink" title="同时启动两个项目:需要同时启动两个packger与模拟器"></a>同时启动两个项目:需要同时启动两个packger与模拟器</h4><ol><li><p>同时启动两个<code>packger</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start --port 端口号</span><br></pre></td></tr></table></figure></li><li><p>启动两个模拟器之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android --deviceId [device_id]</span><br><span class="line"><span class="meta">#</span><span class="bash"> device_id可以通过下面的命令进行查看：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> adb devices</span></span><br></pre></td></tr></table></figure></li></ol><p><em>tip: 其他常用 <code>adb</code> 命令</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入模拟器shell命令</span></span><br><span class="line"><span class="built_in">cd</span> ...sdk/platform-tools/</span><br><span class="line">adb -s 设备名称 shell </span><br><span class="line"><span class="comment"># 获取模拟器配置(进入模拟器shell之后)</span></span><br><span class="line">getprop</span><br></pre></td></tr></table></figure><p></p><ol start="3"><li>如果是两个模拟器，和电脑在同一个wifi下，那分别在 <strong>dev-setting</strong> =&gt; <strong>Debug server host &amp; port for device</strong> 下添加：<strong>电脑ip:port</strong> 。设置之后按两次R重新加载 <code>bundle</code> 即可。<br><strong>注意：两个模拟器都必须指定端口,即使一个<code>packger</code>是默认端口。</strong><br><strong>疑问： 同时启动 ios 和 android 模拟器经常有一个会没反应，原因未知</strong></li></ol><h3 id="react-native-打包"><a href="#react-native-打包" class="headerlink" title="react-native 打包"></a>react-native 打包</h3><p><a href="https://reactnative.cn/docs/signed-apk-android/" target="_blank" rel="noopener">官方文档</a>介绍的很详细，下面只是些临时用作测试的打包</p><h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><p>不使用签名的简单打包：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> android</span><br><span class="line">./gradlew assembleRelease</span><br></pre></td></tr></table></figure><p></p><h3 id="react-native-常见错误"><a href="#react-native-常见错误" class="headerlink" title="react-native 常见错误"></a>react-native 常见错误</h3><h4 id="Native-module-模块名-tried-to-override-模块名-for-module-name-xxx-If-this-was-your-intention-set-canOverrideExistingModule-true"><a href="#Native-module-模块名-tried-to-override-模块名-for-module-name-xxx-If-this-was-your-intention-set-canOverrideExistingModule-true" class="headerlink" title="Native module 模块名 tried to override 模块名 for module name xxx. If this was your intention, set canOverrideExistingModule=true"></a>Native module 模块名 tried to override 模块名 for module name xxx. If this was your intention, set canOverrideExistingModule=true</h4><p><strong>原因：</strong> 通常重复执行 <code>react-link</code> 引起的，会在 <code>MainApplication.java</code> 、 <code>build.gradle</code> 、 <code>settings.gradle</code> 里重复导入包。这是 facebook 的官方bug，详情可以看 <a href="https://stackoverflow.com/questions/43032841/react-native-link-causes-duplicate-imports-in-android-settings-gradle" target="_blank" rel="noopener">stackoverflow</a></p><p><strong>解决方法:</strong> 检查 <code>MainApplication.java</code>，删除重复出现的包 。一般是在两个地方重复，一是 <code>import</code> ，二是 <code>protected List&lt;ReactPackage&gt; getPackages()</code> 里面。 <code>build.gradle</code> 、 <code>settings.gradle</code> 里虽然也重复了，但不会报错，项目也可以正常跑起来。</p><p><strong>注意：</strong> 有些包虽然你执行了 <code>react-native link</code>， 但并不会正确引入到原生代码里。比如说：<a href="https://github.com/yonahforst/react-native-permissions" target="_blank" rel="noopener">react-native-permissions</a>，需要单独执行 <code>react-native link react-native-permissions</code> 。具体情况还是多看看人家的 <code>README</code></p><h4 id="react-native-scrollable-tab-view-有时候不显示内容，升级到-0-7-4即可"><a href="#react-native-scrollable-tab-view-有时候不显示内容，升级到-0-7-4即可" class="headerlink" title="react-native-scrollable-tab-view 有时候不显示内容，升级到^0.7.4即可"></a>react-native-scrollable-tab-view 有时候不显示内容，升级到^0.7.4即可</h4><h4 id="genymotion-模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。"><a href="#genymotion-模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。" class="headerlink" title="genymotion 模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。"></a>genymotion 模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。</h4><h4 id="android打包错误"><a href="#android打包错误" class="headerlink" title="android打包错误"></a>android打包错误</h4><p>本来好好地项目打包出错，比如这样的错误:<code>:app:packageDebug</code>,或者说什么解压不了文件什么的，可以尝试用下面的语句：<br></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">cd</span> <span class="keyword">android</span></span><br><span class="line"><span class="keyword">gradlew </span>clean</span><br></pre></td></tr></table></figure><p></p><p>清理缓存后重新打包</p><h4 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h4><ol><li><p>官方对 <code>android</code> 出了 <a href="https://reactnative.cn/docs/permissionsandroid/" target="_blank" rel="noopener">PermissionsAndroid</a> API，刚开始检测 相机权限 ，无论我在 app 中给没给相机权限，这个 API 给我返回的结果都是有权限。</p><p><strong>原因：</strong> <code>Android 6.0</code> 之前的版本只要是在 <code>AndroidManifest.xml</code> 申明的权限这个 API 都会返回有权限。</p><p><strong>解决方法：</strong> 需要修改 <code>build.gradle</code> 里的 <code>targetSdkVersion</code> 为 23 才可以。<em>注意： 需要卸载原来的 app 重新装。</em></p></li><li><p><code>Ios</code> 的权限判断使用 <a href="https://github.com/yonahforst/react-native-permissions" target="_blank" rel="noopener">react-native-permissions</a> , 其实 <code>android</code> 也可以使用这个，很方便。下面有个 demo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_requestCameraIosPermission = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> permitStr = <span class="string">'camera'</span>;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> Permissions.check(permitStr);</span><br><span class="line">    <span class="keyword">if</span> (response === <span class="string">'undetermined'</span>) &#123; <span class="comment">/* 之前没有弹出来过权限申请 */</span></span><br><span class="line">        <span class="keyword">let</span> requestResult = <span class="keyword">await</span> Permissions.request(permitStr);</span><br><span class="line">        <span class="keyword">return</span> requestResult === <span class="string">'authorized'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response !== <span class="string">'authorized'</span>) &#123;</span><br><span class="line">        Alert.alert(</span><br><span class="line">            <span class="string">'权限提醒'</span>,</span><br><span class="line">            <span class="string">'请到设置中开启INKubator Pay的相机权限'</span>,</span><br><span class="line">            [</span><br><span class="line">                &#123; <span class="attr">text</span>: <span class="string">'Ok'</span>, <span class="attr">onPress</span>: Permissions.openSettings &#125;, <span class="comment">/* 跳转到IOS系统的权限设置 */</span></span><br><span class="line">                &#123; <span class="attr">text</span>: <span class="string">'Cancel'</span>, <span class="attr">style</span>: <span class="string">'cancel'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="react-native-杂谈"><a href="#react-native-杂谈" class="headerlink" title="react-native 杂谈"></a>react-native 杂谈</h3><h4 id="Android-api与版本号对应关系"><a href="#Android-api与版本号对应关系" class="headerlink" title="Android api与版本号对应关系"></a><code>Android</code> api与版本号对应关系</h4><p><code>react native</code> 要求我们安装的 <code>sdk</code> 都是 api 23 的对应版本，这个对应的版本号是 <code>Andrid 6.0</code> ，其他的对应关系请参考 <a href="https://source.android.com/source/build-numbers" target="_blank" rel="noopener">这儿</a></p><h4 id="require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程"><a href="#require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程" class="headerlink" title="require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程:"></a><code>require</code>只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程:</h4><p><img src="http://7xphbb.com1.z0.glb.clouddn.com/react-native-run.png" alt="react-native-run"><br><code>React Native</code>从0.5.0版本开始已经内置<code>Babel</code>转换器</p><h4 id="Android-Studios-用到的快捷键"><a href="#Android-Studios-用到的快捷键" class="headerlink" title="Android Studios 用到的快捷键"></a>Android Studios 用到的快捷键</h4><p>很少写原声代码，但是有两个快捷键还是需要知道一下，以免不必要的重启<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;记录下自己遇到的…&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;react-native-须知&quot;&gt;&lt;a href=&quot;#react-native-须知&quot; class=&quot;headerlink&quot; title=&quot;react-native 须知&quot;&gt;&lt;/a&gt;react-native 须知&lt;/h3&gt;&lt;h4 id=&quot;React的每个组件里，必须import-React&quot;&gt;&lt;a href=&quot;#React的每个组件里，必须import-React&quot; class=&quot;headerlink&quot; title=&quot;React的每个组件里，必须import React&quot;&gt;&lt;/a&gt;&lt;code&gt;React&lt;/code&gt;的每个组件里，必须&lt;code&gt;import React&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为组件内部隐式的使用了&lt;code&gt;React&lt;/code&gt;，比如&lt;code&gt;jsx&lt;/code&gt;语法等&lt;/p&gt;&lt;h4 id=&quot;自定义组件&quot;&gt;&lt;a href=&quot;#自定义组件&quot; class=&quot;headerlink&quot; title=&quot;自定义组件&quot;&gt;&lt;/a&gt;自定义组件&lt;/h4&gt;&lt;p&gt;分为函数式组件和 class 组件，我们一般使用 class 组件。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;函数式组件：&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 接受的参数是 props */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Welcome&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, &amp;#123;props.name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;class 组件：&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, &amp;#123;this.props.name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 组件名称必须以大写字母开头。&lt;/p&gt;&lt;h4 id=&quot;组件触发事件&quot;&gt;&lt;a href=&quot;#组件触发事件&quot; class=&quot;headerlink&quot; title=&quot;组件触发事件&quot;&gt;&lt;/a&gt;组件触发事件&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Toggle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 方法1. 在Render中使用bind绑定，此时方法的定义用es5的这种语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Text onPress=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleClick1.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&amp;#125;&amp;gt;点击&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Text&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        /&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/ 方法2. 定义类属性，使用es6的语法定义方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;lt;Text onPress=&amp;#123;this.handleClick2&amp;#125;&amp;gt;点击&amp;lt;/&lt;/span&gt;Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something2...  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;推荐使用方式2，简单明了，且没有副作用。详解请参看 &lt;a href=&quot;https://react.docschina.org/docs/faq-functions.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="react-native" scheme="http://jintang.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://jintang.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>nginx开启https</title>
    <link href="http://jintang.github.io/2018/04/27/nginx%E5%BC%80%E5%90%AFhttps/"/>
    <id>http://jintang.github.io/2018/04/27/nginx开启https/</id>
    <published>2018-04-27T06:22:42.000Z</published>
    <updated>2018-08-12T07:26:35.252Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间微信小程序很火，得闲时来写写小程序。本来想用豆瓣的 api ，但已经有人写了，好吧…那我就自己写个简单的 api 用用。程序已经写好了，但小程序要求后台必须是 <code>https</code>,好吧，那就给谷歌云搞个 <code>https</code>, 下面讲讲过程。万万没想到， 最后的结局是悲伤的，这个 api 最后还是用不成，因为小程序要求的接口域名必须是要经过备案的，而谷歌云无法备案，苦涩的哈哈哈… 。仅以此纪念学习这个的过程。</p><h3 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h3><p>首先在本地先试验下，用 <code>openssl</code> 生成了自签名证书，参考 <a href="http://www.xymiao.com/archives/769" target="_blank" rel="noopener">这儿</a>, 再修改下 <code>nginx.conf</code> 的配置，就可以访问 <a href="https://localhost" target="_blank" rel="noopener">https://localhost</a> 了，但放在谷歌云上却无法正确运行，不知道为什么…</p><p>那么，我们去买一个 <code>https</code> 证书来配置，==…发现有免费的，那自然用免费的，申请下载请参考 <a href="http://www.zslin.com/web/article/detail/72" target="_blank" rel="noopener">这儿</a>，文章中阿里云的免费证书已经不可以申请了，所以我申请了腾讯云的免费证书，不枉我玩了那么多腾讯游戏…手动笑哭</p><h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><p>免费的证书有 1 年的使用时间，下载下来的证书长这样：<img src="http://7xphbb.com1.z0.glb.clouddn.com/ca-dir.png" alt="https腾讯云证书"><br><a id="more"></a><br>在 <code>/etc/nginx</code> 下创建个 <code>ssl</code> 文件夹，此路径下的文件如图：<img src="http://7xphbb.com1.z0.glb.clouddn.com/nginx-dir.png" alt="nginx目录"><br>将下载下来 <code>nginx</code> 下的证书上传到 <code>ssl</code> 文件夹下。然后修改 <code>nginx.conf</code> 文件，只需要添加一个 <code>server</code> 配置，其他的都不变：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="comment"># http 的 server 配置，不变</span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="comment"># https 的 server 配置 </span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">443</span> <span class="string">ssl</span> <span class="string">http2</span> <span class="string">default_server;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="string">[::]:443</span> <span class="string">ssl</span> <span class="string">http2</span> <span class="string">default_server;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">_;</span></span><br><span class="line">        <span class="string">root</span>         <span class="string">/usr/share/nginx/html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加的证书信息, 主要修改下证书的路径</span></span><br><span class="line">        <span class="string">ssl_certificate</span> <span class="string">"/etc/nginx/ssl/1_cloud-tv.top_bundle.crt"</span><span class="string">;</span></span><br><span class="line">        <span class="string">ssl_certificate_key</span> <span class="string">"/etc/nginx/ssl/2_cloud-tv.top.key"</span><span class="string">;</span></span><br><span class="line">        <span class="string">ssl_session_cache</span> <span class="attr">shared:SSL:1m;</span></span><br><span class="line">        <span class="string">ssl_session_timeout</span>  <span class="number">10</span><span class="string">m;</span></span><br><span class="line">        <span class="string">ssl_ciphers</span> <span class="attr">HIGH:!aNULL:!MD5;</span></span><br><span class="line">        <span class="string">ssl_prefer_server_ciphers</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="string">include</span> <span class="string">/etc/nginx/default.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">proxy_pass</span> <span class="attr">http://localhost:3000;</span></span><br><span class="line">            <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$host;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">error_page</span> <span class="number">404</span> <span class="string">/404.html;</span></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/40x.html</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="string">/50x.html;</span></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>最后重启 <code>nginx</code> 服务就可以访问了。我是这样重启的<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop nginx</span><br><span class="line">$ systemctl start nginx</span><br></pre></td></tr></table></figure><p></p><p>感觉自己好傻逼…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间微信小程序很火，得闲时来写写小程序。本来想用豆瓣的 api ，但已经有人写了，好吧…那我就自己写个简单的 api 用用。程序已经写好了，但小程序要求后台必须是 &lt;code&gt;https&lt;/code&gt;,好吧，那就给谷歌云搞个 &lt;code&gt;https&lt;/code&gt;, 下面讲讲过程。万万没想到， 最后的结局是悲伤的，这个 api 最后还是用不成，因为小程序要求的接口域名必须是要经过备案的，而谷歌云无法备案，苦涩的哈哈哈… 。仅以此纪念学习这个的过程。&lt;/p&gt;&lt;h3 id=&quot;下载证书&quot;&gt;&lt;a href=&quot;#下载证书&quot; class=&quot;headerlink&quot; title=&quot;下载证书&quot;&gt;&lt;/a&gt;下载证书&lt;/h3&gt;&lt;p&gt;首先在本地先试验下，用 &lt;code&gt;openssl&lt;/code&gt; 生成了自签名证书，参考 &lt;a href=&quot;http://www.xymiao.com/archives/769&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;, 再修改下 &lt;code&gt;nginx.conf&lt;/code&gt; 的配置，就可以访问 &lt;a href=&quot;https://localhost&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://localhost&lt;/a&gt; 了，但放在谷歌云上却无法正确运行，不知道为什么…&lt;/p&gt;&lt;p&gt;那么，我们去买一个 &lt;code&gt;https&lt;/code&gt; 证书来配置，==…发现有免费的，那自然用免费的，申请下载请参考 &lt;a href=&quot;http://www.zslin.com/web/article/detail/72&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这儿&lt;/a&gt;，文章中阿里云的免费证书已经不可以申请了，所以我申请了腾讯云的免费证书，不枉我玩了那么多腾讯游戏…手动笑哭&lt;/p&gt;&lt;h3 id=&quot;修改nginx配置&quot;&gt;&lt;a href=&quot;#修改nginx配置&quot; class=&quot;headerlink&quot; title=&quot;修改nginx配置&quot;&gt;&lt;/a&gt;修改nginx配置&lt;/h3&gt;&lt;p&gt;免费的证书有 1 年的使用时间，下载下来的证书长这样：&lt;img src=&quot;http://7xphbb.com1.z0.glb.clouddn.com/ca-dir.png&quot; alt=&quot;https腾讯云证书&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://jintang.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://jintang.github.io/tags/nginx/"/>
    
      <category term="https" scheme="http://jintang.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>docker初识</title>
    <link href="http://jintang.github.io/2018/04/24/docker%E5%88%9D%E8%AF%86/"/>
    <id>http://jintang.github.io/2018/04/24/docker初识/</id>
    <published>2018-04-24T01:11:44.000Z</published>
    <updated>2018-08-12T07:26:35.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">阮大神</a>，有些介绍直接 copy 了阮大神的，因为阮大神写得很通俗易懂，嘿嘿</li></ul></blockquote><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 <code>Python</code> 应用，计算机必须有 <code>Python</code> 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><p><strong>解决方案：</strong></p><ol><li><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><ul><li><strong>资源占用多</strong>:<br>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</li><li><strong>冗余步骤多</strong>：<br>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</li><li><strong>启动慢</strong>：<br>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</li></ul></li><li><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><ul><li><strong>启动快</strong>:<br>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</li><li><strong>资源占用少</strong>：<br>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</li><li><strong>体积小</strong>：<br>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</li></ul></li></ol><p><strong>总之</strong>，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><a id="more"></a><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p><code>Docker</code> 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p><code>Docker</code> 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 <code>Docker</code>，就不用担心环境问题。</p><p>总体来说，<code>Docker</code> 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>Docker</code> 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。我们使用社区版。</p><p><code>Docker</code> 可以在<code>Mac</code>、<code>Linux</code>、<code>windows</code>下安装，其中的 windows 只能是 win10，我又没有 mac, 所以我使用谷歌云来进行安装，它是 <code>CentOs7</code>。</p><p>鉴于国内网络问题，强烈建议使用国内源<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \ 表示换行</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p></p><p>如果无法识别 <code>yum-config-manager</code> 命令，使用下面命令安装并重新登录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p></p><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br><span class="line">``` </span><br><span class="line">安装完成后，运行下面的命令，验证是否安装成功。</span><br><span class="line">``` bash</span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure><p></p><p><code>Docker</code> 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 <code>Docker</code> 用户组。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p></p><p><code>Docker</code> 是服务器—-客户端架构。命令行运行 <code>docker</code> 命令的时候，需要本机有 <code>Docker</code> 服务。如果这项服务没有启动，可以用下面的命令启动。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p></p><p>最后，验证 <code>docker</code> 是否可以正常运行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure><p></p><h3 id="image文件"><a href="#image文件" class="headerlink" title="image文件"></a>image文件</h3><p><strong>Docker 把应用程序及其依赖，打包在 image 文件里面，这就是 docker 里常说的镜像。</strong> 只有通过这个文件，才能生成 <code>Docker</code> 容器。 <code>image</code> 文件可以看作是容器的模板。 <code>Docker</code> 根据 <code>image</code> 文件生成容器的实例。同一个 <code>image</code> 文件，可以生成多个同时运行的容器实例。</p><p><code>image</code> 是二进制文件。实际开发中，一个 <code>image</code> 文件往往通过继承另一个 <code>image</code> 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 <code>image</code> 基础上，往里面加入 Apache 服务器，形成你的 <code>image</code>。</p><p><code>iamge</code> 常用命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取image</span></span><br><span class="line">$ docker pull [imageName]</span><br><span class="line"><span class="comment"># 显示本机所有的image</span></span><br><span class="line">$ docker images</span><br><span class="line"><span class="comment"># 删除 image 文件</span></span><br><span class="line">$ docker rmi [imageName]</span><br></pre></td></tr></table></figure><p></p><p><code>image</code> 文件是通用的，一台机器的 <code>image</code> 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 <code>image</code> 文件，而不是自己制作。即使要定制，也应该基于别人的 <code>image</code> 文件进行加工，而不是从零开始制作。</p><p>为了方便共享， <code>image</code> 文件制作完成后，可以上传到网上的仓库。 <code>Docker</code> 的官方仓库 <em>Docker Hub</em> 是最重要、最常用的 <code>image</code> 仓库。此外，出售自己制作的 <code>image</code> 文件也是可以的。</p><p>我们来使用下上面这些命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull hello-world</span><br><span class="line">$ docker images</span><br><span class="line">$ docker rmi hello-world</span><br></pre></td></tr></table></figure><p></p><h3 id="container文件"><a href="#container文件" class="headerlink" title="container文件"></a>container文件</h3><p><strong>image 运行时的实例，本身也是一个文件，称为容器文件。</strong></p><p>container 常用命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据image生成container并启动</span></span><br><span class="line">$ docker run [OPTIONS] imageName [<span class="built_in">command</span>]</span><br><span class="line"><span class="comment"># 启动已经停止的container</span></span><br><span class="line">$ docker start [containerId, ...]</span><br><span class="line"><span class="comment"># 查看正在运行的container，加 -a 显示所有的container</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># 停止container</span></span><br><span class="line">$ docker stop [containerId]</span><br><span class="line"><span class="comment"># 删除container</span></span><br><span class="line">$ docker rm [containerId]</span><br></pre></td></tr></table></figure><p></p><p><code>docker run</code> 常用的 options:</p><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；-it一起使用表示，容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器</li><li><strong>-p:</strong> 端口映射，将 <code>docker</code> 内部端口映射到本机端口,如 -p 8080:3000，8080表示本机端口</li></ul><p>我们来使用下上面这些命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world <span class="comment"># 本地找不到会自动在仓库下载</span></span><br><span class="line">$ docker ps</span><br><span class="line">$ docker stop [containerId]</span><br><span class="line">$ docker ps <span class="comment"># 只能看到正在运行的container</span></span><br><span class="line">$ docker ps -a</span><br><span class="line">$ docker rm [containerId]</span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p></p><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><p><code>Docker</code> 根据该文件生成二进制的 <code>image</code> 文件。</p><p>常用相关命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建image</span></span><br><span class="line">$ docker build [optiosn] PATH</span><br></pre></td></tr></table></figure><p></p><p>下面用实例来演示：</p><p>创建一个 <code>Dockerfile</code> 文件<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir docker-demo &amp;&amp; <span class="built_in">cd</span> docker-demo</span><br><span class="line">$ touch Dockfile</span><br><span class="line">$ vim Dockerfile</span><br></pre></td></tr></table></figure><p></p><p>填入如下内容：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> tang</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'hello docker'</span></span></span><br></pre></td></tr></table></figure><p></p><p>保存退出。继续下面的命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t hello-docker . </span><br><span class="line">$ docker images <span class="comment"># 可以看到生成的hello-docker</span></span><br><span class="line">$ docker run hello-docker <span class="comment"># 输出：hello docker</span></span><br></pre></td></tr></table></figure><p></p><p>上面 <code>docker build</code> 语句中：-t 指定 <code>image</code> 的名称，后面跟冒号可以指定标签，若没有指定，则默认为 <code>latest</code></p><p><code>Dockerfile</code> 文件常用命令：</p><ul><li><strong>FROM:</strong> 基础镜像</li><li><strong>MAINTAINER:</strong> 维护者</li><li><strong>WORKDIR:</strong> 指定工作目录</li><li><strong>ADD:</strong> 添加文件,可以添加远程文件</li><li><strong>COPY:</strong> 拷贝文件，但不允许远程文件</li><li><strong>RUN:</strong> 执行命令，允许出现多条</li><li><strong>CMD:</strong> 执行命令，只允许一条生效，若有多条，最后一条生效，若 <code>docker run</code> 命令后面有命令，会覆盖CMD命令</li><li><strong>EXPOSE:</strong> 暴露端口</li><li><strong>ENV:</strong> 设定环境变量</li><li><strong>ENTRYPOINT:</strong> 容器入口</li><li><strong>USER:</strong> 指定用户</li><li><strong>VOLUME:</strong> 挂载卷。如：<code>VOLUME /data</code> ， /data 目录就会在运行时自动挂载为匿名卷,任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。运行时可以覆盖这个挂载设置,如： <code>docker run -d -v mydata:/data imageName</code>, 使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置</li></ul><p>下面我们来个稍微复杂点的实例，还是在上面那个目录，先做些准备工作：</p><p>初始化一个 <code>node</code> 项目:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">$ npm install koa -S</span><br></pre></td></tr></table></figure><p></p><p>创建 <code>.dockerignore</code> 文件，并写入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line"><span class="keyword">node</span><span class="title">-debug</span>.log</span><br></pre></td></tr></table></figure><p>创建 <code>server.js</code> 并填写：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'hello koa2'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3006</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[demo] start-quick is starting at port 3006'</span>)</span><br></pre></td></tr></table></figure><p></p><p>准备工作完成，修改 <code>Dockerfile</code> , 参考 <a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/" target="_blank" rel="noopener">node官方demo</a>, 最终如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM node:carbon</span><br><span class="line">MAINTAINER tang</span><br><span class="line"><span class="comment"># Dockerfile 中每一个指令都会建立一层，使用 WORKDIR 后各层的当前目录就被改为指定的目录</span></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">COPY package*.json ./</span><br><span class="line"></span><br><span class="line">RUN \</span><br><span class="line">npm install -g nrm &amp;&amp; \</span><br><span class="line">nrm use taobao &amp;&amp; \</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">EXPOSE 3006</span><br><span class="line">CMD [<span class="string">"npm"</span>, <span class="string">"start"</span>]</span><br></pre></td></tr></table></figure><p></p><p>继续下面命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建image</span></span><br><span class="line">$ docker build -t hello-koa2 .</span><br><span class="line"><span class="comment"># 查看创建的image</span></span><br><span class="line">$ docker images</span><br><span class="line"><span class="comment"># run the image</span></span><br><span class="line">$ docker run -p 9000:3006 -d hello-koa2 <span class="comment"># 返回containerId</span></span><br><span class="line"><span class="comment"># 查看生成的container</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># Print app output</span></span><br><span class="line">$ docker logs containerId</span><br></pre></td></tr></table></figure><p></p><p>最后访问 <a href="localhost:9000" target="_blank" rel="noopener">localhost:9000</a>，可以看到结果： hello koa2</p><h3 id="发布-image-文件"><a href="#发布-image-文件" class="headerlink" title="发布 image 文件"></a>发布 image 文件</h3><p>容器运行成功后，就确认了 <code>image</code> 文件的有效性。这时，我们就可以考虑把 <code>image</code> 文件分享到网上，让其他人使用。假设我们要发布上面用到的 <code>hello-koa2 image</code> ，进行如下步骤：</p><p>首先，去 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 或 <a href="https://cloud.docker.com" target="_blank" rel="noopener">cloud.docker.com</a> 注册一个账户。然后，使用下面的命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker login <span class="comment"># 输入注册的用户名和密码</span></span><br><span class="line"><span class="comment"># 为本地的 image 标注用户名和版本。</span></span><br><span class="line">$ docker tag hello-koa2 [username]/[respository]:[tag]</span><br><span class="line"><span class="comment"># 我的是： docker tag hello-koa2 jintang/hello-koa2</span></span><br><span class="line">$ docker push jintang/hello-koa2</span><br></pre></td></tr></table></figure><p></p><p>现在就可以在 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 上登录自己的账号看到刚发布的 <code>image</code> 了</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p><code>Compose</code> 是 <code>Docker</code> 公司推出的一个工具软件，可以管理多个 <code>Docker</code> 容器组成一个应用。你需要定义一个 <em>YAML</em> 格式的配置文件 <code>docker-compose.yml</code> ，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>检测是否安装成功：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line"><span class="comment"># docker-compose version 1.21.0, build 5920eb0</span></span><br></pre></td></tr></table></figure><p></p><h4 id="编写-docker-compose-yml"><a href="#编写-docker-compose-yml" class="headerlink" title="编写 docker-compose.yml"></a>编写 docker-compose.yml</h4><p>现在我们要搭建一个 <code>wordpress</code> 站点，它需要 <code>wordpress</code> 容器和 <code>mysql</code> 容器。</p><p><strong>先看看不使用 compose 的实现方法:</strong></p><p>首先，基于官方的 <code>mysql image</code>， 新建并启动 <code>MySQL</code> 容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  -d \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpressdb \</span><br><span class="line">  --env MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  --env MYSQL_DATABASE=wordpress \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure><p></p><p>然后，基于官方的 <code>WordPress image</code> ，新建并启动 <code>WordPress</code> 容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  -d \</span><br><span class="line">  -p 9001:80 \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpress \</span><br><span class="line">  --env WORDPRESS_DB_PASSWORD=123456 \</span><br><span class="line">  --link wordpressdb:mysql \</span><br><span class="line">  --volume <span class="string">"<span class="variable">$PWD</span>/wordpress"</span>:/var/www/html \</span><br><span class="line">  wordpress</span><br></pre></td></tr></table></figure><p></p><p>解析：</p><ul><li><strong>–rm：</strong> 停止运行后，自动删除容器文件。</li><li><strong>–name wordpress：</strong> 容器的名字叫做wordpress。</li><li><strong>–env MYSQL_ROOT_PASSWORD=123456：</strong> 向容器进程传入一个环境变量 MYSQL_ROOT_PASSWORD ，该变量会被用作 MySQL 的根密码。</li><li><strong>–env MYSQL_DATABASE=wordpress：</strong> 向容器进程传入一个环境变量 MYSQL_DATABASE ，容器里面的 <code>MySQL</code> 会根据该变量创建一个同名数据库。</li><li><strong>–link wordpressdb:mysql</strong> ，表示 <code>WordPress</code> 容器要连到 <code>wordpressdb</code> 容器，冒号表示该容器的别名是 mysql</li><li><strong>–volume “$PWD/“:/var/www/html：</strong> 将当前目录（$PWD）映射到容器的 <code>/var/www/html</code> （Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到。</li></ul><p>现在访问 <a href="localhost:9001" target="_blank" rel="noopener">localhost:9001</a> 即可以看到安装页面，停止两个 container 后因为 <code>--rm</code> 就自动删除了。</p><p><strong>下面是使用 compose 的实现方法:</strong></p><p><code>docker-compose.yml</code> 写入如下内容：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">MYSQL_DATABASE=wordpress</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">WORDPRESS_DB_PASSWORD=123456</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"9001:80"</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/var/www/html</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">     - wordpress:</span><span class="string">/var/www/html</span></span><br></pre></td></tr></table></figure><p></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><p>访问 <a href="localhost:9001" target="_blank" rel="noopener">localhost:9001</a> 就可以看到 <code>wordpress</code> 的安装界面了</p><p>现在关闭两个容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure><p></p><p>关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose rm</span><br></pre></td></tr></table></figure><p></p><p>比起上面单独创建 container 的方式方便多了。</p><p><strong>ok, 本文结束。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;参考链接：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮大神&lt;/a&gt;，有些介绍直接 copy 了阮大神的，因为阮大神写得很通俗易懂，嘿嘿&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？&lt;/p&gt;&lt;p&gt;用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 &lt;code&gt;Python&lt;/code&gt; 应用，计算机必须有 &lt;code&gt;Python&lt;/code&gt; 引擎，还必须有各种依赖，可能还要配置环境变量。&lt;/p&gt;&lt;p&gt;如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。&lt;/p&gt;&lt;p&gt;环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。&lt;/p&gt;&lt;p&gt;虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;资源占用多&lt;/strong&gt;:&lt;br&gt;虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;冗余步骤多&lt;/strong&gt;：&lt;br&gt;虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;启动慢&lt;/strong&gt;：&lt;br&gt;启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。&lt;/p&gt;&lt;p&gt;由于容器是进程级别的，相比虚拟机有很多优势。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;启动快&lt;/strong&gt;:&lt;br&gt;容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;资源占用少&lt;/strong&gt;：&lt;br&gt;容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;体积小&lt;/strong&gt;：&lt;br&gt;容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;总之&lt;/strong&gt;，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://jintang.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://jintang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>vue动态添加组件</title>
    <link href="http://jintang.github.io/2018/03/27/vue%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6/"/>
    <id>http://jintang.github.io/2018/03/27/vue动态添加组件/</id>
    <published>2018-03-27T09:24:21.000Z</published>
    <updated>2018-08-12T07:26:35.253Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大多数时候，我们都用单文件.vue文件来实现功能。比如添加一个dialog，代码如下：</p></blockquote><p><code>hello.vue</code><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showDialog"</span>&gt;</span>显示一个弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">v-if</span>=<span class="string">"dialogFlag"</span>&gt;</span><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                dialogFlag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            showDialog() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dialogFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123; Dialog &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>点击按钮即可显示弹框。很简单明了，功能划分也清晰，表示很开心。下面列出动态创建弹框的代码，可以跟上面的比较一下有啥优缺点，在不同的情景下选用不同的方案：<br><a id="more"></a><br><code>hello.vue</code><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showDialog"</span>&gt;</span>显示一个弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                dialogComp: <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            showDialog() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> dialogClass = Vue.extend(Dialog);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dialogComp = <span class="keyword">new</span> dialogClass().$mount()</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.vm.$el)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.vm.dialogFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123; Dialog &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>下面做一些解析：</p><ul><li><p><code>extend()</code>:</p><ul><li><p>参数是一个包含组件选项的对象，此处 <code>Dialog</code> 是 <code>import</code> 的一个单文件组件，其值为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;...&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;...&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引申一下，我们的单文件组件通过<code>import</code>后解析为一个<code>js</code>对象，在添加到<code>components</code>里后才可以按组件使用，内部机制请原谅我没深究…</p></li><li>返回值： 返回一个”子类”，通过<code>console</code>看到结构如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VueComponent(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>$mount([elementOrSelector])</code>: 通过<code>new</code>一个”子类”创建了一个<strong>未挂载</strong>的 <code>vue</code> 组件，<code>$mount()</code>用来挂载组件到页面，如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 <code>DOM API</code> 把它插入文档中。如上面的 <code>appendChild()</code> 。返回值是挂载后的 <code>vue</code>组件。</p></li></ul><p><strong>总结：</strong> 各有妙用,嘿嘿</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;大多数时候，我们都用单文件.vue文件来实现功能。比如添加一个dialog，代码如下：&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;hello.vue&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;showDialog&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;显示一个弹框&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dialogFlag&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dialog&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Dialog &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./Dialog.vue&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        data() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;                dialogFlag: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        methods: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            showDialog() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dialogFlag = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        components: &amp;#123; Dialog &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;点击按钮即可显示弹框。很简单明了，功能划分也清晰，表示很开心。下面列出动态创建弹框的代码，可以跟上面的比较一下有啥优缺点，在不同的情景下选用不同的方案：&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://jintang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://jintang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>经常遇到的小算法</title>
    <link href="http://jintang.github.io/2018/03/21/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://jintang.github.io/2018/03/21/经常遇到的小算法/</id>
    <published>2018-03-21T02:20:13.000Z</published>
    <updated>2018-08-12T07:26:35.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以此记录经常见到的小算法</p></blockquote><h2 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h2><p><strong>算法：</strong><a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95" target="_blank" rel="noopener">埃氏筛法</a>，简单解释如下：<br>首先，列出从2开始的所有自然数，构造一个序列：</p><blockquote><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：</p><blockquote><p>3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：</p><blockquote><p>5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>不断筛下去，这些第一个数的集合就是所有的素数。</p><p>以<code>python</code>代码为例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr = range(<span class="number">2</span>, <span class="number">100</span>) <span class="comment"># 生成2-100的序列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPrimeNum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fil</span><span class="params">(item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item % arr[<span class="number">0</span>] != <span class="number">0</span></span><br><span class="line">    result = []    </span><br><span class="line">    <span class="keyword">while</span> len(arr) != <span class="number">0</span>:</span><br><span class="line">        result.append(arr[<span class="number">0</span>])</span><br><span class="line">        arr = list(filter(fil, arr))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = getPrimeNum(arr)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;以此记录经常见到的小算法&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;求素数&quot;&gt;&lt;a href=&quot;#求素数&quot; class=&quot;headerlink&quot; title=&quot;求素数&quot;&gt;&lt;/a&gt;求素数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;算法：&lt;/strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;埃氏筛法&lt;/a&gt;，简单解释如下：&lt;br&gt;首先，列出从2开始的所有自然数，构造一个序列：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不断筛下去，这些第一个数的集合就是所有的素数。&lt;/p&gt;&lt;p&gt;以&lt;code&gt;python&lt;/code&gt;代码为例：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arr = range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 生成2-100的序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrimeNum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arr)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item % arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result = []    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; len(arr) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result.append(arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr = list(filter(fil, arr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = getPrimeNum(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://jintang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://jintang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理豆瓣接口</title>
    <link href="http://jintang.github.io/2018/03/05/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B1%86%E7%93%A3%E6%8E%A5%E5%8F%A3/"/>
    <id>http://jintang.github.io/2018/03/05/nginx反向代理豆瓣接口/</id>
    <published>2018-03-05T08:57:36.000Z</published>
    <updated>2018-08-12T07:26:35.252Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>nginx</code>是一个<code>web</code>服务器，类似<code>apache</code>。又不仅仅是个服务器，还可以<code>反向代理</code>、<code>负载均衡</code>…很多牛逼的网站都是用了<code>nginx</code>二次开发，比如说大名鼎鼎的 <strong>草榴</strong>。我们普通人可以通过<code>反向代理</code>来转发接口，实现 <strong>跨域</strong>。</p></blockquote><p>不论你是<code>windows</code>还是<code>linux</code>，都可以用下面三个步骤来概括：</p><ol><li>下载安装，<code>windows</code>下不需安装，解压即可</li><li>修改配置：<code>conf/nginx.conf</code></li><li>重启：第一次启动：<code>start nginx</code>；修改配置后重启：<code>nginx -s realod</code><br>然后访问就可以看到结果。</li></ol><p>那么，下面放上其中的重点——<strong>修改配置</strong>：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">~</span> <span class="string">/v2/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="comment"># 反向代理https://api.douban.com</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="attr">https://api.douban.com;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>所谓<strong>反向代理</strong>，就是当你访问你的<code>nginx</code>服务器时，会转发到你设置的服务器上。比如上面当你访问<code>localhost</code>时，就转发到 <a href="https://api.douban.com" target="_blank" rel="noopener">https://api.douban.com</a> 上。即你访问<code>localhost</code>相当于访问 <a href="https://api.douban.com" target="_blank" rel="noopener">https://api.douban.com</a> 。</p><p>重启后就可以访问下豆瓣的接口了，比如：<a href="https://api.douban.com/v2/book/1220562" target="_blank" rel="noopener">https://api.douban.com/v2/book/1220562</a> 可以用 <a href="/v2/book/1220562">localhost/v2/book/1220562</a> 访问。<br><a id="more"></a><br><strong>Tip:</strong> <code>nginx</code>默认不支持<code>https</code>，如果要访问 <a href="https://localhost" target="_blank" rel="noopener">https://localhost</a> 来转发接口。需要 <code>https</code>证书，这种证书可以用两种方法获得：</p><ul><li>用<a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">openSSL</a>自己生成一个，这样转发的接口访问时谷歌浏览器会提示<strong>您的连接不是私密连接</strong>，你需要点击：高级——继续前往…就可以了，其他的浏览器类似。具体的做法可以参考<a href="http://www.xymiao.com/archives/769" target="_blank" rel="noopener">这里</a></li><li>买一个认证的证书，可以去阿里云等地方买一个，然后配置和上面差不多。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;是一个&lt;code&gt;web&lt;/code&gt;服务器，类似&lt;code&gt;apache&lt;/code&gt;。又不仅仅是个服务器，还可以&lt;code&gt;反向代理&lt;/code&gt;、&lt;code&gt;负载均衡&lt;/code&gt;…很多牛逼的网站都是用了&lt;code&gt;nginx&lt;/code&gt;二次开发，比如说大名鼎鼎的 &lt;strong&gt;草榴&lt;/strong&gt;。我们普通人可以通过&lt;code&gt;反向代理&lt;/code&gt;来转发接口，实现 &lt;strong&gt;跨域&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不论你是&lt;code&gt;windows&lt;/code&gt;还是&lt;code&gt;linux&lt;/code&gt;，都可以用下面三个步骤来概括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;下载安装，&lt;code&gt;windows&lt;/code&gt;下不需安装，解压即可&lt;/li&gt;&lt;li&gt;修改配置：&lt;code&gt;conf/nginx.conf&lt;/code&gt;&lt;/li&gt;&lt;li&gt;重启：第一次启动：&lt;code&gt;start nginx&lt;/code&gt;；修改配置后重启：&lt;code&gt;nginx -s realod&lt;/code&gt;&lt;br&gt;然后访问就可以看到结果。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么，下面放上其中的重点——&lt;strong&gt;修改配置&lt;/strong&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;localhost;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;root&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;html;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;index.htm;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/v2/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 反向代理https://api.douban.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;https://api.douban.com;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓&lt;strong&gt;反向代理&lt;/strong&gt;，就是当你访问你的&lt;code&gt;nginx&lt;/code&gt;服务器时，会转发到你设置的服务器上。比如上面当你访问&lt;code&gt;localhost&lt;/code&gt;时，就转发到 &lt;a href=&quot;https://api.douban.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.douban.com&lt;/a&gt; 上。即你访问&lt;code&gt;localhost&lt;/code&gt;相当于访问 &lt;a href=&quot;https://api.douban.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.douban.com&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;重启后就可以访问下豆瓣的接口了，比如：&lt;a href=&quot;https://api.douban.com/v2/book/1220562&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.douban.com/v2/book/1220562&lt;/a&gt; 可以用 &lt;a href=&quot;/v2/book/1220562&quot;&gt;localhost/v2/book/1220562&lt;/a&gt; 访问。&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://jintang.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://jintang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>谷歌云部署个人网站</title>
    <link href="http://jintang.github.io/2018/01/24/%E8%B0%B7%E6%AD%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://jintang.github.io/2018/01/24/谷歌云部署个人网站/</id>
    <published>2018-01-24T09:09:26.000Z</published>
    <updated>2018-08-12T07:26:35.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>得知谷歌云免费的消息，喜出望外，毕竟阿里云腾讯云这些一年价格也不菲。赶紧申请了一个，想申请的抓紧了。废话不说了，跟我一起在谷歌云上部署一个个人网站吧。</p></blockquote><p>假设你已经拥有了一个谷歌云账号。没有的话赶紧注册一个，需要一个<strong>VISA</strong>的信用卡，其他的都是基本信息填写。</p><h2 id="谷歌云上创建-Compute-Engine-实例"><a href="#谷歌云上创建-Compute-Engine-实例" class="headerlink" title="谷歌云上创建 Compute Engine 实例"></a>谷歌云上创建 Compute Engine 实例</h2><ol><li>点击<a href="https://console.cloud.google.com/compute/instances" target="_blank" rel="noopener">这里</a>进入 <strong>Compute Engine</strong> 页面</li><li>选择 <strong>创建实例</strong><ul><li>地区选<code>asia-east1-c</code>，据说对大陆玩家友好。</li><li>机器类型：我选了 小型(一个共享vCPU) ，我部署的网站很小，所以这个就可以了</li><li>启动磁盘——更改：选择 <code>CentOS7</code>，其他不用变。因为我要用到<code>mongodb</code>，如果选择<code>debian9</code>，<code>mongodb</code>的官网目前还不支持，为了在<code>debian9</code>上安装<code>mongodb</code>，我也是被折磨得很心累。然后果断在同事的建议下果断新建了个<code>CentOS7</code>的<strong>实例</strong>。当然你也可以选择其他的…</li><li>管理、磁盘、网络、SSH密钥：需要改网络部分，如果你之前已经创建了<strong>静态IP</strong>，<strong>外部IP</strong>这一栏就选<code>临时</code>，如果没有创建的话，请选择<code>创建IP地址</code>。</li></ul></li><li>点击创建，结果如下：<br><img src="http://7xphbb.com1.z0.glb.clouddn.com/google-cloud-vm.png" alt="vm实例"></li></ol><a id="more"></a><h2 id="创建部署的项目"><a href="#创建部署的项目" class="headerlink" title="创建部署的项目"></a>创建部署的项目</h2><p>要在云服务器上部署一个网站，那首先肯定要从本地新建一个了。我选择了一个使用<code>node</code>和<code>mongodb</code>的博客系统，跟着<strong>nswbmw</strong>大神的<a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">N-blog</a>敲一遍，写完之后本地运行成功。感叹一下，大神的这个项目带了多少人走进了<code>node</code>。</p><p>如果不想关注创建项目，这儿就不用花费功夫，在下一步的时候可以直接使用大神的项目部署。</p><h2 id="进入云服务器部署"><a href="#进入云服务器部署" class="headerlink" title="进入云服务器部署"></a>进入云服务器部署</h2><p><strong>vm实例</strong>右侧有个<code>ssh</code>按钮，点击就可以进入到后台。当然我们可以使用其他<code>ssh</code>工具登陆，那个<code>ssh</code>按钮右边有个小三角，点开之后选择<strong>使用其他SSH客户端</strong>，就可以进入教程。</p><p>关于<code>ssh</code>工具的选择，最具代表性的是<strong>putty</strong>，我选择使用<strong>xshell</strong>，因为它是中文版的，我英语不好…而且功能比<strong>putty</strong>强大很多。更多<code>ssh</code>工具的选择，请参考<a href="https://llinmeng.github.io/2015/08/05/windows-ssh-tools-diff/" target="_blank" rel="noopener">这儿</a>。</p><p>废话不多说，<code>ssh</code>登陆后开始下面的步骤：</p><p><em>Tip:</em> 我的系统是<code>centOS7</code>，所以其他的系统会有稍微的区别，主要是包管理器的区别。如果是<code>debian</code>和<code>ubuntu</code>使用<code>apt-get</code>安装。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p><strong>方法1： </strong>使用源码安装包安装，你也可以选择其他方式，目前的最新稳定版是<code>8.9.4</code>，以下安装<code>node</code>的版本是<code>8.9.4</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget</span><br><span class="line"><span class="comment"># 在官方网站（https://nodejs.org/zh-cn/download/）查看链接并下载源码</span></span><br><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzvf node-v8.9.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v8.9.4</span><br><span class="line"><span class="comment"># 安装编译环境并编译</span></span><br><span class="line">sudo yum install gcc gcc-c++</span><br><span class="line">./configure</span><br><span class="line">make <span class="comment"># 这一步时间比较长</span></span><br><span class="line"><span class="comment"># 安装node</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 检测安装是否成功，出现版本号就成功了</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><p></p><p><strong>方法2：</strong>官方编译过的二进制数据包安装，更快速和方便<br>在<a href="https://nodejs.org/download/release/" target="_blank" rel="noopener">下载地址</a>选择要下载的版本，还是选择<code>8.9.4</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/download/release/v8.9.4/node-v8.9.4-linux-x64.tar.gz</span><br><span class="line">sudo tar --strip-components 1 -xzvf node-v8.9.4-linux-x64.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment"># 检测安装是否成功，出现版本号就成功了</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><p></p><h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><p>我们安装的<strong>mongodb社区版</strong>，根据<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">官方链接</a>安装并启动。</p><h3 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h3><p>之前我们不是在本地跟着大神写了一个项目，我们可以通过<strong>ftp</strong>将刚刚那个项目上传上来，也可以安装个<code>git</code>直接克隆大神的项目进行部署。我们直接克隆好了，更方便…<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/nswbmw/N-blog.git</span><br></pre></td></tr></table></figure><p></p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> N-blog</span><br><span class="line">npm i</span><br><span class="line">vim config/default.js <span class="comment">#修改端口 3000-&gt;80</span></span><br><span class="line">sudo node index</span><br><span class="line"><span class="comment"># 成功的提示: myblog listening on port 80</span></span><br></pre></td></tr></table></figure><p>如果成功了，那么访问你的<strong>静态ip</strong>这时候已经可以看到项目了。<br>我在最后运行的时候出现了这个问题:<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">command</span> is undefined</span><br></pre></td></tr></table></figure><p></p><p>因为<code>centOS</code>的安全策略，要运行 <strong>80</strong>端口必须以管理员身份运行，但在管理员身份下却获取不到<code>node</code>命令，解决办法是添加<strong>环境变量</strong>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换为管理员</span></span><br><span class="line">sudo -i </span><br><span class="line"><span class="comment"># 获取node的位置</span></span><br><span class="line"><span class="built_in">which</span> node <span class="comment"># 我的是在/usr/local/bin/node</span></span><br><span class="line"><span class="comment"># 编辑环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line">    <span class="comment"># 在结尾处添加:</span></span><br><span class="line">    PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/ <span class="comment"># 结尾到bin/就可以了，不是bin/node</span></span><br><span class="line">    <span class="built_in">export</span> PATH</span><br><span class="line">    <span class="comment"># 使环境变量生效</span></span><br><span class="line">    <span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 检测是否生效，包含刚刚添加的表示生效了</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>   </span><br><span class="line">node --version <span class="comment"># 可以正确显示版本号</span></span><br></pre></td></tr></table></figure><p></p><p>经过上面的步骤，项目已经成功的跑了起来，访问<strong>静态ip</strong>已经可以看到项目。但如果关闭终端，我们的项目就又停止了，我们需要<code>pm2</code>作为守护进程启动博客</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> pm2 -g</span><br><span class="line">pm2 start index<span class="selector-class">.js</span> --name=<span class="string">"myblog"</span></span><br></pre></td></tr></table></figure><p>关闭终端，访问<strong>静态ip</strong>，我们的项目依旧在运行。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我们随便访问一个网站，地址栏里都输入的是域名，而非<code>IP</code>，所以我们也来个域名吧。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>购买域名可以去 <a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>…因为我只是为了玩，所以在<a href="https://www.zzidc.com/main/huodong/doMainActivity/spreadid_138149_hdName_doMainActivity.html" target="_blank" rel="noopener">景安网络</a>买个1年便宜的<code>.top</code>域名。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>进入<strong>域名控制面板</strong>——选择<strong>DNS解析管理</strong>——<strong>添加记录：</strong><br><img src="http://7xphbb.com1.z0.glb.clouddn.com/google-cloud-host.png" alt="host"><br>我的域名是<code>cloud-tv.top</code>，为了让<code>www.cloud-tv.top</code>也可用，我添加的记录如上图所示，下面解释一下：</p><blockquote><p>主机名这一列表示域名前缀，以<code>cloud-tv.top</code>为例，当值为：</p><ul><li>www：表示 <code>www.cloud-tv.top</code></li><li>留空：表示主域名 <code>cloud-tv.top</code></li><li>*：泛解析，表示匹配其他所有域名 <code>*.cloud-tv.top</code></li></ul></blockquote><ul><li>第一行：A记录，将域名指向ip。所以主机名我<strong>留空</strong>表示主域名，记录值填写ip</li><li>第二行：CNAME记录，增加子域名，指向到已有空间。所以主机名我填写<strong>www</strong>表示<code>www.cloud-tv.top</code>，记录值填写主域名</li></ul><p>当我访问<code>www.cloud-tv.top</code>时，先根据<strong>CNAME记录</strong>指向主域名<code>cloud-tv.top</code>。再根据<code>A记录</code>指向<strong>ip</strong>，这样完成了整个解析过程。</p><h3 id="检测解析完成"><a href="#检测解析完成" class="headerlink" title="检测解析完成"></a>检测解析完成</h3><p>等几分钟一般就解析完了。检测方法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping cloud-tv.top</span><br></pre></td></tr></table></figure><p></p><p>当域名后面出现你绑定的<code>ip</code>时说明解析成功。<br>更多域名解析的相关知识请自行百度。</p><p><strong>最后</strong>：访问 <a href="http://cloud-tv.top" target="_blank" rel="noopener">http://cloud-tv.top</a> 或 <a href="http://www.cloud-tv.top" target="_blank" rel="noopener">http://www.cloud-tv.top</a> 就可以看到之前部署的项目了。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><img src="http://7xphbb.com1.z0.glb.clouddn.com/google-cloud-cost.png" alt="google-cost"><br>刚心血来潮查看了一下谷歌云的花费，然后算一笔账。第一行是我开的一个微型主机（可供选择里面最小的），用来翻墙，算下来一年的费用是<strong>$78.87</strong>。第二行就是我开的一个比上面一个高一级的主机（也就是可选择主机里排倒数第二），用来部署个人网站，算下来一年的费用是<strong>$481.65</strong>。而且这只是主机运行的费用，不包含流量费。so…谷歌云送的<strong>$300</strong>不够啊…看来我得把两个主机合成一个，用最小型号的那个主机。果然…没钱是多么苦…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;得知谷歌云免费的消息，喜出望外，毕竟阿里云腾讯云这些一年价格也不菲。赶紧申请了一个，想申请的抓紧了。废话不说了，跟我一起在谷歌云上部署一个个人网站吧。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;假设你已经拥有了一个谷歌云账号。没有的话赶紧注册一个，需要一个&lt;strong&gt;VISA&lt;/strong&gt;的信用卡，其他的都是基本信息填写。&lt;/p&gt;&lt;h2 id=&quot;谷歌云上创建-Compute-Engine-实例&quot;&gt;&lt;a href=&quot;#谷歌云上创建-Compute-Engine-实例&quot; class=&quot;headerlink&quot; title=&quot;谷歌云上创建 Compute Engine 实例&quot;&gt;&lt;/a&gt;谷歌云上创建 Compute Engine 实例&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;点击&lt;a href=&quot;https://console.cloud.google.com/compute/instances&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;进入 &lt;strong&gt;Compute Engine&lt;/strong&gt; 页面&lt;/li&gt;&lt;li&gt;选择 &lt;strong&gt;创建实例&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;地区选&lt;code&gt;asia-east1-c&lt;/code&gt;，据说对大陆玩家友好。&lt;/li&gt;&lt;li&gt;机器类型：我选了 小型(一个共享vCPU) ，我部署的网站很小，所以这个就可以了&lt;/li&gt;&lt;li&gt;启动磁盘——更改：选择 &lt;code&gt;CentOS7&lt;/code&gt;，其他不用变。因为我要用到&lt;code&gt;mongodb&lt;/code&gt;，如果选择&lt;code&gt;debian9&lt;/code&gt;，&lt;code&gt;mongodb&lt;/code&gt;的官网目前还不支持，为了在&lt;code&gt;debian9&lt;/code&gt;上安装&lt;code&gt;mongodb&lt;/code&gt;，我也是被折磨得很心累。然后果断在同事的建议下果断新建了个&lt;code&gt;CentOS7&lt;/code&gt;的&lt;strong&gt;实例&lt;/strong&gt;。当然你也可以选择其他的…&lt;/li&gt;&lt;li&gt;管理、磁盘、网络、SSH密钥：需要改网络部分，如果你之前已经创建了&lt;strong&gt;静态IP&lt;/strong&gt;，&lt;strong&gt;外部IP&lt;/strong&gt;这一栏就选&lt;code&gt;临时&lt;/code&gt;，如果没有创建的话，请选择&lt;code&gt;创建IP地址&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;点击创建，结果如下：&lt;br&gt;&lt;img src=&quot;http://7xphbb.com1.z0.glb.clouddn.com/google-cloud-vm.png&quot; alt=&quot;vm实例&quot;&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="http://jintang.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://jintang.github.io/tags/linux/"/>
    
      <category term="云" scheme="http://jintang.github.io/tags/%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>linux学习</title>
    <link href="http://jintang.github.io/2018/01/23/linux%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jintang.github.io/2018/01/23/linux学习/</id>
    <published>2018-01-23T06:38:48.000Z</published>
    <updated>2018-08-12T07:26:35.251Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谷歌云有一个免费1年的服务，那就申请一个学习学习啦。对于<code>linux</code>之前只用过<code>ubuntu</code>，装啥环境感觉非常方便。用这篇文章来记录下自己的理解。</p></blockquote><p><code>linux</code>有很多发行的版本，想要了解请看<a href="http://blog.sciencenet.cn/blog-3373182-1089895.html" target="_blank" rel="noopener">这里</a>。我这次使用了其中的<code>centos7</code>和<code>debian9</code>。之前我使用的<code>ubuntu</code>是基于<code>Debian</code>的<code>unstable</code>版本加强而来。</p><h2 id="通用的命令"><a href="#通用的命令" class="headerlink" title="通用的命令"></a>通用的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ id <span class="comment"># 查看当前用户与其所在的组</span></span><br><span class="line">$ <span class="built_in">which</span> node <span class="comment"># 查看node命令所在地址</span></span><br><span class="line">$ man ps <span class="comment"># 查看ps命令的用法</span></span><br></pre></td></tr></table></figure><p><strong>systemctl</strong>命令：系统管理与服务管理<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mysqld <span class="comment"># 启动mysql服务</span></span><br><span class="line">$ sudo systemctl status mysqld <span class="comment"># 查看mysql服务的状态</span></span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> mysqld <span class="comment"># mysql单元开机启动</span></span><br><span class="line"><span class="comment"># 查看开启启动项：</span></span><br><span class="line"><span class="comment"># 只显示sysV services，上面的mysqld是不展示的</span></span><br><span class="line">$ chkconfig --list</span><br><span class="line"><span class="comment"># 查看系统服务，其中开机启动的服务状态是enabled，可以看到mysqld</span></span><br><span class="line">$ systemctl list-unit-files</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程状态：</p><ul><li>R： running or in run queue（在运行队列中等待）</li><li>S： sleeping，可中断的睡眠状态</li><li>D： uninterruptible sleep (usually IO)，不可中断的睡眠状态</li><li>T： traced or stopped，此刻进程是不可中断的</li><li>Z： zombie（僵尸），退出状态，进程成为僵尸进程</li></ul><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示progress status的静态结果。详细参数请点击<a href="http://man.linuxde.net/ps" target="_blank" rel="noopener">这儿</a>。<br><strong>常见用法：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认只显示运行在当前控制台下的属于当前用户的进程</span></span><br><span class="line">$ ps</span><br><span class="line"><span class="comment"># -a表示所有，加上x会显示所有进程，包括没有控制终端的进程</span></span><br><span class="line">$ ps -ax</span><br><span class="line"><span class="comment"># 查看tang用户下的进程，没有指定用户名时默认为当前用户</span></span><br><span class="line">$ ps -u tang</span><br><span class="line"><span class="comment"># 查看系统中所有用户下所有进程，显示全面信息，常用！</span></span><br><span class="line">$ ps -aux</span><br></pre></td></tr></table></figure><p></p><p><strong>引申用法：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 CPU 使用来升序排序</span></span><br><span class="line">$ ps -aux --sort -pcpu</span><br><span class="line"><span class="comment"># 根据 内存使用 来升序排序</span></span><br><span class="line">$ ps -aux --sort -pmem</span><br><span class="line"><span class="comment"># 将上面两个合并到一个命令，并通过管道显示前10个结果</span></span><br><span class="line">$ ps -aux --sort -pcpu,-pmem | head -n 10</span><br><span class="line"><span class="comment"># 根据进程名过滤，如下查找mongod进程</span></span><br><span class="line">$ ps -C mongod</span><br><span class="line"><span class="comment"># 根据PID过滤</span></span><br><span class="line">$ ps -L 1213</span><br><span class="line"><span class="comment"># 显示更多信息加-f</span></span><br><span class="line">$ ps -C mongod -f</span><br></pre></td></tr></table></figure><p></p><p><code>ps -aux</code>显示的结果：<br><img src="http://7xphbb.com1.z0.glb.clouddn.com/linux_ps_result.png" alt="ps_result"><br><strong>列的含义：</strong></p><ul><li>USER： 账号</li><li>PID： progress id</li><li>%CPU： 占用cpu百分比</li><li>%MEM：占用物理内存百分比</li><li>VSZ：占用虚拟内存(kb)</li><li>RSS：占用固定内存(kb)</li><li>TTY：该 process 是在哪个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</li><li>STAT：进程状态，参照本节刚开始的说明</li><li>START： 启动时间</li><li>TIME： 运行时间</li><li>COMMAND： 实际指令</li></ul><blockquote><p><strong>Tip：</strong>不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号：进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行</p></blockquote><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>实时（动态的）显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。<br><strong>使用：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top [参数]</span><br></pre></td></tr></table></figure><p></p><p><strong>参数说明：</strong></p><ul><li>d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</li><li>p 通过指定监控进程ID来仅仅监控某个进程的状态。</li><li>q 该选项将使top没有任何延迟的进行刷新。</li><li>c 显示整个命令行而不只是显示命令名</li><li>S 指定累计模式</li><li>s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</li><li>i 使top不显示任何闲置或者僵死进程。</li></ul><p><strong>结果：</strong><br><img src="http://7xphbb.com1.z0.glb.clouddn.com/linux-top-result.png" alt="top-result"><br><strong>含义：</strong></p><ol><li>top：<ul><li>08:01:27 当前时间</li><li>up 1 day, 23:14 系统运行时间，格式为时:分</li><li>1 user 当前登录用户数</li><li>load average: 0.00, 0.02, 0.05 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</li></ul></li><li>Tasks：进程状态，状态说明参考<code>ps</code>指令，不再详述</li><li>%Cpu(s)：cpu 百分比<ul><li>2.0 us 用户空间占用CPU百分比</li><li>4.0 sy 内核空间占用CPU百分比</li><li>0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比</li><li>94.0 id 空闲CPU百分比</li><li>0.0 wa 等待输入输出的CPU时间百分比</li><li>0.0 hi：硬件CPU中断占用百分比</li><li>0.0 si：软中断占用百分比</li><li>0.0 st：虚拟机占用百分比</li></ul></li><li>KiB Mem：物理内存使用情况，只解释下面一个，其他看单词就可以明白<ul><li>157056 buff/cache 用作内核缓存的内存量</li></ul></li><li>KiB Swap：交换区使用情况</li><li>统计区列的含义：下面没列出来的请参考<code>ps</code>指令。<ul><li>PR：priority。优先级</li><li>NI：nice。负值表示高优先级，正值表示低优先级</li><li>VIRT：进程使用的虚拟内存总量，单位kb。</li><li>RES：进程使用的、未被换出的物理内存大小，单位kb。</li><li>SHR：共享内存大小，单k位b</li><li>S：进程状态，参照本节刚开始的说明</li><li>TIME+：进程使用的CPU时间总计，单位1/100秒</li></ul></li></ol><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p><code>centos</code>与<code>debian</code>虽然使用的是不同的软件包管理器，但大体的命令都差不多</p><ul><li><p><code>centos</code>（<code>Redhat</code>系列一样）的包管理方式采用的是基于<code>RPM</code>包的<code>YUM</code>包管理方式，包分发方式是编译好的二进制文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-attr">[options]</span> <span class="selector-attr">[command]</span> <span class="selector-attr">[package ...]</span></span><br></pre></td></tr></table></figure><p><strong>options:</strong><code>-h</code>（帮助），<code>-y</code>（安装过程中的提示选择全部为”yes”），<code>-q</code>（不显示安装的过程）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install [package]              下载并安装一个rpm包</span></span><br><span class="line"><span class="comment"># yum localinstall [package.rpm]    安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</span></span><br><span class="line"><span class="comment"># yum -y update                              更新当前系统中安装的所有rpm包</span></span><br><span class="line"><span class="comment"># yum update [package]                 更新一个rpm包</span></span><br><span class="line"><span class="comment"># yum remove [package]                删除一个rpm包</span></span><br><span class="line"><span class="comment"># yum list                            列出当前系统中安装的所有包</span></span><br><span class="line"><span class="comment"># yum search [package]                 在rpm仓库中搜寻软件包</span></span><br><span class="line"><span class="comment"># yum clean [package]                   清除缓存目录（/var/cache/yum）下的软件包</span></span><br><span class="line"><span class="comment"># yum clean headers                      删除所有头文件</span></span><br><span class="line"><span class="comment"># yum clean all                                删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>Debian</code>最具特色的是<code>apt-get / dpkg</code>包管理方式，包分发方式是编译好的二进制文件。其实<code>Redhat</code>的<code>YUM</code>也是在模仿<code>Debian</code>的<code>APT</code>方式，但是<code>YUM</code>可供选择的包比较少。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"> apt-get [选项] 命令  </span><br><span class="line"> apt-get [选项] install pkg1 [pkg2 ...]  </span><br><span class="line">命令：  </span><br><span class="line"> update - 重新获取软件包列表  </span><br><span class="line"> upgrade - 进行更新  </span><br><span class="line"> install - 安装新的软件包  </span><br><span class="line"> remove - 移除软件包  </span><br><span class="line"> autoremove - 自动移除全部不使用的软件包  </span><br><span class="line"> purge - 移除软件包和配置文件  </span><br><span class="line"> <span class="built_in">source</span> - 下载源码档案  </span><br><span class="line"> build-dep - 为源码包配置编译依赖  </span><br><span class="line"> dist-upgrade - 发行版升级, 参见 apt-get(8)  </span><br><span class="line"> dselect-upgrade - 依照 dselect 的选择更新  </span><br><span class="line"> clean - 清除下载的归档文件  </span><br><span class="line"> autoclean - 清除旧的的已下载的归档文件  </span><br><span class="line"> check - 检验是否有损坏的依赖  </span><br><span class="line">  </span><br><span class="line">选项：  </span><br><span class="line"> -h 本帮助文件。  </span><br><span class="line"> -q 输出到日志 - 无进展指示  </span><br><span class="line"> -qq 不输出信息，错误除外  </span><br><span class="line"> -d 仅下载 - 不安装或解压归档文件  </span><br><span class="line"> -s 不实际安装。模拟执行命令  </span><br><span class="line"> -y 假定对所有的询问选是，不提示  </span><br><span class="line"> -f 尝试修正系统依赖损坏处  </span><br><span class="line"> -m 如果归档无法定位，尝试继续  </span><br><span class="line"> -u 同时显示更新软件包的列表  </span><br><span class="line"> -b 获取源码包后编译  </span><br><span class="line"> -V 显示详细的版本号  </span><br><span class="line"> -c=? 阅读此配置文件  </span><br><span class="line"> -o=? 设置自定的配置选项，如 -o dir::cache=/tmp</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;谷歌云有一个免费1年的服务，那就申请一个学习学习啦。对于&lt;code&gt;linux&lt;/code&gt;之前只用过&lt;code&gt;ubuntu&lt;/code&gt;，装啥环境感觉非常方便。用这篇文章来记录下自己的理解。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;linux&lt;/code&gt;有很多发行的版本，想要了解请看&lt;a href=&quot;http://blog.sciencenet.cn/blog-3373182-1089895.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。我这次使用了其中的&lt;code&gt;centos7&lt;/code&gt;和&lt;code&gt;debian9&lt;/code&gt;。之前我使用的&lt;code&gt;ubuntu&lt;/code&gt;是基于&lt;code&gt;Debian&lt;/code&gt;的&lt;code&gt;unstable&lt;/code&gt;版本加强而来。&lt;/p&gt;&lt;h2 id=&quot;通用的命令&quot;&gt;&lt;a href=&quot;#通用的命令&quot; class=&quot;headerlink&quot; title=&quot;通用的命令&quot;&gt;&lt;/a&gt;通用的命令&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ id &lt;span class=&quot;comment&quot;&gt;# 查看当前用户与其所在的组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; node &lt;span class=&quot;comment&quot;&gt;# 查看node命令所在地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ man ps &lt;span class=&quot;comment&quot;&gt;# 查看ps命令的用法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;systemctl&lt;/strong&gt;命令：系统管理与服务管理&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl start mysqld &lt;span class=&quot;comment&quot;&gt;# 启动mysql服务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl status mysqld &lt;span class=&quot;comment&quot;&gt;# 查看mysql服务的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; mysqld &lt;span class=&quot;comment&quot;&gt;# mysql单元开机启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看开启启动项：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 只显示sysV services，上面的mysqld是不展示的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ chkconfig --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看系统服务，其中开机启动的服务状态是enabled，可以看到mysqld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-unit-files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://jintang.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://jintang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>debounce与throttle</title>
    <link href="http://jintang.github.io/2017/12/23/debounce%E4%B8%8Ethrottle/"/>
    <id>http://jintang.github.io/2017/12/23/debounce与throttle/</id>
    <published>2017-12-23T06:31:00.000Z</published>
    <updated>2018-09-13T07:14:17.280Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noopener">David Corbacho’s article</a></li><li><a href="https://lodash.com/docs/4.17.4#debounce" target="_blank" rel="noopener">官方文档</a></li></ul><blockquote><p>在<code>lodash</code>的方法里，有两个比较有趣的方法：<code>debounce</code>与<code>throttle</code>，这两个方法是用来限制连续事件的触发频率的。具体的使用请查看<a href="https://lodash.com/docs/4.17.4#debounce" target="_blank" rel="noopener">官方文档</a>。</p></blockquote><h2 id="debounce-防抖"><a href="#debounce-防抖" class="headerlink" title="debounce: 防抖"></a>debounce: 防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.debounce(func, [wait=<span class="number">0</span>], [options=&#123;</span><br><span class="line">    leading: <span class="literal">false</span>,</span><br><span class="line">    maxWait: <span class="built_in">Number</span>,</span><br><span class="line">    trailing: <span class="literal">true</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p><strong>作用：</strong>连续触发的事件，如果一直在触发，没有中途暂停且暂停时间超过<code>wait</code>,那么这些事件会合并为一次，直到暂停时间超过<code>wait</code>时执行。然后判断下一轮…直到事件最后一次触发。<br><strong>使用：</strong><br><code>debounce()</code>接受一些配置参数，返回一个 <em>new debounced function</em>，这个对象拥有<code>cancel</code>、<code>flush</code>方法，这两个方法都不咋用，就看看配置参数就行了。<br>默认的效果图：<br><img src="http://7xphbb.com1.z0.glb.clouddn.com/debounce.webp" alt="debounce默认效果图"><br>使用<code>leading</code>属性的效果图：<br><img src="http://7xphbb.com1.z0.glb.clouddn.com/debounce-leading.webp" alt="debounce使用leading属性的效果图"><br>所以，当设置<code>leading:true, trailing: false</code>时会在<code>wait</code>时间段的开始触发合并后的事件。</p><a id="more"></a><p><em>注意：</em><code>leading: true,trailing: true</code>时同默认情况<br>自己尝试一下,鼠标在<em>trigger area</em>上不停的动:</p><div style="min-width:900px;transform:translateX(-50%);margin-left:50%;margin-bottom:-85px"><br><p data-height="360" data-theme-id="0" data-slug-hash="GZWqNV" data-default-tab="result" data-user="dcorb" data-embed-version="2" data-pen-title="Debounce. Leading" class="codepen">See the Pen <a href="https://codepen.io/dcorb/pen/GZWqNV/" target="_blank" rel="noopener">Debounce. Leading</a> by Corbacho (<a href="https://codepen.io/dcorb" target="_blank" rel="noopener">@dcorb</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br></div><p>还有一个<code>maxWait</code>属性，请查看<strong>区别</strong>这一部分。<br><em>注意：</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WRONG</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   _.debounce(doSomething, <span class="number">300</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RIGHT</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, _.debounce(doSomething, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><p></p><p><strong>使用场景：</strong></p><ul><li><code>scroll</code>、<code>resize</code>、<code>输入验证</code>这种连续触发的事件，触发时运行某些代码，大多数时候你可能不需要每次事件都要运行这些代码。比如<code>input</code>输入时验证</li><li>有个新增弹框，为了防止快速点击两次确定按钮提交两次接口，可以使用<code>debounce</code></li></ul><h2 id="throttle：节流"><a href="#throttle：节流" class="headerlink" title="throttle：节流"></a>throttle：节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.throttle(func, [wait=<span class="number">0</span>], [options=&#123;</span><br><span class="line">    leading: <span class="literal">true</span>,</span><br><span class="line">    trailing: <span class="literal">true</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p><strong>作用：</strong>连续触发的事件，如果一直在触发，不论有没有中途暂停,<code>wait</code>时间段里的事件会被合并为一次。<br><strong>使用：</strong><br>参数少了个<code>maxWait</code>，其他的不论是参数还是返回值和<code>debounce</code>都一样。<br>自己尝试一下，无限滚动：</p><div style="min-width:900px;transform:translateX(-50%);margin-left:50%;margin-bottom:-85px"><br><p data-height="500" data-theme-id="0" data-slug-hash="eJLMxa" data-default-tab="result" data-user="dcorb" data-embed-version="2" data-pen-title="Infinite scrolling throttled" class="codepen">See the Pen <a href="https://codepen.io/dcorb/pen/eJLMxa/" target="_blank" rel="noopener">Infinite scrolling throttled</a> by Corbacho (<a href="https://codepen.io/dcorb" target="_blank" rel="noopener">@dcorb</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br></div><p><strong>使用场景：</strong></p><ul><li><code>scroll</code>无限滚动翻页，此时不能用<code>debounce</code>，因为一直连续触发，只要你没有中间暂停时间超过<code>wait</code>，那你滚动的那么多事件都会合并为一次。此时用<code>throttle</code>,连续触发的事件在每<code>wait</code>事件内触发的多次会合并为一次，还是可以连续触发，只不过频率降低了</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>这两个方法非常相似，都降低了触发频率，只有一点细微的差别：<br><code>throttle</code>方法其实是加了<code>maxWait</code>选项的<code>debounce</code>方法，<code>lodash</code>的源码中就可以看到。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> leading = <span class="literal">true</span>,</span><br><span class="line">      trailing = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func != <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(FUNC_ERROR_TEXT);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isObject(options)) &#123;</span><br><span class="line">    leading = <span class="string">'leading'</span> <span class="keyword">in</span> options ? !!options.leading : leading;</span><br><span class="line">    trailing = <span class="string">'trailing'</span> <span class="keyword">in</span> options ? !!options.trailing : trailing;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounce(func, wait, &#123;</span><br><span class="line">    <span class="string">'leading'</span>: leading,</span><br><span class="line">    <span class="string">'maxWait'</span>: wait,</span><br><span class="line">    <span class="string">'trailing'</span>: trailing</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结语：</strong><br>大神David Corbacho说建议直接使用<code>lodash</code>或<code>underscore</code>的这两个方法。这里放下源码的地址：<a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener">debounce</a>,利用的是<code>setTimeout</code>方法实现这种效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/debouncing-throttling-explained-examples/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;David Corbacho’s article&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lodash.com/docs/4.17.4#debounce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;在&lt;code&gt;lodash&lt;/code&gt;的方法里，有两个比较有趣的方法：&lt;code&gt;debounce&lt;/code&gt;与&lt;code&gt;throttle&lt;/code&gt;，这两个方法是用来限制连续事件的触发频率的。具体的使用请查看&lt;a href=&quot;https://lodash.com/docs/4.17.4#debounce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;debounce-防抖&quot;&gt;&lt;a href=&quot;#debounce-防抖&quot; class=&quot;headerlink&quot; title=&quot;debounce: 防抖&quot;&gt;&lt;/a&gt;debounce: 防抖&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_.debounce(func, [wait=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], [options=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    leading: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxWait: &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    trailing: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;连续触发的事件，如果一直在触发，没有中途暂停且暂停时间超过&lt;code&gt;wait&lt;/code&gt;,那么这些事件会合并为一次，直到暂停时间超过&lt;code&gt;wait&lt;/code&gt;时执行。然后判断下一轮…直到事件最后一次触发。&lt;br&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;debounce()&lt;/code&gt;接受一些配置参数，返回一个 &lt;em&gt;new debounced function&lt;/em&gt;，这个对象拥有&lt;code&gt;cancel&lt;/code&gt;、&lt;code&gt;flush&lt;/code&gt;方法，这两个方法都不咋用，就看看配置参数就行了。&lt;br&gt;默认的效果图：&lt;br&gt;&lt;img src=&quot;http://7xphbb.com1.z0.glb.clouddn.com/debounce.webp&quot; alt=&quot;debounce默认效果图&quot;&gt;&lt;br&gt;使用&lt;code&gt;leading&lt;/code&gt;属性的效果图：&lt;br&gt;&lt;img src=&quot;http://7xphbb.com1.z0.glb.clouddn.com/debounce-leading.webp&quot; alt=&quot;debounce使用leading属性的效果图&quot;&gt;&lt;br&gt;所以，当设置&lt;code&gt;leading:true, trailing: false&lt;/code&gt;时会在&lt;code&gt;wait&lt;/code&gt;时间段的开始触发合并后的事件。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://jintang.github.io/categories/Javascript/"/>
    
    
      <category term="前端" scheme="http://jintang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue静态资源放在src/assets与static目录下的区别</title>
    <link href="http://jintang.github.io/2017/11/03/vue%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%94%BE%E5%9C%A8src-assets%E4%B8%8Estatic%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jintang.github.io/2017/11/03/vue静态资源放在src-assets与static目录下的区别/</id>
    <published>2017-11-03T01:22:02.000Z</published>
    <updated>2018-08-12T07:26:35.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><a href="http://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">官方链接</a></li><li><a href="https://segmentfault.com/q/1010000009842688" target="_blank" rel="noopener">翻译链接</a></li></ul></blockquote><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>为了回答这个问题，我们首先需要了解Webpack如何处理静态资产。在 <code>*.vue</code>组件中，所有模板和CSS都会被 <code>vue-html-loader</code> 及 <code>css-loader</code> 解析，并查找资源URL。例如，在 <code>&lt;img src=&quot;./logo.png&quot;&gt; 和 background: url(./logo.png)</code> 中，<code>&quot;./logo.png&quot;</code>是相对的资源路径，将由<strong>Webpack</strong>解析为模块依赖。</p><p>因为 <code>logo.png</code> 不是 JavaScript，当被视为模块依赖时，需要使用 <code>url-loader</code> 和 <code>file-loader</code>处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。</p><p>由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将Webpack 处理的静态资源放在 <code>/src</code> 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 <code>/src/assets</code>：可以用<code>模块/组件</code>的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。<br><a id="more"></a></p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>相比之下，<code>static/</code> 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终目录（默认是<code>dist/static</code>）下。必须使用绝对路径引用这些文件，这是通过在 <code>config.js</code> 文件中的 <code>build.assetsPublicPath</code> 和 <code>build.assetsSubDirectory</code> 连接来确定的。</p><p>任何放在 <code>static/</code> 中文件需要以绝对路径的形式引用：<code>/static/[filename]</code>。如果更改 <code>assetSubDirectory</code> 的值为 <code>assets</code>，那么路径需改为 <code>/assets/[filename]</code>。</p><h2 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"filterIcon(item.pollingState)"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pollingIcon"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            filterIcon(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> commonUrl = <span class="string">'../../../../static/images/assetpolling/'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> commonUrl + <span class="string">'pollingSuccess.png'</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> commonUrl + <span class="string">'pollingLoading.gif'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>src</code>的值是一个变量，放在<code>staic</code>下能访问到图片，放在<code>assets</code>下访问不到。如果是一个字符串常量，<code>static</code>和<code>assets</code>下都可以访问到。</p><p><strong>分析：</strong>官方说，在 <code>*.vue</code>组件中，所有模板和CSS都会被 <code>vue-html-loader</code> 及 <code>css-loader</code> 解析，并查找资源URL。所以对应的资源如果是个字符串常量，在<strong>编译期</strong>就已经被解析为<code>Base64</code>与代码融合为一体。而如果<code>src</code>对应的是个变量，只有在<strong>运行期</strong>才会被解析，这时候就访问不到<code>assets</code>目录下的资源了。</p><p><strong>结论:</strong>当资源对应的是变量时，资源放在<code>static</code>下。第三方的类库的资源也放在<code>static</code>下。其他时候个人感觉相同。</p><p><em>tip: 如果有不对的地方请留言</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://vuejs-templates.github.io/webpack/static.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方链接&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000009842688&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;翻译链接&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;官方解释&quot;&gt;&lt;a href=&quot;#官方解释&quot; class=&quot;headerlink&quot; title=&quot;官方解释&quot;&gt;&lt;/a&gt;官方解释&lt;/h2&gt;&lt;h3 id=&quot;Assets&quot;&gt;&lt;a href=&quot;#Assets&quot; class=&quot;headerlink&quot; title=&quot;Assets&quot;&gt;&lt;/a&gt;Assets&lt;/h3&gt;&lt;p&gt;为了回答这个问题，我们首先需要了解Webpack如何处理静态资产。在 &lt;code&gt;*.vue&lt;/code&gt;组件中，所有模板和CSS都会被 &lt;code&gt;vue-html-loader&lt;/code&gt; 及 &lt;code&gt;css-loader&lt;/code&gt; 解析，并查找资源URL。例如，在 &lt;code&gt;&amp;lt;img src=&amp;quot;./logo.png&amp;quot;&amp;gt; 和 background: url(./logo.png)&lt;/code&gt; 中，&lt;code&gt;&amp;quot;./logo.png&amp;quot;&lt;/code&gt;是相对的资源路径，将由&lt;strong&gt;Webpack&lt;/strong&gt;解析为模块依赖。&lt;/p&gt;&lt;p&gt;因为 &lt;code&gt;logo.png&lt;/code&gt; 不是 JavaScript，当被视为模块依赖时，需要使用 &lt;code&gt;url-loader&lt;/code&gt; 和 &lt;code&gt;file-loader&lt;/code&gt;处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。&lt;/p&gt;&lt;p&gt;由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将Webpack 处理的静态资源放在 &lt;code&gt;/src&lt;/code&gt; 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 &lt;code&gt;/src/assets&lt;/code&gt;：可以用&lt;code&gt;模块/组件&lt;/code&gt;的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://jintang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://jintang.github.io/tags/vue/"/>
    
      <category term="webpack" scheme="http://jintang.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>各种环境下使用es6</title>
    <link href="http://jintang.github.io/2017/09/28/%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8es6/"/>
    <id>http://jintang.github.io/2017/09/28/各种环境下使用es6/</id>
    <published>2017-09-28T06:07:23.000Z</published>
    <updated>2018-08-12T07:26:35.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不讲为什么使用es6，只讲es6如何在各种环境下使用。目前浏览器…环境都不支持es6，所以我们需要<a href="http://babeljs.cn/" target="_blank" rel="noopener">babel</a></p></blockquote><h2 id="浏览器中使用"><a href="#浏览器中使用" class="headerlink" title="浏览器中使用"></a>浏览器中使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/babel-core/browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"> <span class="comment">// 注意type</span></span></span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  test() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> test = <span class="keyword">new</span> Test;</span></span><br><span class="line"><span class="actionscript">test.test(); <span class="comment">// "test"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong><code>Babel</code>可以用于浏览器环境,但是从<code>Babel 6.0</code>开始，不再直接提供浏览器版本，而是要用构建工具构建出来。所以，我们只是做简单的<code>html</code>时，又不想使用构建工具，可以通过<code>安装5.x版本的babel-core模块获取</code>。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core@5</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="命令行转换使用"><a href="#命令行转换使用" class="headerlink" title="命令行转换使用"></a>命令行转换使用</h2><p>我们创建了一个用<code>es6</code>写的js文件，想要运行，但是不想使用构建工具,可以使用<code>babel</code>提供的命令行工具。</p><ol><li><p>安装命令行工具:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cli -g // 全局安装</span><br></pre></td></tr></table></figure></li><li><p>配置编译规则</p><ul><li><p>添加<code>babel</code>用来转换的依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ES2015转码规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-es2015</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-3</span></span><br></pre></td></tr></table></figure></li><li><p>在根目录下创建<code>.babelrc</code>文件并添加配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是为了演示添加的简单配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用：<br>放个<a href="http://babeljs.cn/docs/usage/cli/" target="_blank" rel="noopener">官方链接</a>，懒得写了。<br>因为我不想让<code>babel</code>编译了之后重新生成个文件，所以我一般用<code>babel-node</code>命令测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-node 文件名</span><br></pre></td></tr></table></figure><p>即可在命令行看到结果。</p></li></ol><h2 id="构建工具中使用"><a href="#构建工具中使用" class="headerlink" title="构建工具中使用"></a>构建工具中使用</h2><p>…未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;不讲为什么使用es6，只讲es6如何在各种环境下使用。目前浏览器…环境都不支持es6，所以我们需要&lt;a href=&quot;http://babeljs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babel&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;浏览器中使用&quot;&gt;&lt;a href=&quot;#浏览器中使用&quot; class=&quot;headerlink&quot; title=&quot;浏览器中使用&quot;&gt;&lt;/a&gt;浏览器中使用&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;node_modules/babel-core/browser.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 注意type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  test() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Test;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;test.test(); &lt;span class=&quot;comment&quot;&gt;// &quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;Babel&lt;/code&gt;可以用于浏览器环境,但是从&lt;code&gt;Babel 6.0&lt;/code&gt;开始，不再直接提供浏览器版本，而是要用构建工具构建出来。所以，我们只是做简单的&lt;code&gt;html&lt;/code&gt;时，又不想使用构建工具，可以通过&lt;code&gt;安装5.x版本的babel-core模块获取&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install babel-core@5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://jintang.github.io/categories/Javascript/"/>
    
    
      <category term="es6" scheme="http://jintang.github.io/tags/es6/"/>
    
      <category term="babel" scheme="http://jintang.github.io/tags/babel/"/>
    
  </entry>
  
</feed>
