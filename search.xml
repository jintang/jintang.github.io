<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[开发部署以太坊DAPP]]></title>
      <url>http://jintang.github.io/2018/10/26/%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%A4%AA%E5%9D%8ADAPP/</url>
      <content type="html"><![CDATA[<blockquote><p>参考链接： <a href="https://learnblockchain.cn/2018/04/15/web3-html/" target="_blank" rel="noopener">Web3与智能合约交互实战</a></p></blockquote><p><strong>DApp</strong> 是 <strong>Decentralized Application</strong> 的简称，及去中心化应用。DAPP 由客户端和合约端配合实现。<br>我们使用 <a href="https://solidity-cn.readthedocs.io/zh/develop/solidity-in-depth.html" target="_blank" rel="noopener">Solidity</a> 语言编写完合约后，之前我们使用了 <code>geth</code> 与之交互， 而这种命令行的方式太过繁琐，所以我们这儿用到了 <code>Web3.js</code>。</p><p><strong>Web3.js</strong> 是以太坊官方的Javascript API，可以帮助智能合约开发者使用HTTP或者IPC与本地的或者远程的以太坊节点交互。实际上就是一个库的集合，主要包括下面几个库：</p><ul><li>web3-eth 用来与以太坊区块链和智能合约交互</li><li>web3-shh 用来控制whisper协议与p2p通信以及广播</li><li>web3-bzz 用来与swarm协议交互</li><li>web3-utils 包含了一些Dapp开发有用的功能</li></ul><p>这儿我们主要用到了 <code>web3-eth</code>。下面开始</p><h2 id="使用-ganache-生成一条私有链"><a href="#使用-ganache-生成一条私有链" class="headerlink" title="使用 ganache 生成一条私有链"></a>使用 ganache 生成一条私有链</h2><p>ganache 是一个可以一键搭建以太坊区块链测试环境的工具。 启动之后默认会生成 10 个账号， 我们的私有链默认运行在 <a href="http://127.0.0.1:7545" target="_blank" rel="noopener">http://127.0.0.1:7545</a>上。<br><a id="more"></a></p><h2 id="编写合约"><a href="#编写合约" class="headerlink" title="编写合约"></a>编写合约</h2><p>我们使用在线的 <a href="http://remix.ethereum.org/#optimize=true&amp;version=soljson-v0.4.25+commit.59dbf8f1.js" target="_blank" rel="noopener">Remix IDE</a> 来编写代码。</p><p><em>InfoContract.sol</em>:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract InfoContract &#123;</span><br><span class="line">    </span><br><span class="line">  string fName;</span><br><span class="line">  uint age;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setInfo</span>(<span class="params">string _fName, uint _age</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    fName = _fName;</span><br><span class="line">    age = _age;</span><br><span class="line">    emit Instructor(_fName, _age);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">string, uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (fName, age);</span><br><span class="line">  &#125;   </span><br><span class="line">   </span><br><span class="line">  event Instructor(</span><br><span class="line">    string name,</span><br><span class="line">    uint age</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>代码很简单，就是简单的给name和age变量赋值与读取。 并在赋值的时候触发了一个 Instructor 事件。</p><p><a href="https://solidity-cn.readthedocs.io/zh/develop/solidity-in-depth.html" target="_blank" rel="noopener">Solidity</a> 里有很多高级的用法，你还可以给事件添加过滤器…这儿只用了最简单的。</p><h2 id="编译与部署合约"><a href="#编译与部署合约" class="headerlink" title="编译与部署合约"></a>编译与部署合约</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>选择 <code>Start to compile</code>， 编译成功会出现绿色的合约名称，失败则提示相应的错误信息。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>切换到 run 的 tab 下，将 Environment 切换成 <code>Web3 Provider</code>，并输入我们的测试链的地址 <a href="http://127.0.0.1:7545" target="_blank" rel="noopener">http://127.0.0.1:7545</a>, Environment 选项的含义为：</p><ul><li><strong>Javascript VM</strong> ：简单的Javascript虚拟机环境，纯粹练习智能合约编写的时候可以选择</li><li><strong>Injected Web3</strong> ：连接到嵌入到页面的Web3，比如连接到MetaMask</li><li><strong>Web3 Provider</strong> ：连接到自定义的节点，如私有的测试网络。</li></ul><p>然后选择 <code>Deploy</code> ,成功后会在 <code>Deployed Contracts</code> 下显示部署成功的合约。并且在 <strong>Remix IDE</strong> 终端下显示合约创建的交易信息。同时，在 ganache 中也生成了对应的区块和交易信息。</p><h2 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h2><p>为了与合约交互，我们使用 <code>web3.js</code> 。</p><h3 id="新建项目并安装-web3-js"><a href="#新建项目并安装-web3-js" class="headerlink" title="新建项目并安装 web3.js"></a>新建项目并安装 web3.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir simple-DAPP &amp;&amp; <span class="built_in">cd</span> simple-DAPP</span><br><span class="line">npm init</span><br><span class="line">npm install web3 -D</span><br></pre></td></tr></table></figure><h3 id="构建页面与交互逻辑"><a href="#构建页面与交互逻辑" class="headerlink" title="构建页面与交互逻辑"></a>构建页面与交互逻辑</h3><p>页面、样式省略，下面说下 js 中需要注意的部分。</p><ol><li>创建 web3 :<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line">    web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:7545"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>上面是 web3 官方的创建方法，本例中的 web3 是通过 <a href="http://localhost:7545" target="_blank" rel="noopener">http://localhost:7545</a> 创建的。而如果你使用类似 <code>MetaMask</code> （一个 Chrome 上的插件，迷你型以太坊钱包）这样的软件，provider 就会被自动植入。</p><ol start="2"><li><p>绑定账号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.defaultAccount = web3.eth.accounts[<span class="number">0</span>]; <span class="comment">// ganache生成的10个账号中随便取一个作为默认账号</span></span><br></pre></td></tr></table></figure></li><li><p>通过 ABI 创建一个Solidity的合约对象，用来在某个地址上初始化合约<br><code>Application Binary Interface(ABI)</code> 是从区块链外部与合约进行交互以及合约与合约间进行交互的一种标准方式。事实上， <code>Solidity</code> 里的合约的含义就是它的 函数 和 数据（它的 状态 ），它们位于以太坊区块链的一个特定地址上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abi 通过 Remix IDE 的 compile 面板下 ABI 按钮复制</span></span><br><span class="line"><span class="keyword">let</span> infoContract = web3.eth.contract(abi);</span><br></pre></td></tr></table></figure></li></ol><p>这是此合约生成的 ABI :<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">"constant"</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">"inputs"</span>: [</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"_fName"</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"_age"</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"uint256"</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"setInfo"</span>,</span><br><span class="line">		<span class="attr">"outputs"</span>: [],</span><br><span class="line">		<span class="attr">"payable"</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">"stateMutability"</span>: <span class="string">"nonpayable"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"function"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">"anonymous"</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">"inputs"</span>: [</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"indexed"</span>: <span class="literal">false</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"indexed"</span>: <span class="literal">false</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"age"</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"uint256"</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"Instructor"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"event"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">"constant"</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">"inputs"</span>: [],</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"getInfo"</span>,</span><br><span class="line">		<span class="attr">"outputs"</span>: [</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"uint256"</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"payable"</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">"stateMutability"</span>: <span class="string">"view"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"function"</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>可以看到这是对合约里函数的描述。此合约里没有状态，</p><ol start="4"><li>通过合约地址获取合约实例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合约地址 在 Remix IDE 的 run 面板 —— Deployed Contracts 下</span></span><br><span class="line"><span class="keyword">let</span> info = infoContract.at(<span class="string">'合约地址'</span>);</span><br></pre></td></tr></table></figure></li></ol><p>然后就可以使用合约里的函数和事件了，详细查看 <a href="https://github.com/jintangWang/simple-DAPP/blob/master/main.js" target="_blank" rel="noopener">demo</a></p><p><strong>至此：</strong> <code>DAPP</code> 的 客户端 编写完成。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我通过 webpack 启动了客户端，每次点击 <code>Update Info</code> 按钮都会生成一条交易。<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/dapp_transcation.png" alt="dapp_transcation"><br>交易可以看作是从一个帐户发送到另一个帐户的消息。它能包含一个二进制数据（合约负载）和以太币。如果目标账户含有代码，此代码会被执行，并以 payload 作为入参。如果目标账户是零账户（账户地址为 0 )，此交易将创建一个 新合约 。 如前文所述，合约的地址不是零地址，而是通过合约创建者的地址和从该地址发出过的交易数量计算得到的（所谓的“nonce”）</p><p><em>说明：</em> 一经创建，每笔交易都收取一定数量的 gas 。无论执行到什么位置，一旦 gas 被耗尽（比如降为负值），将会触发一个 <code>out-of-gas</code> 异常。当前调用帧（call frame）所做的所有状态修改都将被回滚。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以用下图来描述 <code>DAPP</code> 的原理。<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/DAPP_theory.png" alt="DAPP_theory"><br>我们的 demo 完成了 客户端 和 合约端。</p>]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DAPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用truffle框架开发部署以太坊DAPP]]></title>
      <url>http://jintang.github.io/2018/10/11/%E7%94%A8truffle%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%A4%AA%E5%9D%8ADAPP/</url>
      <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="https://truffleframework.com/tutorials/pet-shop" target="_blank" rel="noopener">ETHEREUM PET SHOP – YOUR FIRST DAPP</a></p></blockquote><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li><p><a href="https://truffleframework.com" target="_blank" rel="noopener">Truffle</a>: 以太坊Solidity编程语言开发框架。安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g truffle</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://truffleframework.com/ganache" target="_blank" rel="noopener">Ganache</a>: 前身testRPC，可以启动一个个人的以太坊私有链用作测试、执行命令、检测区块执行状态。点击前面的连接下载客户端即可。</p></li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ol><li><p>建立项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir pet-shop &amp;&amp; <span class="built_in">cd</span> pet-shop</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>truffle unbox</code> 创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">truffle unbox pet-shop</span><br><span class="line"><span class="comment"># Downloading...</span></span><br><span class="line"><span class="comment"># Unpacking...</span></span><br><span class="line"><span class="comment"># Setting up...</span></span><br><span class="line"><span class="comment"># Unbox successful. Sweet!</span></span><br></pre></td></tr></table></figure></li></ol><p><em>注:</em> 我们可以使用 <code>truffle unbox &lt;box-name&gt;</code> 下载任意的 Truffle Boxes。 在 <a href="https://truffleframework.com/boxes" target="_blank" rel="noopener">truffle box 仓库</a> 可以看到很多 Box , 上面我们下载的是 <a href="https://truffleframework.com/boxes/pet-shop" target="_blank" rel="noopener">pet-shop box</a></p><p>下载完成后,可以看到下面这些重要的目录和文件：</p><ul><li>contracts/ 智能合约的文件夹，所有的智能合约文件都放置在这里，里面包含一个重要的合约Migrations.sol</li><li>migrations/ 用来处理部署（迁移）智能合约 ，迁移是一个额外特别的合约用来保存合约的变化。</li><li>test/ 智能合约测试用例文件夹</li><li>truffle.js 配置文件</li></ul><a id="more"></a><h2 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约"></a>编写智能合约</h2><p>在contracts目录下，添加合约文件Adoption.sol</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.17</span>;</span><br><span class="line"></span><br><span class="line">contract Adoption &#123;</span><br><span class="line"></span><br><span class="line">  address[<span class="number">16</span>] public adopters;  <span class="comment">// 保存领养者的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 领养宠物</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">adopt</span>(<span class="params">uint petId</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(petId &gt;= <span class="number">0</span> &amp;&amp; petId &lt;= <span class="number">15</span>);  <span class="comment">// 确保id在数组长度内</span></span><br><span class="line"></span><br><span class="line">    adopters[petId] = msg.sender;        <span class="comment">// msg.sender 表示调用此方法的人或者智能合约</span></span><br><span class="line">    <span class="keyword">return</span> petId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回领养者</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAdopters</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address[<span class="number">16</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> adopters;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译部署智能合约"><a href="#编译部署智能合约" class="headerlink" title="编译部署智能合约"></a>编译部署智能合约</h2><p>在项目根目录下：</p><p><strong>编译：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">truffle compile</span><br><span class="line"><span class="comment"># Compiling ./contracts/Adoption.sol...</span></span><br><span class="line"><span class="comment"># Writing artifacts to ./build/contracts</span></span><br></pre></td></tr></table></figure><p></p><p><strong>部署</strong>:</p><p>在 migrations 文件夹下已经有一个 <code>1_initial_migration.js</code> 部署脚本，用来部署 <code>Migrations.sol</code> 合约。</p><p><code>Migrations.sol</code> 用来确保不会部署相同的合约。</p><p>我们来创建一个自己的部署脚本 <code>2_deploy_contracts.js</code><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Adoption = artifacts.require(<span class="string">"Adoption"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Adoption);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>在执行部署之前，需要确保有一个区块链运行, 可以使用 Ganache 来开启一个私链。 Ganache 启动之后默认会在 7545 端口上运行一个开发链，然后执行下面的命令将合约部署到链上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">truffle  migrate</span><br><span class="line"><span class="comment"># Using network 'development'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Running migration: 1_initial_migration.js</span></span><br><span class="line"><span class="comment">#  Deploying Migrations...</span></span><br><span class="line"><span class="comment">#  ... 0xcc1a5aea7c0a8257ba3ae366b83af2d257d73a5772e84393b0576065bf24aedf</span></span><br><span class="line"><span class="comment">#  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0</span></span><br><span class="line"><span class="comment"># Saving successful migration to network...</span></span><br><span class="line"><span class="comment">#  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956</span></span><br><span class="line"><span class="comment"># Saving artifacts...</span></span><br><span class="line"><span class="comment"># Running migration: 2_deploy_contracts.js</span></span><br><span class="line"><span class="comment">#  Deploying Adoption...</span></span><br><span class="line"><span class="comment">#  ... 0x43b6a6888c90c38568d4f9ea494b9e2a22f55e506a8197938fb1bb6e5eaa5d34</span></span><br><span class="line"><span class="comment">#  Adoption: 0x345ca3e014aaf5dca488057592ee47305d9b3e10</span></span><br><span class="line"><span class="comment"># Saving successful migration to network...</span></span><br><span class="line"><span class="comment">#  ... 0xf36163615f41ef7ed8f4a8f192149a0bf633fe1a2398ce001bf44c43dc7bdda0</span></span><br><span class="line"><span class="comment"># Saving artifacts...</span></span><br></pre></td></tr></table></figure><p>在打开的Ganache里可以看到区块链状态的变化，现在产生了4个区块。并且发现账号下刚开始的 100 个 <code>eth</code> 少了 零点几 个</p><p>这时说明已经智能合约已经部署好了。</p><h2 id="创建用户接口和智能合约交互"><a href="#创建用户接口和智能合约交互" class="headerlink" title="创建用户接口和智能合约交互"></a>创建用户接口和智能合约交互</h2><p>我们已经编写和部署及测试好了我们的合约，接下我们为合约编写UI，让合约真正可以用起来。</p><p>在Truffle Box <code>pet-shop</code>里，已经包含了应用的前端代码，代码在 <code>src/</code> 文件夹下。</p><p>修改 <code>src/js/app.js</code> 部分代码：</p><h3 id="初始化-web3-实例，修改-initWeb3-为："><a href="#初始化-web3-实例，修改-initWeb3-为：" class="headerlink" title="初始化 web3 实例，修改 initWeb3() 为："></a>初始化 <a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3</a> 实例，修改 <code>initWeb3()</code> 为：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">initWeb3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Is there an injected web3 instance?</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        App.web3Provider = web3.currentProvider;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If no injected web3 instance is detected, fall back to Ganache</span></span><br><span class="line">        App.web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:7545'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    web3 = <span class="keyword">new</span> Web3(App.web3Provider);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> App.initContract();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化合约，修改-initContract-为："><a href="#实例化合约，修改-initContract-为：" class="headerlink" title="实例化合约，修改 initContract() 为："></a>实例化合约，修改 <code>initContract()</code> 为：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">initContract: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.getJSON(<span class="string">'Adoption.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Get the necessary contract artifact file and instantiate it with truffle-contract</span></span><br><span class="line">        <span class="keyword">var</span> AdoptionArtifact = data;</span><br><span class="line">        <span class="comment">// 通过 truffle-contract.js 创建与我们交互的合约实例</span></span><br><span class="line">        App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Set the provider for our contract</span></span><br><span class="line">        App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Use our contract to retrieve and mark the adopted pets</span></span><br><span class="line">        <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> App.bindEvents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>说明：</em> Artifacts 是关于合约的信息。比如部署地址和 ABI(Application Binary Interface)。ABI 是一个 js 对象，定义了如何与智能合约交互</p><h3 id="处理领养"><a href="#处理领养" class="headerlink" title="处理领养"></a>处理领养</h3><p>修改 <code>markAdopted()</code> 为：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">markAdopted: <span class="function"><span class="keyword">function</span>(<span class="params">adopters, account</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">    App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">        adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用合约的getAdopters(), 用call读取链上的信息不用消耗gas</span></span><br><span class="line">        <span class="keyword">return</span> adoptionInstance.getAdopters.call();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">adopters</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; adopters.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果宠物已经被收养了，不允许重复收养</span></span><br><span class="line">            <span class="keyword">if</span> (adopters[i] !== <span class="string">'0x0000000000000000000000000000000000000000'</span>) &#123;</span><br><span class="line">                $(<span class="string">'.panel-pet'</span>).eq(i).find(<span class="string">'button'</span>).text(<span class="string">'Success'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>修改 <code>handleAdopt()</code> 为：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">handleAdopt: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> petId = <span class="built_in">parseInt</span>($(event.target).data(<span class="string">'id'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户账号</span></span><br><span class="line">    web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">error, accounts</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> account = accounts[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">        App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">            adoptionInstance = instance;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 调用 Adoption.sol 里的 adopt 方法发起领养宠物交易</span></span><br><span class="line">            <span class="keyword">return</span> adoptionInstance.adopt(petId, &#123;<span class="attr">from</span>: account&#125;);</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err.message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>注：</em> 收养宠物是一个交易而不是 call ,交易需要支付 <code>gas</code> 。 <code>gas</code> 是智能合约计算和存储数据需要付出的费用，和 <code>eth</code> 之间有一个换算方法。</p><h2 id="在浏览器中运行"><a href="#在浏览器中运行" class="headerlink" title="在浏览器中运行"></a>在浏览器中运行</h2><h3 id="安装-MetaMask"><a href="#安装-MetaMask" class="headerlink" title="安装 MetaMask"></a>安装 MetaMask</h3><p>MetaMask 是一款浏览器插件形式的以太坊轻客户端，允许你不下载整个以太坊节点而在浏览器中运行以太坊的 DAPP</p><h3 id="配置钱包"><a href="#配置钱包" class="headerlink" title="配置钱包"></a>配置钱包</h3><p>我们通过还原一个Ganache为我们创建好的钱包，作为我们的开发测试钱包。<br>打开 MetaMask ，选择 <strong>Import using account seed phrase</strong>, 输入Ganache显示的助记词。<br>我的是：<br></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">heavy</span> <span class="keyword">best </span>inner hobby chef <span class="keyword">bread </span><span class="meta">entry</span> oyster dose float napkin media</span><br></pre></td></tr></table></figure><p></p><p>配置密码之后即可看到账号，里面有 100 个初始 <code>eth</code></p><h3 id="连接开发区块链网络"><a href="#连接开发区块链网络" class="headerlink" title="连接开发区块链网络"></a>连接开发区块链网络</h3><p>在 MetaMask 的 Networks 里选择 <strong>Custom RPC</strong> , 添加一个网络：<a href="http://127.0.0.1:7545" target="_blank" rel="noopener">http://127.0.0.1:7545</a> 即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>Truffle Box <code>pet-shop</code> 里人家提供了一个服务: lite-server。</p><p><code>bs-config.json</code> 指示了lite-server的工作目录。<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseDir"</span>: [<span class="string">"./src"</span>, <span class="string">"./build/contracts"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>./src 是网站文件目录</p><p>./build/contracts 是合约输出目录</p><p>在 <code>package.json</code> 中已配置了：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "lite-server",</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们只需要运行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p></p><p>然后就可以在 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 访问到此 DAPP 了。如果你收养了宠物，也会在 MetaMask 与 Ganache 中显示你账号的交易信息</p><p><strong>Over</strong></p>]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DAPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react vs vue]]></title>
      <url>http://jintang.github.io/2018/09/05/react-vs-vue/</url>
      <content type="html"><![CDATA[<blockquote><p>先接触了 <code>vue</code> ，感觉 <code>vue</code> 特别方便，优雅的想让你上瘾。后面接触了 <code>react native</code> 开发 App， 过来过去都感觉不适应，再慢慢用过一段日子之后，感觉 <code>react</code> 也有自己鲜明的特点，在使用 <code>react</code> 的时候，总想着和 <code>vue</code> 对比一下。由于自己使用 <code>react</code> 主要是在用 <code>react native</code>， 所以有些东西可能了解不深，望海涵。通过对比借此加深下理解的。</p></blockquote><table><thead><tr><th>Vue</th><th style="text-align:center">React</th><th style="text-align:center">补充说明</th></tr></thead><tbody><tr><td>Computed、watch</td><td style="text-align:center">React 不监听数据变化</td><td style="text-align:center">React可以使用 <code>mobx</code> 库来实现这些功能，在 vue 官方描述的 <a href="https://cn.vuejs.org/v2/guide/comparison.html#MobX" target="_blank" rel="noopener">对比其他框架</a> 里面有这样一句话： 在有限程度上，React + Mobx 也可以被认为是更繁琐的 Vue</td></tr><tr><td>v-model, 这只是通过语法糖定义了一个自定义指令，本质跟 React 一样. 修饰符<code>.async</code> 也是一样</td><td style="text-align:center">React是单向数据流，只能通过事件触发，然后再setState，React没有自定义指令</td><td style="text-align:center">/</td></tr><tr><td>传统 HTML标签渲染 / jsx render渲染</td><td style="text-align:center">jsx</td><td style="text-align:center">/</td></tr><tr><td>Vuex</td><td style="text-align:center">Redux</td><td style="text-align:center">react 有一个中间件react-redux 可以让我们方便的使用 Redux</td></tr><tr><td>EventBus 非父子组件通信</td><td style="text-align:center"><a href="https://github.com/mroderick/PubSubJS" target="_blank" rel="noopener">PubSubJS</a> 或 <a href="http://millermedeiros.github.io/js-signals/" target="_blank" rel="noopener">js-signals</a></td><td style="text-align:center">react-native 中还没用过，没遇到需要的场景</td></tr><tr><td>混入：mixins</td><td style="text-align:center">class组件不可用，在使用 <code>createReactClass</code> 创建 <code>React</code> 组件的时候可用 mixins</td><td style="text-align:center">我们可以要把 mixin 的东西写到单独的 js 文件里，通过 import 实现 mixin，这个本来就是锦上添花，不甚重要</td></tr><tr><td>slot</td><td style="text-align:center">props.chldren</td><td style="text-align:center">自定义组件获取使用时传入的子元素</td></tr><tr><td>自定义指令</td><td style="text-align:center">自己通过事件触发实现类似效果</td><td style="text-align:center">自定义指令可以实现类似于 限制 input 输入格式 等效果</td></tr></tbody></table><p>还有一些是两者非常类似的，只要会了一个，另一个也就会了：</p><ul><li>生命周期方法： 虽然名称不同，但使用一样</li><li>ref ： react 有多种使用 ref 的方法， 具体请看 <a href="https://jintang.github.io/2018/05/11/react-native%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/">另外一篇文章</a></li></ul><a id="more"></a><h2 id="React-补充"><a href="#React-补充" class="headerlink" title="React 补充"></a>React 补充</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>本质上来讲， <code>JSX</code> 只是为 <code>React.createElement(component, props, ...children)</code> 方法提供的语法糖， 所以文件中必须引入 <code>React</code> —— <code>import &#39;React&#39; from &#39;react&#39;</code></p><ul><li><code>JSX</code> 中使用的标签，小写代表内置组件，大写代表自定义组件。如 <code>&lt;div&gt;&lt;/div&gt;</code> 与 <code>&lt;Hello&gt;</code> 分别是内置组件和自定义组件</li><li><code>JSX</code> 可以直接使用的判断运算符： <code>&amp;&amp;</code> 、 <code>? :</code> ；可以直接使用的循环遍历方法： <code>map</code> ，因为 <code>map</code> 会返回一个新数组</li></ul><p><em>注意：</em> 循环渲染时，数组元素中使用的 <code>key</code> 在其兄弟之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的键。 另外 <code>key</code> 尽量不要使用 index 或其他随机数，如果数组重排的话 React 的差异比较算法会认为全部需要重新渲染。</p><h3 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">            &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;</span><br><span class="line">                Welcome</span><br><span class="line">            &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FancyBorder&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上我们定义了一个 <code>FancyBorder</code> 自定义组件， 那么它内部的 <code>props.children</code> 就是它的子元素，即 <code>&lt;h1&gt;</code> 包裹的那一段。</p><h3 id="构造函数是唯一能够初始化-this-state-的地方。而其他地方更新-state-只能用-setState-updater-callback"><a href="#构造函数是唯一能够初始化-this-state-的地方。而其他地方更新-state-只能用-setState-updater-callback" class="headerlink" title="构造函数是唯一能够初始化 this.state 的地方。而其他地方更新 state 只能用 setState(updater, [callback])"></a>构造函数是唯一能够初始化 this.state 的地方。而其他地方更新 <code>state</code> 只能用 <code>setState(updater, [callback])</code></h3><p><em>注意：</em> <code>setState()</code> 认为是一次请求而不是一次立即执行更新组件的命令。为了更为可观的性能， <code>React</code> 可能会推迟它，稍后会一次性更新这些组件。 <code>React</code> 不会保证在 <code>setState</code> 之后，能够立刻拿到改变的结果。</p><p>第一个参数 updater 如下:</p><ul><li>普通对象，最常见，如： <code>this.setState({name: &#39;小明&#39;})</code></li><li>updater函数，因为 this.state 可能是异步更新的，如果之后的状态依赖于之前的状态，此时就需要这种方式实现。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* Correct */</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">    counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><p>第二个参数在 <code>setState</code> 执行完成同时组件被重渲之后执行。通常，对于这类逻辑，我们推荐使用 <code>componentDidUpdate</code></p><h3 id="事件绑定-this-JSX-回调函数中的-this，类的方法默认是不会绑定-this-的"><a href="#事件绑定-this-JSX-回调函数中的-this，类的方法默认是不会绑定-this-的" class="headerlink" title="事件绑定 this : JSX 回调函数中的 this，类的方法默认是不会绑定 this 的"></a>事件绑定 this : <code>JSX</code> 回调函数中的 this，类的方法默认是不会绑定 this 的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">funciton handleClick1(param, e) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            <span class="comment">/* 1. 利用 bind, 此时 e 会是参数中的最后一个 */</span></span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick1.bind(<span class="keyword">this</span>， param)&#125;&gt;方法<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            /</span>* <span class="number">2.</span> 利用 箭头函数，需将 handleClick 定义为箭头函数格式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;this.handleClick2&#125;&gt;方法2&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><em>注意：</em> 事件回调事件不能通过 <code>reture false</code> 来阻止默认行为，必须得通过 <code>e.preventDefault()</code></p>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> react native </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链学习]]></title>
      <url>http://jintang.github.io/2018/08/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="Hash-函数"><a href="#Hash-函数" class="headerlink" title="Hash 函数"></a>Hash 函数</h3><p>区块链中区块相连是依靠：后一个区块持有前一个区块的 hash ，这个 hash 一般放在区块头中。 Hash 函数一般有两类：</p><ol><li>MD 系列： 如 MD5 ，已被证实不是特别安全</li><li>SH 系列： 是美国国家安全局 (NSA) 设计。经历了SHA-0，SHA-1，SHA-2，SHA-3系列发展，比特币采用SHA256算法，该算法属于SHA-2系列，在中本聪发明比特币时（2008）被公认为最安全最先进的算法之一</li></ol>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hello 智能合约]]></title>
      <url>http://jintang.github.io/2018/08/03/hello-%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      <content type="html"><![CDATA[<blockquote><p>欢迎查看 跟着大佬一起动手系列，点击<a href="https://learnblockchain.cn/2017/11/24/init-env/" target="_blank" rel="noopener">这儿</a>查看大佬的博文</p></blockquote><h2 id="什么是智能合约"><a href="#什么是智能合约" class="headerlink" title="什么是智能合约"></a>什么是智能合约</h2><p><strong>以太坊上的程序称之为智能合约，它是代码和数据(状态)的集合。</strong></p><p>如果做比喻的话智能合约更像是JAVA程序，JAVA程序通过JAVA虚拟机（JVM）将代码解释字节进行执行，以太坊的智能合约通过以太坊虚拟机（EVM）解释成字节码进行执行。</p><p>智能合约可以理解为在区块链上可以自动执行的（由消息驱动的）、以代码形式编写的合同（特殊的交易）。</p><p>比特币的交易是可以编程的，但是比特币脚本有很多的限制，能够编写的程序也有限，而以太坊具有 <a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7" target="_blank" rel="noopener">图灵完备</a>，通俗来说可以完全模拟一台计算机所能做的所有事情。比特币可以执行一些简单脚本，但是他就不是图灵完备，比如循环指令比特币就无法执行。</p><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>用户不可能直接编写以太坊虚拟机（EVM）字节码，所以以太坊提供了几种编写智能合约的高级语言。</p><p>Solidity：类似JavaScript，这是以太坊推荐的旗舰语言，也是最流行的智能合约语言。具体用法参加Solidity文档，地址：<a href="https://solidity.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/latest/</a></p><blockquote><p>还有Viper，Serpent，LLL及Bamboo，建议大家还是使用Solidity。Serpent官方已经不再推荐，建议Serpent的用户转换到Viper，他们都是类Python语言。</p></blockquote><p>可以根据不同的习惯选择不同的高级语言，目前最流行的是Solidity。</p><p>我们下面使用 <a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Browser-Solidity</a> IDE （也就是 Remix ）进行合约的编写和编译</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="以太坊客户端：-geth-安装"><a href="#以太坊客户端：-geth-安装" class="headerlink" title="以太坊客户端： geth 安装"></a>以太坊客户端： geth 安装</h3><p>在这儿我们使用 Geth ，全称是 go-ethereum，是以太坊的 go 语言命令行客户端，也是最流行的客户端 —— <a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">geth官方安装指引</a> 。</p><p>Geth提供了一个交互式命令控制台，通过命令控制台中包含了以太坊的各种功能（API）。拥有账户管理、挖矿、转账、智能合约的部署和执行等等功能。其中，EVM就是由以太坊客户端提供的。</p><blockquote><p>相对于Geth，Mist则是图形化操作界面的以太坊客户端。</p></blockquote><h3 id="使用geth启动环境"><a href="#使用geth启动环境" class="headerlink" title="使用geth启动环境"></a>使用geth启动环境</h3><blockquote><p>智能合约的开发需要使用以太坊的资源，所以是需要付费的，这个费用表现为 以太币。下面我们用 geth 启动开发者网络（模式）,会自动分配一个有大量余额的开发者账户给我们使用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir testNet --dev console 2&gt;&gt; test.log</span><br></pre></td></tr></table></figure><p>参数解析，更多请查看<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options" target="_blank" rel="noopener">这儿</a>:</p><ul><li><code>–dev</code> 启用开发者网络（模式），开发者网络会使用POA共识，默认预分配一个开发者账户并且会自动开启挖矿。</li><li><code>–datadir</code> 后面的参数是区块数据及秘钥存放目录。<br>第一次输入命令后，它会放在当前目录下新建一个testNet目录来存放数据。</li><li><code>console</code> 进入控制台</li><li><code>2&gt;&gt; test.log</code> 表示把控制台日志输出到test.log文件</li></ul><p>为了更好的理解，建议新开一个命令行终端，实时显示日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f test.log</span><br></pre></td></tr></table></figure><h3 id="准备账户"><a href="#准备账户" class="headerlink" title="准备账户"></a>准备账户</h3><p>智能合约的部署是指把合约字节码发布到区块链上，并使用一个特定的地址来标示这个合约，这个地址称为合约账户。</p><blockquote><p>以太坊中有两类账户：</p><ul><li>外部账户：该类账户被私钥控制（由人控制），没有关联任何代码。</li><li>合约账户: 该类账户被它们的合约代码控制且有代码与之关联。</li></ul></blockquote><blockquote><p><strong>外部账户与合约账户的区别和关系：</strong></p><p>一个外部账户可以通过创建和用自己的私钥来对交易进行签名，来发送消息给另一个外部账户或合约账户。在两个外部账户之间传送消息是价值转移的过程。</p><p>但从外部账户到合约账户的消息会激活合约账户的代码，允许它执行各种动作（比如转移代币，写入内部存储，挖出一个新代币，执行一些运算，创建一个新的合约等等）。</p><p>只有当外部账户发出指令时，合同账户才会执行相应的操作。</p></blockquote><p>智能合约的部署是指把合约字节码发布到区块链上，并使用一个特定的地址来标示这个合约，这个地址称为合约账户。</p><p>部署智能合约需要一个外部账户，我们先来看看分配的开发者账户，这个开发者账户里有充足的以太币。</p><p><em>查看账户:</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.accounts</span><br><span class="line"><span class="comment"># ["0x231b0a1ce4258e708cec69831f89d752822e25aa"] 返回了分配的开发者账户</span></span><br></pre></td></tr></table></figure><p></p><p><em>查看账户余额：</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.getBalance(eth.accounts[0])</span><br><span class="line"><span class="comment"># 1.15792089237316195423570985008687907853269984665640564039457584007913129639927e+77 数字非常大</span></span><br></pre></td></tr></table></figure><p></p><p>开发者账户因余额太多，如果用这个账户来部署合约时会无法看到余额变化，为了更好的体验完整的过程，这里选择创建一个新的账户。</p><p><em>创建账户:</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.newAccount(<span class="string">"tang"</span>)</span><br><span class="line"><span class="comment"># 返回了新的账号 "0x44e805ccb02b8c14e41d1e166e46d7b615c911ca"， tang 是账号密码</span></span><br><span class="line">&gt; eth.accounts</span><br><span class="line"><span class="comment"># ["0x231b0a1ce4258e708cec69831f89d752822e25aa", "0x44e805ccb02b8c14e41d1e166e46d7b615c911ca"] 多了一个</span></span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 0 查看的是第二个账号的余额</span></span><br></pre></td></tr></table></figure><p></p><p><em>给新账号转账:</em> 转 1 ether 以太币, ether 是 以太币 的单位，以太币的最小单位是 wei ，详情查看 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3towei" target="_blank" rel="noopener">这儿</a><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.sendTransaction(&#123;from: <span class="string">'0x231b0a1ce4258e708cec69831f89d752822e25aa'</span>, to: <span class="string">'0x44e805ccb02b8c14e41d1e166e46d7b615c911ca'</span>, value: web3.toWei(1, <span class="string">"ether"</span>)&#125;)</span><br><span class="line"><span class="comment"># "0xf7953104df919ca3d44f262ed291c1a19a82ad34469af6bd4e2a1b7357d93a4f"</span></span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 1000000000000000000</span></span><br></pre></td></tr></table></figure><p></p><p><em>解锁账户:</em> 在部署合约前需要先解锁账户（就像银行转账要输入密码一样）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.unlockAccount(eth.accounts[1],<span class="string">"tang"</span>, 0);</span><br><span class="line"><span class="comment"># true  第二个参数是对应账号的密码</span></span><br></pre></td></tr></table></figure><p></p><h2 id="编写、编译、部署-合约代码"><a href="#编写、编译、部署-合约代码" class="headerlink" title="编写、编译、部署 合约代码"></a>编写、编译、部署 合约代码</h2><p><em>solidity代码如下:</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line">contract hello &#123;</span><br><span class="line">    string greeting;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">string _greeting</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">public</span> <span class="title">returns</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们定义了一个名为hello的合约，在合约初始化时保存了一个字符串（我们会传入hello world），每次调用say返回字符串。</p><p>把这段代码写(拷贝)到 <a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Browser-Solidity</a>，Browser-Solidity 要选中 <code>Auto Compile</code> 。如果没有错误，说明编译成功。点击Details获取部署代码（警告可以不理）。</p><p>在弹出的对话框中找到WEB3DEPLOY部分，点拷贝，粘贴到随便的一个编辑器后，修改初始化字符串为hello world。最后结果为：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _greeting = <span class="string">"hello world"</span> ;</span><br><span class="line"><span class="comment">// Creates a contract object</span></span><br><span class="line"><span class="keyword">var</span> helloContract = web3.eth.contract([&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"say"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"stateMutability"</span>:<span class="string">"view"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"_greeting"</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"stateMutability"</span>:<span class="string">"nonpayable"</span>,<span class="string">"type"</span>:<span class="string">"constructor"</span>&#125;]);</span><br><span class="line"><span class="comment">// deploy new contract</span></span><br><span class="line"><span class="keyword">var</span> hello = helloContract.new(</span><br><span class="line">   _greeting, <span class="comment">// constructorParam, 可存在多个</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">from</span>: web3.eth.accounts[<span class="number">1</span>],  <span class="comment">// 部署账号</span></span><br><span class="line">     data: <span class="string">'0x608060405234801561001057600080fd5b5060405161027c38038061027c83398101604052805101805161003a906000906020840190610041565b50506100dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008257805160ff19168380011785556100af565b828001600101855582156100af579182015b828111156100af578251825591602001919060010190610094565b506100bb9291506100bf565b5090565b6100d991905b808211156100bb57600081556001016100c5565b90565b610191806100eb6000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663954ab4b28114610045575b600080fd5b34801561005157600080fd5b5061005a6100cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009457818101518382015260200161007c565b50505050905090810190601f1680156100c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561015b5780601f106101305761010080835404028352916020019161015b565b820191906000526020600020905b81548152906001019060200180831161013e57829003601f168201915b50505050509050905600a165627a7a7230582095d42238dd45ab5b9cf241235d3dbba2dae94a09053bc96b0935ed98ac9a4ec10029'</span>,  <span class="comment">// 合约编译后的字节码</span></span><br><span class="line">     gas: <span class="string">'4700000'</span> <span class="comment">// 以太坊用 gas 计算要智能合约需要的以太币</span></span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e, contract</span>)</span>&#123; <span class="comment">// 部署后的回调函数</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The callback will fire twice!</span></span><br><span class="line">    <span class="comment">// Once the contract has the transactionHash property set and once its deployed on an address.</span></span><br><span class="line">    <span class="built_in">console</span>.log(e, contract);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> contract.address !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'Contract mined! address: '</span> + contract.address + <span class="string">' transactionHash: '</span> + contract.transactionHash);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p></p><p><code>eth.contract</code> ：<a href="https://solidity.readthedocs.io/en/develop/abi-spec.html" target="_blank" rel="noopener">api说明</a></p><blockquote><p>需要修改的地方：</p><ul><li>第1行：修改字符串为 hello world</li><li>第6行：修改部署账户为新账户索引，即使用新账户来部署合约。</li></ul></blockquote><p>然后一行一行拷贝到 geth 中执行。出现以下类似 log 说明 <strong>部署成功</strong>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Contract mined! address: 0x8500c68000dbbebea6d5673d28927b28b9470854 transactionHash: 0x16c8aa6129693edaf22b43fd043748857d05511251f65b5e9f9faf8355b95656</span><br><span class="line">&gt; eth.getBalance(eth.accounts[1])</span><br><span class="line"><span class="comment"># 查看账号余额，发现变少了</span></span><br></pre></td></tr></table></figure><p></p><p>同时也可以在日志中看到挖矿记录等<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/mine-log.png" alt="mine-log"></p><h2 id="运行合约"><a href="#运行合约" class="headerlink" title="运行合约"></a>运行合约</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello.say()</span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure><p>不知道为什么公司的电脑运行成功了，而家里的电脑却报错了 <code>TypeError: &#39;say&#39; is not a function</code>，明明合约创建成功了。</p><p>跟上面截图的最底部的 error: <code>waiting for transactions</code> 没关系，公司的电脑上也有这行日志。</p>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[node常用]]></title>
      <url>http://jintang.github.io/2018/07/16/node%E5%B8%B8%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="node常用命令"><a href="#node常用命令" class="headerlink" title="node常用命令"></a>node常用命令</h2><h3 id="进入、退出命令行"><a href="#进入、退出命令行" class="headerlink" title="进入、退出命令行"></a>进入、退出命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入命令行</span></span><br><span class="line">node</span><br><span class="line"><span class="comment"># 正常退出退出命令行</span></span><br><span class="line">.<span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 强制退出</span></span><br><span class="line">ctrl + c <span class="comment"># 两次</span></span><br></pre></td></tr></table></figure><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><p>谷歌浏览器内置了 <code>node</code> 的调试器，可以很方便的打断点，看 log , 我们需要以调试模式运行 <code>node</code> 程序<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node --inspect index</span><br><span class="line"><span class="comment"># 也是以node --inspect的方式启动，只不过加了supervisor的保存即时生效</span></span><br><span class="line">supervisor --inspect index</span><br></pre></td></tr></table></figure><p></p><h3 id="软连接全局-node-包"><a href="#软连接全局-node-包" class="headerlink" title="软连接全局 node 包"></a>软连接全局 node 包</h3><p>我们可以通过 <code>npm install -g 包名</code> 的方式全局安装第远程包，但对于没有在 <code>node</code> 仓库的包无能为力。这儿有另一种方法全局添加自己写的包<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 文件夹</span><br><span class="line">npm link</span><br></pre></td></tr></table></figure><p></p><p>在全局的包仓库下引用了此仓库，原理类似于快捷方式。然后就可以全局使用自己的包命令了，不想用了的话删除软连接<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unlink</span><br></pre></td></tr></table></figure><p></p><a id="more"></a>]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页适配问题]]></title>
      <url>http://jintang.github.io/2018/07/12/%E7%BD%91%E9%A1%B5%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>自己对网页自适应有些不足，补充一下。另外区分一下 自适应 与 响应式 的区别。</p><ul><li>自适应是为了解决如何才能在不同大小的设备上呈现同样的网页</li><li>响应式是自动识别屏幕宽度、并做出相应调整的网页设计，布局和展示的内容可能会有所变动</li></ul></blockquote><h3 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h3><p>可知需要设置大小的样式： <code>width</code> 、 <code>height</code> 、 <code>margin</code> 、 <code>padding</code> 、<code>font-size</code> ，列出来方便思考。<br>可知技术方案： 百分比布局、媒体查询 、 <code>rem</code> 、 <code>vw系列</code> 、 <code>flex</code> 。每一项都有自己的优缺点，我们需要结合起来使用。以实验过程来说明一些问题：</p><ol><li>只用百分比布局</li></ol><ul><li>优点： 浏览器大小改变时布局不变。实现了 自适应网页</li><li>缺点：<ul><li>如果屏幕过小，某个 <code>div</code> 内的内容可能过于拥挤，现在 <strong>PC</strong> 的屏幕不会太小，一般不会影响，但如果想要手机端或者平板访问此网页，效果可想而知。</li><li>如果屏幕过大，某个 <code>div</code> 内的内容可能过于稀少，那么我们需要字体同步放大，需要图片或其他媒体资源同步放大</li></ul></li></ul><ol start="2"><li><p>加上媒体查询</p><p>百分比布局加上这个就可以实现 <a href="https://alistapart.com/article/responsive-web-design" target="_blank" rel="noopener">响应式布局</a>，<a href="https://mediaqueri.es/" target="_blank" rel="noopener">这儿</a> 有很多案例</p></li></ol><ul><li>优点： 可以根据 <code>@media</code> 查询设置不同的样式，甚至布局。这样移动端通过修改布局也可以得到好的体验。</li><li>缺点： 要多写好几倍的 <code>css</code></li></ul><ol start="3"><li><p>锦上添花</p><p>理论上上面的两个已经可以解决布局问题，但现实中你可能没有时间写那么多的 <code>css</code>。那我们需要其他好东西。</p></li></ol><ul><li><p><code>rem</code> ：根据网页的根元素来设置字体大小。现代浏览器默认的根元素字体大小是 <code>font-size: 16px</code>。<br>设置这个可以让不同屏幕下的字体大小同步缩放，也可以设置给 <code>width</code>、 <code>padding</code> 、 <code>margin</code>。但不同的屏幕下需要给 <code>html</code> 节点 设定不同的 <code>font-size</code> 基准值。下面是几种方式：</p><ol><li><p>配合 <code>@media</code>,例如： <a href="http://3g.163.com/touch/news?version=v_standard" target="_blank" rel="noopener">网易新闻</a></p><p>手机的屏幕宽度： iphone5 是 320px ， iphone6/7/8/X 是 375px ， iphone6/7/8 plus 是 414px ，下面是部分代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">42.667px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">361px</span>) and (max-width:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">413px</span>) and (max-width:<span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">55.2px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的 <code>font-size</code> 是由 屏幕宽度/7.5 得到的，网易新闻 的设计图应该是 750px 的，除以 7.5之后 <code>font-size</code> 就是 100px ，方便其他元素的计算。子元素都是通过 <code>rem</code> 设的宽高等，因为 <code>414:375:320 = 55.2:50:42.667</code> ， 所以在 320px、375px、414px下显示的效果是一样的，上面还用了 <code>vw</code> ，如果浏览器支持的话，可以不使用 <code>@media</code> ，直接设置 <code>html: {font-size: 13.33333}vw</code>， 13.33333 是通过 100/7.5 得到的。然后根据设计图将 <code>px</code> 换算为 <code>rem</code> 就行了，你也可以修改 7.5 为其他值，比如说 10 。</p></li><li><p><code>js</code> 动态计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在 window.resize 方法里也要添加下面这条命令 */</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">10</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>calc</code> 自动计算</p><p>可以直接设置 <code>html: {font-size: 13.33333}vw</code> ，好粗暴。 <a href="https://www.zhangxinxu.com/wordpress/2016/08/vw-viewport-responsive-layout-typography/" target="_blank" rel="noopener">张鑫旭大神</a> 有实践大型项目后的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(100% + 2 * (100vw - 375px) / <span class="number">39</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(16px + 2 * (100vw - 375px) / <span class="number">39</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 414px-1000px每100像素宽字体增加1px(18px-22px) */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(112.5% + 4 * (100vw - 414px) / <span class="number">586</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(18px + 4 * (100vw - 414px) / <span class="number">586</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 600px-1000px每100像素宽字体增加1px(20px-24px) */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(125% + 4 * (100vw - 600px) / <span class="number">400</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(20px + 4 * (100vw - 600px) / <span class="number">400</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1000px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 1000px往后是每100像素0.5px增加 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(137.5% + 6 * (100vw - 1000px) / <span class="number">1000</span>);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(22px + 6 * (100vw - 1000px) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>vw系列</code> : <code>vw</code> 代表屏幕的可见宽度，类似的还有 <code>vh</code> 、 <code>vmin</code> 、 <code>vmax</code> 。百分比宽度是根据父节点的宽度设定的，当嵌套多层之后，用 <code>vw</code> 比较方便。如果浏览器都支持 <code>vw</code> 的话，完全可以用 <code>vw</code> 取代 <code>rem</code> ，上面 网易新闻 的 demo 还用 <code>vw</code> 来设定 <code>html</code> 的 <code>font-size</code></p></li><li><code>flex</code>: 让子元素成比例，垂直居中…等等，不要太方便</li></ul><h3 id="图片等媒体资源处理"><a href="#图片等媒体资源处理" class="headerlink" title="图片等媒体资源处理"></a>图片等媒体资源处理</h3><p>jpg 等图片如果大小设置不合理会发生失真或者截取一部分的情况。所以我们通常这样处理：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样，图片最大的时候会保持其原始大小和比例，不会放大失真。而图片变小时也会保持比例。</p>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端调试网页需知]]></title>
      <url>http://jintang.github.io/2018/07/10/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E7%BD%91%E9%A1%B5%E9%9C%80%E7%9F%A5/</url>
      <content type="html"><![CDATA[<blockquote><p>注意是网页，而不是 App</p></blockquote><h2 id="常见国内移动端浏览器"><a href="#常见国内移动端浏览器" class="headerlink" title="常见国内移动端浏览器"></a>常见国内移动端浏览器</h2><p>手机浏览器内核基本都是 <code>webkit</code>，只不过国内的重新封装了一层，所以谷歌浏览器自带的 <code>Inspect Device</code> 检测不出国内浏览器。</p><ol><li>微信内置、qq浏览器： <code>X5内核</code> ，由腾讯开发的。</li></ol><ul><li>一加自带浏览器： X5内核 037322GPU-M，目前我的是这个版本，问题好多， <code>vue</code> 已经用 <code>babel</code> 转了，但还是不支持，不知道为什么</li><li>QQ浏览器： X5内核 038615GPU-UU，目前我的是这个版本</li><li>UC浏览器： U4内核，由 UC 自主开发</li></ul><p>由于移动端浏览器的五花八门，经常会遇到莫名其妙的 bug ， 我们需要好用的调试工具，看下文。</p><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><ul><li><a href="http://www.browsersync.cn/" target="_blank" rel="noopener">BrowerSync</a>： 可以同时在PC、平板、手机等设备下进项调试，需要电脑和手机在同一 <code>wifi</code> 下</li><li><code>Weinre</code> : 功能与 Chrome DevTools 相似，需要在页面中插入一段 JS 脚本来实时调试页面 DOM 结构、样式、JS 等，另外它使用的是代理的方式，所以兼容性很好，无论是新老设备系统通吃。如果你的手机安装了 Chrome 浏览器，那么可以通过 USB 用 Chrome DevTools 调试，但是国内的手机用的浏览器在 Chrome DevTools 上无法识别，所以可以用过 <code>Weinre</code> 调试。详细可参考 <a href="https://aotu.io/notes/2017/02/24/Mobile-debug/" target="_blank" rel="noopener">这儿</a>，利用此工具可以调试这些：<ul><li>dom 元素</li><li>network 监听</li><li>source 打断点</li><li>console 查看日志</li></ul></li><li><code>fiddle</code> 等代理工具，通过 <code>usb</code> 连接。我没成功…<a id="more"></a></li></ul><h2 id="响应式问题"><a href="#响应式问题" class="headerlink" title="响应式问题"></a>响应式问题</h2><p>现代浏览器我们直接使用了 <code>vw</code> ，创建了一个 <code>px</code> 转 <code>vw</code> 的函数，然后在 <code>scss</code> 中使用对应的像素值。<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">function</span> px2vw($number) &#123;</span><br><span class="line">    <span class="comment">/* 因为我们的设计稿是320 */</span></span><br><span class="line">    @<span class="keyword">return</span> $number/<span class="number">320</span>*<span class="number">100</span>+vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>使用：</em><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">px2vw</span>(30);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">px2vw</span>(12);</span><br><span class="line">    <span class="comment">/* 其他属性如margin、padding、line-height这些都可以用vw */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>以下情况需要酌情使用 <code>@media</code>:</p><ul><li>如果需要适配 <code>ipad</code> ，因为这个屏幕比手机大很多，所以最好用 <code>@media</code> 修改下页面布局。不用 <code>@media</code> 直接让等比缩放也勉强可以接受。</li><li>用 <code>css</code> 写了特殊样式，比如说写一个 三个横杠的菜单图标，我们要为每个横杠设置高度，这个值一般比较小，直接上面的 <code>px2vw</code> 函数最后可能生成的是带小数的 <code>px</code>，在手机端你会发现三个横杠不一样高。这时候我们需要用 <code>@media</code> 设置整数的高度</li></ul><h2 id="1px-border-问题"><a href="#1px-border-问题" class="headerlink" title="1px border 问题"></a>1px border 问题</h2><p>利用伪类 和 <code>transform</code> 的 <code>scale</code><br><em>scss mixin:</em><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border1px ($color)&#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    border: 1px solid $color;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-2</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        &amp;:before &#123;</span><br><span class="line">            <span class="selector-tag">content</span>: "";</span><br><span class="line">            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">            <span class="selector-tag">top</span>: 0;</span><br><span class="line">            <span class="selector-tag">left</span>: 0;</span><br><span class="line">            <span class="selector-tag">width</span>: 200%;</span><br><span class="line">            <span class="selector-tag">height</span>: 200%;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>);</span><br><span class="line">            <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">            border: 1px solid $color;</span><br><span class="line">            <span class="selector-tag">transform-origin</span>: 0 0;</span><br><span class="line">            <span class="selector-tag">pointer-events</span>: <span class="selector-tag">none</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-3</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        &amp;:before &#123;</span><br><span class="line">            <span class="selector-tag">content</span>: "";</span><br><span class="line">            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">            <span class="selector-tag">top</span>: 0;</span><br><span class="line">            <span class="selector-tag">left</span>: 0;</span><br><span class="line">            <span class="selector-tag">width</span>: 300%;</span><br><span class="line">            <span class="selector-tag">height</span>: 300%;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.33</span>);</span><br><span class="line">            <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">            border: 1px solid $color;</span><br><span class="line">            <span class="selector-tag">transform-origin</span>: 0 0;</span><br><span class="line">            <span class="selector-tag">pointer-events</span>: <span class="selector-tag">none</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>js :</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">Math</span>.floor(<span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (dpr &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.className = <span class="string">'pixel-ratio-'</span> + dpr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的例子是四个方向都有 <code>border</code> ，若只有一个方向的，比如 <code>border-top</code> ，<em>js</em> 部分不变， <em>scss</em> 部分为 :<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border1px-top ($color)&#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">background-color</span>: $color;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        html.pixel-ratio-2 &amp; &#123;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(0<span class="selector-class">.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">html</span><span class="selector-class">.pixel-ratio-3</span> &amp; &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.33);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="最小字体限制"><a href="#最小字体限制" class="headerlink" title="最小字体限制"></a>最小字体限制</h2><p>移动端浏览器没有 pc 浏览器最小字体 <code>12px</code> 的限制，可以直接指定小于 <code>12px</code> 的字体</p><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><ol><li><p>图片模糊问题：</p><p>有些手机屏幕是高清屏，比如说 <code>iphone</code> 系列，现在它的主流 <code>dpr</code> 是 2 和 3 ，所以如果我们要用图片的话需要使用 2倍图 和 3倍图，不然高清屏下图片会模糊。</p><p>当然用 <code>svg</code> 也是可以的， <code>svg</code> 号称不会失真 , 但我在用 <code>iphoneX</code> 下有个小图标竟然有些模糊，原因不明…很纳闷</p></li><li><p>大图问题：</p><p>设计mm截的图有些 <code>svg</code> 有些大。对于这些 <code>svg</code> ， 设计mm就帮我改成了 <code>jpg</code> 或 <code>png</code>， 图片变小了一些，但还有部分大小还是有些大。</p><p>然后我用了 <a href="https://tinypng.com/" target="_blank" rel="noopener">压缩图片工具</a>，这个工具压缩后的图片不会修改图片的分辨率，所以不会影响图片的清晰度。它的原理是减少了原本图片里使用的颜色数量，肉眼是看不出来区别的。</p></li><li><p><code>Svg</code> 大小问题：</p><p><code>svg</code> 文件中不要设置固定px的 <code>width</code> 与 <code>height</code>（如果设置了， <code>svg</code> 就不会根据 <code>img</code> 标签设置的宽高变化了），可以设值为 100% 。用 <code>viewBox</code> 来描述 <code>svg</code> 的宽高比就行了。</p><p>然后在引用 <code>svg</code> 的 <code>img</code> 标签上设置宽高，或者只设置其中的一个。本来设计mm给我的 <code>svg</code> 有固定的宽高，我手动改成了 100% ，其他手机浏览器下可以自动缩放适应，但在 <code>IOS</code> 下这些改过的没有缩放，最后通过添加下面样式解决：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 父容器</span><br><span class="line"><span class="selector-class">.parent</span> &#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line">// svg</span><br><span class="line"><span class="selector-class">.icon</span> &#123;<span class="attribute">flex-shrink</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="个别机型问题"><a href="#个别机型问题" class="headerlink" title="个别机型问题"></a>个别机型问题</h2><ol><li><code>UC</code> 、 <code>QQ</code> 、 <code>360</code> 、 <code>Chrome</code> … 浏览器首屏工具栏问题：</li></ol><p>若需要做首屏占满屏幕：</p><ul><li><p>我用 <code>vh</code> 来实现占满屏幕，底部的工具栏会盖住一部分内容，但如果滚动到最底部，工具栏却不会盖住内容，应该是浏览器对 <code>vh</code> 的支持不太友好。针对首屏被盖住内容的部分，按下面处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browser = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span> (browser.indexOf(<span class="string">'MQQBrowser'</span>) !== <span class="number">-1</span> || browser.indexOf(<span class="string">'UCBrowser'</span>) !== <span class="number">-1</span> || browser.indexOf(<span class="string">'Chrome'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不知道工具栏具体的高度，所以是大概的给需要改变位置的元素加了 50px</span></span><br><span class="line">    <span class="keyword">let</span> downSignEle = <span class="built_in">document</span>.querySelector(<span class="string">'.down-sign'</span>);</span><br><span class="line">    downSignEle.style.bottom = <span class="built_in">parseInt</span>(getComputedStyle(downSignEle)[<span class="string">'bottom'</span>]) + <span class="number">50</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用 <code>js</code> 计算屏幕可见高度，建议这种方式，各种浏览器下都会统一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> screenH = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"><span class="keyword">let</span> firstPageEle = <span class="built_in">document</span>.querySelector(<span class="string">'.first-page'</span>);</span><br><span class="line">firstPageEle.style.height = screenH + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p><code>IOS</code> 系统下滚动不流畅，添加下面的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">height</span>: 100%;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">scroll</span>;</span><br><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>IOS</code> 点击去除灰色选中效果，添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0);</span><br></pre></td></tr></table></figure></li><li><p><code>UC</code> 下 <code>text-align:center</code> 无效<br>使用的 <code>UIkit</code> 的 <code>banner</code> 中 <code>text-align:center</code> 生效，但自己写的却不生效，对比样式发现没啥区别，没找到原因，最后用了下面的方案实现 <code>center</code> 效果，有哪位大佬知道请留言。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
        <categories>
            
            <category> 移动端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛阳纸贵]]></title>
      <url>http://jintang.github.io/2018/06/26/%E6%B4%9B%E9%98%B3%E7%BA%B8%E8%B4%B5/</url>
      <content type="html"><![CDATA[<blockquote><p>离开意味着新的开始，感叹下自己这离奇的9天</p></blockquote><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><ol><li><p>程序员最好有一台自己的笔记本，这样环境只需要配一次，不用换个公司又重新配一遍环境。我没用过 <code>Mac</code>， 但我感觉 <code>windows</code> 和 <code>linux</code> 双系统也挺棒的</p></li><li><p>我也经历过好几家公司了，每家公司的网都不咋地。除了用本地局域网联调外，我决定其他的连手机热点，网速比这快多了。</p></li><li><p>作为一个中国程序员，每次装环境之后还需要额外设置一些东西：</p><ul><li><code>node</code>、<code>yarn</code>： 装完之后受限于国内的网络，设置镜像。有几个包还需要额外设置镜像仓库，比如大名鼎鼎的 <code>node-sass</code>，参考 <a href="https://gist.github.com/52cik/c1de8926e20971f415dd" target="_blank" rel="noopener">这儿</a>，设置一次 <code>npm</code> 和 <code>yarn</code> 同时生效，设置完之后可以通过 <code>npm config list</code> 和 <code>yarn config list</code> 查看。</li><li><code>git</code>：基本配置查看 <a href="https://jintang.github.io/2016/06/24/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">这儿</a></li><li><p><code>dokcer</code> ： 同样设置镜像</p><ul><li><p><code>linux</code> 中在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后重新启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docke</span></span><br></pre></td></tr></table></figure></li><li><p><code>Windows10</code> 在系统右下角托盘 <code>Docker</code> 图标内右键菜单选择 <code>Settings</code> ，打开配置窗口后左侧导航菜单选择 <code>Daemon</code> 。在 <code>Registry mirrors</code> 一栏中填写加速器地址 <code>https://registry.docker-cn.com</code> ，之后点击 <code>Apply</code> 保存后 <code>Docker</code> 就会重启并应用配置的镜像地址了</p></li></ul></li><li><code>vue</code> :<ul><li>安装：<code>npm install -g @vue/cli</code> ， <code>vue-cli</code> 到 3 了，加了可视化配置，更新的好快</li><li>初始化项目模板： <code>vue create 项目名</code></li></ul></li><li><code>react-native</code> :<ul><li>安装： <code>npm install -g react-native-cli</code></li><li>初始化项目模板： <code>react-native init AwesomeProject</code></li></ul></li><li><code>android</code>： 既然要用 <code>react-native</code>， 肯定要配置 <code>android</code> 与 <code>ios</code> 的环境，可惜我没 <code>mac</code><ul><li><code>jdk1.8</code>： <code>Android Studio</code> 必须。 需手动配置环境变量 <code>JAVA_HOME</code> 与 <code>Path</code></li><li><code>Android Studio</code> 、 <code>SDK</code> 、 <code>ANDROID_HOME</code>: 可以帮助我们编译 <code>Android</code> 原生相关，用里面的 <code>SDK Manager</code>安装相关 <code>sdk</code>，配置环境变量 <code>ANDROID_HOME</code></li><li>手机模拟器： <code>windows</code> 下如果你装了 <code>docker</code> 就不能用 <code>genymotion</code> 了，原因看后面。 选择 <code>Visual Studio Emulator for Android</code></li></ul></li><li>自动化工具： 这只是个工具，不应该将很多精力放在这上面<ul><li><code>grunt</code>: 已经很少用了，需全局安装： <code>npm install -g grunt-cli</code></li><li><code>gulp</code>: 有些还在用，也需全局安装： <code>npm install gulp-cli -g</code></li><li><code>webpack</code>: 很流行。 可以全局安装，也可以只在项目中安装</li></ul></li></ul></li><li>常用 <code>IDE</code> 的设置存到云盘：我常用的 <code>vscode</code> 、 <code>webstorm</code> （jetbrain 家 IDE 的配置可以通用）<a id="more"></a></li></ol><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>记录经历主要是为了吐槽， 但还有一个方面非常重要。每次配环境都是匆匆的配，想起一点配一点，很糟。</p><ol><li><p>拿到新的电脑，查看代码规范文档，看着同事的 <code>mac</code> 们羡慕不已，对有规范文档暗暗点头，是家有范的公司。</p></li><li><p>后端是 <code>php</code> ，关系不大。为毛我也要装 <code>php</code> 跟 <code>php</code> 框架 <code>laravel</code>，什么，前后端没分离…我擦。本地装完 <code>laravel</code> 后才发现大家都用的 <code>docker</code> 保持环境的一致，我记得之前学这个的时候记得 <code>windows</code> 下只有 <code>win10</code> 可以安装 <code>docker</code>，在建议下装 <code>ubuntu</code></p></li><li><p>装双系统需要给 <code>linux</code> 系统压缩出一块硬盘，怕不够特意比网上的多分配了差不多一倍。 <code>ubuntu18.04</code> 装好了，我的台式机用的无线网卡，苦逼的发现连不上网，好不容易下了网卡驱动，又没有 <code>gcc</code> 的编译环境，无法 <code>make</code> ， 好蛋疼，最后找了根网线，醉了醉了。 装了一大堆的其他环境：<code>git</code> 、 <code>node</code> 、 <code>yarn</code> 、<code>php</code> … <code>docker</code> 怎么也下不到最新版的，在 <code>docker</code> 官方仓库 <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> 里也找不到，怪不得安装不上最新的。然后我在 6.24 日（过了一个礼拜）的时候重新打开看了下，神奇的有了 <img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/docker-address.png" alt="docker-address">。我很无语…</p></li><li><p>项目里的 <code>docker</code> ，我们的项目里配置了很多容器，需要搭配好，项目我不熟，最后是后台的同事帮助搞定了 <code>docker</code> 环境，自己一脸懵逼。</p></li><li><p>又是一个项目， <code>docker</code> 的配置还是后台同事帮忙配的，这次大概明白了点，主要修改 <code>haproxy</code> 配置、 <code>nginx</code> 配置、<code>docker-compose.yml</code>, 进入 <code>nginx-php-fpm</code> 容器安装 <code>php</code> 依赖—— <code>composer install</code>，本地项目安装前端依赖—— <code>yarn install</code>，因为项目用了 <code>laravel</code> 框架， 所以还要配 <code>.env</code> 文件， 用 <code>php atisan keg:generate</code> 生成 <strong>APP-key</strong> ，其他配置按需求。修改 <code>host</code> ， 因为 <code>nginx</code> 中配的是自定义域名，自定义域名指向 127.0.0.1 ，用的是 <code>SwitchHosts</code> 这个工具，这个是跨平台的，比较好用。 还要给 <code>Storage</code> 文件夹下赋权限 777，不太懂…开始修改 bug</p></li><li><p>其他的 bug 修改完了，还有 360 浏览器的兼容性 bug 。一脸苦笑，我一个 <code>ubuntu</code> 哪来的 360 。好吧，装虚拟机吧，装个 win10 的虚拟机，幸好有之前使用这台电脑的哥们留着的 iso 镜像，我不用等很久很久，网速好慢。装好了，网络设为 <strong>桥接</strong> ，可以访问宿主机调试了。在装一些方便的软件： 谷歌浏览器、 <code>shadows-qt5</code> 搭配谷歌插件 <code>SwitchyOmega</code> 来浏览器翻墙（终端翻墙需要另外的配置）、 <code>webStorm</code> 、 <code>vscode</code> 、搜狐输入法、 <code>wine-qq</code> 、 <code>wine-钉钉</code> 、微信、 <code>gnome-tweak-tool</code> （优化主题等，优化后的系统真好看）… <code>vscode</code> 这种软件配置成自己的习惯好麻烦，所以我找了以前的同事帮我备份了下我以前的配置，然后导入，再然后保存到百度云盘里， <code>webstorm</code> 同样处理。话说回来，整个 <code>ubuntu</code> 的配置能不能云备份，下次我装的时候一键解决…</p></li><li><p>360 兼容模式下使用的是 <strong>IE</strong> 内核，绝大多数的兼容性 bug 都是因为在 <code>blade.php</code> 文件里用了 <code>es6</code> 的语法。 为啥用不了呢，下面是回答的原文, 再附上 <a href="https://laracasts.com/discuss/channels/elixir/babel-es6-in-blade-template" target="_blank" rel="noopener">链接</a>，我还是不太明白深层的含义</p><blockquote><p>The only reason you should have javascript in a blade template is because you’re passing variables from PHP.There’s no way that can be compiled anywhere other than at run time.</p></blockquote></li><li><p>得知消息说要开始做 app 了，选用 <code>react-native</code> ， 嗯…那我先装环境， <code>java</code> 环境没装完就报我 <code>/home</code> 卷满了，用磁盘分析工具发现那个虚拟机就占了 18G ，我整个 <code>/home</code> 卷才配了 20G …好吧，找篇教程开始扩容。马有失蹄啊，扩容后重启，整个系统崩了…我好崩溃，我装 <code>ubuntu</code> 的 U盘带回家了，不然我就重装 <code>ubuntu了</code>。也许是天意，接了一圈借到了 <code>win10</code> 的安装盘，好吧，听同事说他用的 <code>win10</code>， 可以装 <code>docker</code> ，我也不想再折腾了。那就 <code>win10</code> 吧，借到的这个是 <strong>家庭版</strong> ， 装不了 <code>docker</code> ， 虽然明天是周六，看来得自己来加班了…这几天装环境装的人身心俱疲，查到的资料一大堆乱乱的充斥在脑子里，所以我做了一件好事，把 <strong>魂斗罗</strong> 手游给戒了，垃圾游戏，天天各种任务，毁我视力，浪费时间，浪费生命。</p></li><li><p>带着家里网速杠杠制作的 <code>win10企业版</code> 安装盘来装系统，以防万一我还带了 <code>ubuntu18.04</code> 的安装盘 。为毛这么热啊，空调是摆设吗，根本就调不了那个温度嘛，感觉一直在被蒸着，后面才知道周末大楼为了节约是关了中央空调的。一上午就装好了，开始装 <code>docker</code>。通过 <code>bios</code> 设置 <code>Intel Virtual technology: enable</code>， 这样系统就开启了 <code>Hyper-V</code> ，这是个 <code>win10</code> 自带的虚拟机， <code>docker</code> 需要这个才可以安装。发现还是装不了，需要升级 <code>windows</code> 版本， 至少要到 <code>14393</code> 版本。通过 <strong>运行</strong> —— <code>winver</code> 查看自己的版本号，果然不够。好吧，来个在线升级吧，真的不想再装系统了。下载 <strong>易升</strong> 开始在线升级，这时刚到中午，速度好像不给力啊，如果速度稳定的话，这 100% 得到下午 4 点了。 在等待的过程中在 <code>windows</code> 上用 <code>Hyper-V</code> 装了 <code>ubuntu</code> 的虚拟机，再选择版本的时候想起来上次没找到 <code>ubuntu18.04</code> 对应的 <code>docker</code> 新版本，这次在 <code>docker</code> 仓库上重新查看，发现 <code>17.10</code> 有，鬼使神差的又去看了 <code>18.04</code>，竟然也有，这就是我之前写到为啥会重新查看的原因，使用感觉很不好…主要是反应慢一拍。被蒸了一下午，到了 5 点，终于 100% 了，竟然又来了个进度条… 这个速度稍微快点，我想今天怎么着也得弄完吧，一直到了 7 点，才到 80% ，中间我意识到可能是因为我没有全局代理翻墙，但是不敢切，怕整个连接都断了。天啊，晚上还有人约饭呢，算了，我明天再来吧…草。 值得安慰的是朋友做了一大堆好吃的，喝果啤看球赛，在他的怂恿下压了 100元 的德国，如果这把德国输了德国就小组淘汰了，很有道理。</p></li><li><p>昨天蒸了一天，早上醒来感觉自己感冒了，发现德国赢了，来公司发现升级好了，鉴于公司这么垃圾的网速，我决定跟宽带办一个绑定的无线流量卡，以后开热点，自力更生。整个人软软的，接着装好了 <code>docker</code> ，好像没问题，具体得，明天周一配置项目了验证下，自己对整个配置过程还不是很明白。</p></li><li><p>经过同事的帮助，项目成功跑起来了，看来我以后还是用 <code>windows</code> 吧， <code>qq</code> 这些东西起码方便。再重新装 <code>git</code> 、 <code>node</code> 、 <code>yarn</code> 、<code>php</code> … <code>php</code> 环境好麻烦，最后用了 <code>phpStudy</code> 的集成环境，再从 <code>composer</code> 官网下载 <code>composer</code> 安装包，会自动配置好环境变量。</p></li><li><p>因为要运行 <code>react-native</code> ，所以需要手机模拟器，之前一直用的 <code>genymotion</code> 启动不起来…原来是 <code>virtual box</code> 跟 <code>Hyper-V</code> 冲突了。最后安装了 <code>Visual Studio Emulator for Android</code>，不需要装 <code>VS</code>这个模拟器也是用的 <code>Hyper-V</code> 虚拟机。但是无法同时启动 <code>Android模拟器</code> 和 <code>docker</code> ， 原因是我的内存不够…</p></li></ol><p>我的折腾环境总算告一段落了，感冒让我欲仙欲死…这样的过程我再也不想来第二遍了，如果还要我重装的话，我选择自己买台电脑，以后在公司用自己的电脑。最后在上面列一下自己苦逼的经验。</p>]]></content>
      
        <categories>
            
            <category> 闲语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闲语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面试遇到的]]></title>
      <url>http://jintang.github.io/2018/05/29/%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84/</url>
      <content type="html"><![CDATA[<blockquote><p>一有离意便按耐不住自己，面试了一周半便确定了自己即将去的地方，不知道是不是太快了点…前后林林总总面了10家过一点，有5家给了我offer，有些问题没回答上来但还是通过了，还有些就没通过，再次根据回忆主要记录下, 问的太多了，所以下面的问题都是印象比较深刻的，印象深刻嘛，要嘛是不会的，要嘛是问了次数比较多的。对了，我是一个前端，主要的问题也都是针对前端，因为一直在做 <code>vue</code> 项目，所以很多问题也都跟 <code>vue</code> 相关</p></blockquote><blockquote><p>一位腾讯大佬有这样的面试技巧（或者说招聘技巧）：看候选人 <code>github</code> 有个技巧，看他 <strong>activity</strong> 里 <strong>issue</strong> 区讨论、给知名开源项目的 <strong>PR、merged PR</strong> 数量和质量</p></blockquote><h3 id="被问到两次以上的"><a href="#被问到两次以上的" class="headerlink" title="被问到两次以上的"></a>被问到两次以上的</h3><h4 id="前端优化方案"><a href="#前端优化方案" class="headerlink" title="前端优化方案"></a>前端优化方案</h4><p>涉及太多请自行谷歌</p><h4 id="webpack相关"><a href="#webpack相关" class="headerlink" title="webpack相关"></a>webpack相关</h4><p>当你讲述你的项目经验的时候，当面试官听到你在用 <code>vue</code> 全家桶的时候，所有相关的问题都会问题， 其他的我都能说个123来，但 <code>webpack</code> 却没咋用，项目中都是别人构建的…也为后面的 <code>thoughtwork</code> 一道开放性作品题失败埋下了伏笔。面试官听到我不会也就没再问了，现在开始补 <code>webpack</code> 的知识</p><h4 id="es6相关"><a href="#es6相关" class="headerlink" title="es6相关"></a>es6相关</h4><p>你用了哪些 <code>es6</code> 的东西，都是啥，其中 <strong>箭头函数</strong> 与普通函数的区别最常被问</p><h4 id="原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程"><a href="#原型链相关：如何实现原型链继承，原型与构造函数的关系，new-对象的时候发生的过程" class="headerlink" title="原型链相关：如何实现原型链继承，原型与构造函数的关系，new 对象的时候发生的过程"></a>原型链相关：如何实现原型链继承，原型与构造函数的关系，<code>new</code> 对象的时候发生的过程</h4><p>下面这张图可以清晰明白的帮助我们理解，如果还想深入理解，参考 <a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">这儿</a><br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/prototype-series.png" alt="原型链"></p><a id="more"></a><h4 id="apply-与-call-的区别"><a href="#apply-与-call-的区别" class="headerlink" title="apply 与 call 的区别"></a>apply 与 call 的区别</h4><p>都是为了改变调用函数的上下文，唯一的区别就是传参格式的区别，<code>call</code> 接受多个参数， <code>apply</code> 接受数组参数，如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun().call(thisObj, arg1, arg2 ...)</span><br><span class="line">fun().apply(thisObj, [arg1, arg2 ...])</span><br></pre></td></tr></table></figure><p></p><h4 id="vue-的生命周期"><a href="#vue-的生命周期" class="headerlink" title="vue 的生命周期"></a>vue 的生命周期</h4><p>请参照 <a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noopener">vue官网</a></p><h4 id="vue-父子、兄弟组件间传递消息"><a href="#vue-父子、兄弟组件间传递消息" class="headerlink" title="vue 父子、兄弟组件间传递消息"></a>vue 父子、兄弟组件间传递消息</h4><p>父子： <code>$emit</code>, <code>props</code><br>兄弟： <code>eventBus</code>, <code>vuex</code></p><h4 id="cookie、localStorage、sessionStorage的区别"><a href="#cookie、localStorage、sessionStorage的区别" class="headerlink" title="cookie、localStorage、sessionStorage的区别"></a>cookie、localStorage、sessionStorage的区别</h4><p>可以参考我的这篇 <a href="http://jintang.github.io/2016/10/08/H5%E4%B8%ADlocalStorage%E4%B8%8EsessionStorage%E7%9A%84%E5%8C%BA%E5%88%AB/">文章</a></p><h4 id="登陆超时如何处理"><a href="#登陆超时如何处理" class="headerlink" title="登陆超时如何处理"></a>登陆超时如何处理</h4><p>客户端 <code>cookie</code> 存 <code>sessionId</code>，<code>ajax</code> 请求携带 <code>cookie</code>，后端判断对应 <code>sessionId</code> 对应的客户，后端存的 <code>session</code> 如果超时了就给接口返回超时的标志位，前端根据该标志跳转到登录页并清空 <code>cookie</code>。<br>其他的方法还有使用 <code>token</code> ,具体可以参照 <a href="http://www.cnblogs.com/xiekeli/p/5607107.html" target="_blank" rel="noopener">这儿</a></p><h4 id="如何适配不同大小的显示屏"><a href="#如何适配不同大小的显示屏" class="headerlink" title="如何适配不同大小的显示屏"></a>如何适配不同大小的显示屏</h4><p>我回答了 响应式布局、 rem 、 flex，自己对这个并不深入</p><h3 id="只被问了一次的"><a href="#只被问了一次的" class="headerlink" title="只被问了一次的"></a>只被问了一次的</h3><h4 id="vuex-一般什么时候使用"><a href="#vuex-一般什么时候使用" class="headerlink" title="vuex 一般什么时候使用"></a>vuex 一般什么时候使用</h4><p>为了存储一些公用的数据，比如有一个功能需要好几步，你还可以返回上一步，这时候就要用了。</p><h4 id="项目中使用了-keep-alive，如何让返回列表页的时候重新刷新数据"><a href="#项目中使用了-keep-alive，如何让返回列表页的时候重新刷新数据" class="headerlink" title="项目中使用了 keep-alive，如何让返回列表页的时候重新刷新数据"></a>项目中使用了 keep-alive，如何让返回列表页的时候重新刷新数据</h4><p>我们的项目中并没有使用 <code>keep-alive</code> ，但我知道使用了之后组件的 <strong>生命周期方法</strong> 是不触发的，于是询问面试官（这个面试官非常和善） <code>route</code> 的钩子触发吗？<br>面试官给了肯定的答复后作了下面的回答：</p><blockquote><p>可以利用 <code>route</code> 的导航钩子： <code>beforeRouteEnter</code>，在这里处理刷新事项</p></blockquote><p>面试官点了点头。后面经过查证，这个钩子确实是触发的，同时还有我从没注意到的 <strong>生命周期方法</strong> 也会被触发: <code>activated</code> 与 <code>deactivated</code>，这是 <code>vue</code> 专门为了 <code>keep-alive</code> 创建的钩子</p><h4 id="跨域如何处理"><a href="#跨域如何处理" class="headerlink" title="跨域如何处理"></a>跨域如何处理</h4><p>有 <code>jsonp</code>、<code>cors</code>、<code>nginx</code>反向代理等方法，项目上线肯定不能用 <code>nginx</code>反向代理，<code>jsonp</code>我还从没用过，我知道局限性很大， <code>cors</code> 设置的 <code>allow-origin:　*</code> 又不安全。而在 <code>vue</code> 项目的开发中，使用的是 <code>webpack</code> 的 <code>proxy</code></p><h4 id="什么是重绘和回流"><a href="#什么是重绘和回流" class="headerlink" title="什么是重绘和回流"></a>什么是重绘和回流</h4><p>请参考 <a href="http://www.css88.com/archives/4996" target="_blank" rel="noopener">这儿</a></p><h4 id="深拷贝一个function"><a href="#深拷贝一个function" class="headerlink" title="深拷贝一个function"></a>深拷贝一个function</h4><p>请参考 <a href="http://jintang.github.io/2017/05/17/vue%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/">这篇文章</a> 里关于 <code>深拷贝</code> 的描述</p><h4 id="浏览器渲染html的详细过程"><a href="#浏览器渲染html的详细过程" class="headerlink" title="浏览器渲染html的详细过程"></a>浏览器渲染html的详细过程</h4><p>回头翻答案，发现自己也了解过这个…但是被问到的时候，一点印象都没，只记得是先渲染 <code>dom</code> 树 ，再渲染具体的。具体的渲染过程请参照 <a href="https://juejin.im/entry/59e1d31f51882578c3411c77" target="_blank" rel="noopener">这儿</a></p><h4 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h4><p><strong>排序算法：</strong> 可能是我记性太差，我总感觉不常用的东西很容易忘。排序算法我也模拟实现了插值排序，其他算法也都看过好几遍，结果…写纸上，也没法验证，根据面试官的表情好像写错了。<br><strong>数组去重：</strong> 人家要求说出两种，第一种可以用 <code>[...new Set(arr)]</code>， 第二种自己实现…唉，问我的时候我比较慌，说了个双层遍历的方法，下面提供一个单层遍历的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr) &amp;&amp; arr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">            obj[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="require导入和import导入有啥区别"><a href="#require导入和import导入有啥区别" class="headerlink" title="require导入和import导入有啥区别"></a>require导入和import导入有啥区别</h4><p>刚开始接触 <code>es6</code> 的时候还看过这个，时间久了又忘记了…<br><code>CommonJS</code> 是 <code>node</code> 的规范，它是用 <code>require</code>。而 <code>es6</code> 是用 <code>import</code>,下面是他们的区别：</p><ul><li><code>CommonJS</code> 模块输出的是一个值的拷贝，<code>ES6</code> 模块输出的是值的引用。</li><li><code>CommonJS</code> 模块是运行时加载，<code>ES6</code> 模块是编译时输出接口。</li></ul><p>第二个差异是因为 <code>CommonJS</code> 加载的是一个对象（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 <code>ES6</code> 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。显然 编译期 早于 运行期。</p><p>更多了解请查看阮大神的 <a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><p><em>注意：</em> 你可以在同一个文件中同时使用 <code>require</code> 和 <code>export</code>. 但不能同时使用 <code>import</code> 和 <code>module.exports</code>. 不然会报错——<code>Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</code></p><h4 id="请列举下js的数据类型"><a href="#请列举下js的数据类型" class="headerlink" title="请列举下js的数据类型"></a>请列举下js的数据类型</h4><p>一共7种，<code>es6</code>中新增加了一个数据类型 <code>Symbol</code>。其中 <strong>引用类型</strong> 只有一种，就是 <code>Object</code>，<code>Array</code> 与 <code>Function</code> 都不算，具体请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types" target="_blank" rel="noopener">这儿</a></p><h4 id="移动端点击事件-200ms-延迟处理"><a href="#移动端点击事件-200ms-延迟处理" class="headerlink" title="移动端点击事件 200ms 延迟处理"></a>移动端点击事件 200ms 延迟处理</h4><p>我回答的是可以用 <code>tap</code> 代替 <code>click</code>，面试官又问为啥，我说 <code>angular</code> 还是 <code>ionic</code> 里有这么个方法，官方推荐使用这个…这明显不是面试官想要的答案<br>有个小同事给了这个 <code>css</code> 属性: <code>touch-action: manipulation;</code> 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要,具体可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">这儿</a></p><h4 id="移动端-1px-边框问题"><a href="#移动端-1px-边框问题" class="headerlink" title="移动端 1px 边框问题"></a>移动端 1px 边框问题</h4><p>同样是看过的东西，又忘了… 可以参考 <a href="https://segmentfault.com/a/1190000011466832" target="_blank" rel="noopener">这儿</a></p><h4 id="sql相关"><a href="#sql相关" class="headerlink" title="sql相关"></a>sql相关</h4><p>有面试官问了些简单的 <code>sql</code> ，因为我说我不熟，所以问的都很简单，而且我面的是前端岗…涉及太多请自行谷歌</p><h4 id="vuex原理"><a href="#vuex原理" class="headerlink" title="vuex原理"></a>vuex原理</h4><p>很抱歉我没了解这个，源码也没看过…请自行谷歌</p><h3 id="机试题和开放性题目"><a href="#机试题和开放性题目" class="headerlink" title="机试题和开放性题目"></a>机试题和开放性题目</h3><p>我们常碰到的是笔试然后面试，偶尔也会碰到机试题，我这次就碰到了。还碰到了两家比较牛的公司，是让我先做开放性的题目，然后将东西发给人家，人家审核通过了再给你发面试邀请。</p><ul><li>机试的公司要求是用框架搭建一个小页面，挺简单的。</li><li>一家公司的题库里我选做的是 <strong>杨辉三角</strong>， 虽然结果正确，但人家邮件回复说没通过，不知道为什么，问原因也没回我。</li><li>另一家就是 <code>thoughtwork</code> ，大概的题目是要 自己搭建脚手架工具，我选择了 <code>webpack</code>，再用原生 <code>js</code> 实现一个小的管理系统，不涉及数据库，附带的功能有 响应式布局、单元测试… 很繁杂，虽然花了很久，但没做出来…这就是经常用框架的坏处吧，发现自己短板还挺多的…得补充下了</li></ul><h3 id="非技术性问题"><a href="#非技术性问题" class="headerlink" title="非技术性问题"></a>非技术性问题</h3><h4 id="为什么离职"><a href="#为什么离职" class="headerlink" title="为什么离职"></a>为什么离职</h4><p>我说的是为了多见识多学习，^_^</p><h4 id="最近解决的最难的问题是什么"><a href="#最近解决的最难的问题是什么" class="headerlink" title="最近解决的最难的问题是什么"></a>最近解决的最难的问题是什么</h4><p>…因人而异</p><h4 id="你做的哪件事表现出你有出色的学习能力"><a href="#你做的哪件事表现出你有出色的学习能力" class="headerlink" title="你做的哪件事表现出你有出色的学习能力"></a>你做的哪件事表现出你有出色的学习能力</h4><p>…同上</p><h4 id="以后的发展规划"><a href="#以后的发展规划" class="headerlink" title="以后的发展规划"></a>以后的发展规划</h4><p>这个我也比较迷茫，我觉得前端有些浅，希望能接触到其他的技术。再就是走一步看一步了</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>还有很多问题都忘记了，想到了会再加上去。想要抱怨的是一些大公司审核太慢了…等你们的时间我已经找到了。上面的题有些是不是很难，哈哈，其中难得题目大多数都是由3个人问出来的： 一个架构师、 一个大公司的大佬、一家使用 <code>jquery</code>的技术leader（他们还没有拥抱 <code>es6</code> ，所以对 <code>es5</code> 里的一些比较麻烦的问题问的比较多），一般的问题都是比较简单的。和行业内的大佬交流挺有意思的，大多数面试官都感觉人很好。</p>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue我们应该知道的]]></title>
      <url>http://jintang.github.io/2018/05/11/vue%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="route开启h5模式"><a href="#route开启h5模式" class="headerlink" title="route开启h5模式"></a>route开启h5模式</h3><p>路由里面加一个 <code>mode: &#39;history&#39;</code><br><strong>作用:</strong> 实现页面后退时，还原滚动位置</p><h3 id="vuex模块话"><a href="#vuex模块话" class="headerlink" title="vuex模块话"></a>vuex模块话</h3><p><em>默认：</em> 内部的 <code>action</code> 、 <code>mutation</code> 和 <code>getter</code> 是注册在全局命名空间的。不包括 <code>state</code></p><p>所以，当 <code>commit</code> 一个子模块的 <code>mutation</code> 时，若还有其他子模块有相同的 <code>mutation</code> 时,<br>这两者都会触发。<strong>bug:</strong> 再次发现中，下一步的扫描时间初始化不是0，而是先变成了上一步的扫描时间，然后才变成0。因为点击下一步的时候触发了上一步的同名 <code>mutation</code></p><p><strong>解决方案：</strong> 给子模块添加 <code>namespaced: true</code> 让子模块成为命名空间模块，这样可以封装单独作用域</p><p>此时要 <code>commit</code> 一个子模块的 <code>mutation</code> 时，就需要<code>this.$store.commit(&#39;子模块名/事件名&#39;)</code></p><p><strong>tip:</strong> 不论是不是命名空间模块， <code>state</code> 的获取都是这样的： <code>this.$store.state.子模块名.变量名</code><br>或者利用 <code>mapState</code> :<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapState(<span class="string">'子模块名'</span>, [</span><br><span class="line">    <span class="string">'变量名'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="引用类型的复制可以用-lodash"><a href="#引用类型的复制可以用-lodash" class="headerlink" title="引用类型的复制可以用 lodash"></a>引用类型的复制可以用 lodash</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.clone(obj)</span><br><span class="line">_.cloneDeep(obj)</span><br></pre></td></tr></table></figure><h3 id="unicode字符串-如-u0000-页面显示乱码"><a href="#unicode字符串-如-u0000-页面显示乱码" class="headerlink" title="unicode字符串(如\u0000)页面显示乱码"></a>unicode字符串(如\u0000)页面显示乱码</h3><p>使用 <code>v-html</code> 代替 <code>{{}}</code> 、<code>v-text</code> ,这样才可以显示不转义的字符串</p><h3 id="使用debounce节流函数"><a href="#使用debounce节流函数" class="headerlink" title="使用debounce节流函数"></a>使用debounce节流函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    checkChange: debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;, <span class="number">500</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-cli分析工具"><a href="#vue-cli分析工具" class="headerlink" title="vue-cli分析工具"></a>vue-cli分析工具</h3><p><code>npm run build --report</code></p><h3 id="vue的循环v-for如何一次循环2条项目？"><a href="#vue的循环v-for如何一次循环2条项目？" class="headerlink" title="vue的循环v-for如何一次循环2条项目？"></a>vue的循环v-for如何一次循环2条项目？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"i in (items.length / 2)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;items[(i - 1) * 2].name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;items[(i - 1) * 2 + 1].name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要处理奇数问题</p>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-native我们应该知道的]]></title>
      <url>http://jintang.github.io/2018/05/11/react-native%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<blockquote><p>记录下自己遇到的…</p></blockquote><h3 id="react-native-须知"><a href="#react-native-须知" class="headerlink" title="react-native 须知"></a>react-native 须知</h3><h4 id="React的每个组件里，必须import-React"><a href="#React的每个组件里，必须import-React" class="headerlink" title="React的每个组件里，必须import React"></a><code>React</code>的每个组件里，必须<code>import React</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><p>因为组件内部隐式的使用了<code>React</code>，比如<code>jsx</code>语法等</p><h4 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h4><p>分为函数式组件和 class 组件，我们一般使用 class 组件。</p><ul><li><p>函数式组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 接受的参数是 props */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong> 组件名称必须以大写字母开头。</p><h4 id="组件触发事件"><a href="#组件触发事件" class="headerlink" title="组件触发事件"></a>组件触发事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 方法1. 在Render中使用bind绑定，此时方法的定义用es5的这种语法</span></span><br><span class="line">        &lt;Text onPress=&#123;<span class="keyword">this</span>.handleClick1.bind(<span class="keyword">this</span>)&#125;&gt;点击&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 方法2. 定义类属性，使用es6的语法定义方法</span></span><br><span class="line"><span class="regexp">        &lt;Text onPress=&#123;this.handleClick2&#125;&gt;点击&lt;/</span>Text&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick1() &#123;</span><br><span class="line">    <span class="comment">// do something1</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something2...  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用方式2，简单明了，且没有副作用。详解请参看 <a href="https://react.docschina.org/docs/faq-functions.html" target="_blank" rel="noopener">官方文档</a><br><a id="more"></a></p><h4 id="遍历渲染组件："><a href="#遍历渲染组件：" class="headerlink" title="遍历渲染组件："></a>遍历渲染组件：</h4><p><code>jsx</code> 中只能写表达式，不能写多行语句,所以不能写 <code>if else</code> 、 <code>for</code> … 最佳循环写法是使用 <code>map</code> 函数<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    arr.map((item, index) =&gt; <span class="tag">&lt;<span class="name">View</span> <span class="attr">key</span>=<span class="string">&#123;item.id</span> || <span class="attr">index</span>&#125; /&gt;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  或----------------------------------  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    arr.map((index, index) =&gt; &#123;</span><br><span class="line">        return (<span class="tag">&lt;<span class="name">View</span> <span class="attr">key</span>=<span class="string">&#123;index.id</span> || <span class="attr">index</span>&#125; /&gt;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><em>注意：</em></p><ul><li><code>key</code> 必须在其兄弟节点中是唯一的，而非全局唯一</li><li>并不建议使用元素在数组中的索引作为 <code>key</code> 。若数组没有重排，该方法效果不错，但若重排了（比如数组内重新排序、数组头部插入新元素），那样，内容相同的元素他们的 <code>key</code> 并不相同， <code>React</code> 就会都重新渲染，而且相同 <code>key</code> 元素也有可能以意想不到的方式混淆和更新。详情参考 <a href="https://react.docschina.org/docs/reconciliation.html" target="_blank" rel="noopener">这儿</a></li></ul><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref :"></a><a href="https://react.docschina.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">Ref</a> :</h4><p>分为 String 类型 和 回调函数类型，推荐使用回调函数类型，<code>React</code> 官方称 String 类型已过时并在未来版本可能被删除。还有一种是传递 <code>createRef()</code> 创建的 <code>ref</code> 属性 ，个人感觉不太方便，具体请看标题的超链接。</p><ul><li>当 <code>ref</code> 属性被用于一个普通的 <code>HTML</code> 元素时，回调函数将接收底层 <code>DOM</code> 元素作为它的参数</li><li>当 <code>ref</code> 属性被用于一个自定义类组件时，回调函数将接收 该组件已挂载的实例 作为它的参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoFocusTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.textInput.focusTextInput();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;CustomTextInput</span><br><span class="line">            <span class="comment">// input是CustomTextInput的实例</span></span><br><span class="line">            ref=&#123;(input) =&gt; &#123; <span class="keyword">this</span>.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>注意:</em> <code>ref</code> 只能用于 class 组件 ，不能用于 函数式组件， 因为函数式组件没有实例。</p><h4 id="PureComponent-与-shouldComponentUpdate-nextProps-nextState"><a href="#PureComponent-与-shouldComponentUpdate-nextProps-nextState" class="headerlink" title="PureComponent 与 shouldComponentUpdate(nextProps, nextState)"></a>PureComponent 与 shouldComponentUpdate(nextProps, nextState)</h4><p><code>shouldComponentUpdate(nextProps, nextState)</code>：</p><ul><li>不在初始化渲染或当使用 <code>forceUpdate()</code> 时被调用。当接收到新属性或状态时，<code>shouldComponentUpdate()</code> 在 <code>render()</code> 前被调用。</li><li>默认返回 <code>true</code> ，表示重新渲染。若我们想要在 <code>props</code>、 <code>state</code> 中的某些值变化时不重新渲染，通过与 <code>nextProps</code> 、 <code>nextState</code> 比较实现逻辑，在你想要的地方返回 <code>false</code></li></ul><p><code>PureComponent</code> ：<br>在某些场景下你可以使用 <code>React.PureComponent</code> 来提升性能。与 <code>React.Component</code> 几乎完全相同，但 <code>React.PureComponent</code> 通过 <code>prop</code> 和 <code>state</code> 的浅对比来实现 <code>shouldComponentUpate()</code></p><p>更多查看 <a href="https://react.docschina.org/docs/react-api.html" target="_blank" rel="noopener">这儿</a></p><h3 id="react-native-调试"><a href="#react-native-调试" class="headerlink" title="react-native 调试"></a>react-native 调试</h3><p>在调试网页的时候我们使用<code>Chrome Devtool</code> ，它上面有些面板非常好用，我最常用的有： <code>Source</code>、<code>Console</code> 、<code>Elements</code>、<code>NetWork</code>，现在我们调试 <code>React Native</code> 的 app 。我们分别使用以下工具来操作上面各项的调试：</p><ul><li><code>Source</code>、<code>Console</code> : 模拟器上打开 <code>Debug JS Remotely</code>， 就会在 <a href="http://localhost:8081/debugger-ui" target="_blank" rel="noopener">http://localhost:8081/debugger-ui</a> 上打开调试页面，将这个页面在 <code>Chrome</code> 中打开，然后就可以跟调试网页一样，可惜只能调试这两个面板，无法监控 <code>Network</code></li><li><code>Elements</code>； 安装 <code>react-devtools</code>， 并在模拟器上打开 <code>Toggle Inspector</code> 配合使用。具体参考 <a href="https://reactnative.cn/docs/debugging/" target="_blank" rel="noopener">官方文档</a></li><li><p><code>NetWork</code>: 前面说到 <code>Debug JS Remotely</code> 没法监控 <code>Network</code> , 这个问题官方还没解决，可以查看这个 <a href="https://github.com/facebook/react-native/issues/934" target="_blank" rel="noopener">issue</a>。当然聪明人很多，有大佬开发了 <a href="https://github.com/infinitered/reactotron" target="_blank" rel="noopener">reactotron</a> ,使用的话：</p><ul><li>需要安装这个软件、项目中安装依赖 <code>yarn add reactotron-react-native -D</code></li><li><p>添加配置文件<code>ReactotronConfig.js</code> 并引入到入门文件——<code>index.js</code>/<code>App.js</code> 首行即可</p><p>具体的请参考 <a href="https://github.com/infinitered/reactotron/blob/master/docs/quick-start-react-native.md" target="_blank" rel="noopener">官方链接</a> 或 <a href="https://juejin.im/post/5a61641751882573443cc202" target="_blank" rel="noopener">掘金的这篇文章</a>。<br><em>注意：</em> 如果要监听 <code>Android</code> 模拟器的请求，需要运行 <code>adb reverse tcp:9090 tcp:9090</code> （<strong>9090</strong>是 <code>Reactotron</code> 的默认端口） , 并且在 <code>ReactotronConfig.js</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reactotron.configure(&#123; <span class="attr">host</span>: <span class="string">'宿主机ip'</span> &#125;).connect()</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://github.com/infinitered/reactotron/issues/174" target="_blank" rel="noopener">此issue</a></p></li></ul></li></ul><h4 id="开启自动刷新：真机或者模拟器中Enable-Live-Reload-和Enable-Hot-Reloading同时打开，下面的情况需要重新编译"><a href="#开启自动刷新：真机或者模拟器中Enable-Live-Reload-和Enable-Hot-Reloading同时打开，下面的情况需要重新编译" class="headerlink" title="开启自动刷新：真机或者模拟器中Enable Live Reload 和Enable Hot Reloading同时打开，下面的情况需要重新编译:"></a>开启自动刷新：真机或者模拟器中<code>Enable Live Reload</code> 和<code>Enable Hot Reloading</code>同时打开，下面的情况需要重新编译:</h4><ul><li>增加了新的资源(比如给 <code>iOS</code> 的Images.xcassets或是 <code>Andorid</code> 的res/drawable文件夹添加了图片)</li><li>更改了任何的原生代码（objective-c/swift/java）</li></ul><h4 id="同时启动两个项目-需要同时启动两个packger与模拟器"><a href="#同时启动两个项目-需要同时启动两个packger与模拟器" class="headerlink" title="同时启动两个项目:需要同时启动两个packger与模拟器"></a>同时启动两个项目:需要同时启动两个packger与模拟器</h4><ol><li><p>同时启动两个<code>packger</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start --port 端口号</span><br></pre></td></tr></table></figure></li><li><p>启动两个模拟器之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android --deviceId [device_id]</span><br><span class="line"><span class="meta">#</span><span class="bash"> device_id可以通过下面的命令进行查看：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> adb devices</span></span><br></pre></td></tr></table></figure></li></ol><p><em>tip: 其他常用 <code>adb</code> 命令</em><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入模拟器shell命令</span></span><br><span class="line"><span class="built_in">cd</span> ...sdk/platform-tools/</span><br><span class="line">adb -s 设备名称 shell </span><br><span class="line"><span class="comment"># 获取模拟器配置(进入模拟器shell之后)</span></span><br><span class="line">getprop</span><br></pre></td></tr></table></figure><p></p><ol start="3"><li>如果是两个模拟器，和电脑在同一个wifi下，那分别在 <strong>dev-setting</strong> =&gt; <strong>Debug server host &amp; port for device</strong> 下添加：<strong>电脑ip:port</strong> 。设置之后按两次R重新加载 <code>bundle</code> 即可。<br><strong>注意：两个模拟器都必须指定端口,即使一个<code>packger</code>是默认端口。</strong><br><strong>疑问： 同时启动 ios 和 android 模拟器经常有一个会没反应，原因未知</strong></li></ol><h3 id="react-native-打包"><a href="#react-native-打包" class="headerlink" title="react-native 打包"></a>react-native 打包</h3><p><a href="https://reactnative.cn/docs/signed-apk-android/" target="_blank" rel="noopener">官方文档</a>介绍的很详细，下面只是些临时用作测试的打包</p><h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><p>不使用签名的简单打包：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> android</span><br><span class="line">./gradlew assembleRelease</span><br></pre></td></tr></table></figure><p></p><h3 id="react-native-常见错误"><a href="#react-native-常见错误" class="headerlink" title="react-native 常见错误"></a>react-native 常见错误</h3><h4 id="Native-module-模块名-tried-to-override-模块名-for-module-name-xxx-If-this-was-your-intention-set-canOverrideExistingModule-true"><a href="#Native-module-模块名-tried-to-override-模块名-for-module-name-xxx-If-this-was-your-intention-set-canOverrideExistingModule-true" class="headerlink" title="Native module 模块名 tried to override 模块名 for module name xxx. If this was your intention, set canOverrideExistingModule=true"></a>Native module 模块名 tried to override 模块名 for module name xxx. If this was your intention, set canOverrideExistingModule=true</h4><p><strong>原因：</strong> 通常重复执行 <code>react-link</code> 引起的，会在 <code>MainApplication.java</code> 、 <code>build.gradle</code> 、 <code>settings.gradle</code> 里重复导入包。这是 facebook 的官方bug，详情可以看 <a href="https://stackoverflow.com/questions/43032841/react-native-link-causes-duplicate-imports-in-android-settings-gradle" target="_blank" rel="noopener">stackoverflow</a></p><p><strong>解决方法:</strong> 检查 <code>MainApplication.java</code>，删除重复出现的包 。一般是在两个地方重复，一是 <code>import</code> ，二是 <code>protected List&lt;ReactPackage&gt; getPackages()</code> 里面。 <code>build.gradle</code> 、 <code>settings.gradle</code> 里虽然也重复了，但不会报错，项目也可以正常跑起来。</p><p><strong>注意：</strong> 有些包虽然你执行了 <code>react-native link</code>， 但并不会正确引入到原生代码里。比如说：<a href="https://github.com/yonahforst/react-native-permissions" target="_blank" rel="noopener">react-native-permissions</a>，需要单独执行 <code>react-native link react-native-permissions</code> 。具体情况还是多看看人家的 <code>README</code></p><h4 id="react-native-scrollable-tab-view-有时候不显示内容，升级到-0-7-4即可"><a href="#react-native-scrollable-tab-view-有时候不显示内容，升级到-0-7-4即可" class="headerlink" title="react-native-scrollable-tab-view 有时候不显示内容，升级到^0.7.4即可"></a>react-native-scrollable-tab-view 有时候不显示内容，升级到^0.7.4即可</h4><h4 id="genymotion-模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。"><a href="#genymotion-模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。" class="headerlink" title="genymotion 模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。"></a>genymotion 模拟器滑动时老切换到搜索页面，并出现00003。关闭有道词典的划词翻译即可。</h4><h4 id="android打包错误"><a href="#android打包错误" class="headerlink" title="android打包错误"></a>android打包错误</h4><p>本来好好地项目打包出错，比如这样的错误:<code>:app:packageDebug</code>,或者说什么解压不了文件什么的，可以尝试用下面的语句：<br></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">cd</span> <span class="keyword">android</span></span><br><span class="line"><span class="keyword">gradlew </span>clean</span><br></pre></td></tr></table></figure><p></p><p>清理缓存后重新打包</p><h4 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h4><ol><li><p>官方对 <code>android</code> 出了 <a href="https://reactnative.cn/docs/permissionsandroid/" target="_blank" rel="noopener">PermissionsAndroid</a> API，刚开始检测 相机权限 ，无论我在 app 中给没给相机权限，这个 API 给我返回的结果都是有权限。</p><p><strong>原因：</strong> <code>Android 6.0</code> 之前的版本只要是在 <code>AndroidManifest.xml</code> 申明的权限这个 API 都会返回有权限。</p><p><strong>解决方法：</strong> 需要修改 <code>build.gradle</code> 里的 <code>targetSdkVersion</code> 为 23 才可以。<em>注意： 需要卸载原来的 app 重新装。</em></p></li><li><p><code>Ios</code> 的权限判断使用 <a href="https://github.com/yonahforst/react-native-permissions" target="_blank" rel="noopener">react-native-permissions</a> , 其实 <code>android</code> 也可以使用这个，很方便。下面有个 demo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_requestCameraIosPermission = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> permitStr = <span class="string">'camera'</span>;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> Permissions.check(permitStr);</span><br><span class="line">    <span class="keyword">if</span> (response === <span class="string">'undetermined'</span>) &#123; <span class="comment">/* 之前没有弹出来过权限申请 */</span></span><br><span class="line">        <span class="keyword">let</span> requestResult = <span class="keyword">await</span> Permissions.request(permitStr);</span><br><span class="line">        <span class="keyword">return</span> requestResult === <span class="string">'authorized'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response !== <span class="string">'authorized'</span>) &#123;</span><br><span class="line">        Alert.alert(</span><br><span class="line">            <span class="string">'权限提醒'</span>,</span><br><span class="line">            <span class="string">'请到设置中开启INKubator Pay的相机权限'</span>,</span><br><span class="line">            [</span><br><span class="line">                &#123; <span class="attr">text</span>: <span class="string">'Ok'</span>, <span class="attr">onPress</span>: Permissions.openSettings &#125;, <span class="comment">/* 跳转到IOS系统的权限设置 */</span></span><br><span class="line">                &#123; <span class="attr">text</span>: <span class="string">'Cancel'</span>, <span class="attr">style</span>: <span class="string">'cancel'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="react-native-杂谈"><a href="#react-native-杂谈" class="headerlink" title="react-native 杂谈"></a>react-native 杂谈</h3><h4 id="Android-api与版本号对应关系"><a href="#Android-api与版本号对应关系" class="headerlink" title="Android api与版本号对应关系"></a><code>Android</code> api与版本号对应关系</h4><p><code>react native</code> 要求我们安装的 <code>sdk</code> 都是 api 23 的对应版本，这个对应的版本号是 <code>Andrid 6.0</code> ，其他的对应关系请参考 <a href="https://source.android.com/source/build-numbers" target="_blank" rel="noopener">这儿</a></p><h4 id="require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程"><a href="#require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程" class="headerlink" title="require只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程:"></a><code>require</code>只能使用静态字符串，因为它是在编译期执行，而不是运行期。js执行过程:</h4><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/react-native-run.png" alt="react-native-run"><br><code>React Native</code>从0.5.0版本开始已经内置<code>Babel</code>转换器</p><h4 id="Android-Studios-常用快捷键"><a href="#Android-Studios-常用快捷键" class="headerlink" title="Android Studios 常用快捷键"></a>Android Studios 常用快捷键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="XCode-常用快捷键"><a href="#XCode-常用快捷键" class="headerlink" title="XCode 常用快捷键"></a>XCode 常用快捷键</h4><ul><li>快速打开某一个文件: <strong>command + shift + O</strong></li><li>返回至上一次光标位置： <strong>control + command + ← , control + command + →</strong></li><li>快速查看当前class的方法： <strong>control + 6</strong></li></ul>]]></content>
      
        <categories>
            
            <category> react-native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx开启https]]></title>
      <url>http://jintang.github.io/2018/04/27/nginx%E5%BC%80%E5%90%AFhttps/</url>
      <content type="html"><![CDATA[<p>前段时间微信小程序很火，得闲时来写写小程序。本来想用豆瓣的 api ，但已经有人写了，好吧…那我就自己写个简单的 api 用用。程序已经写好了，但小程序要求后台必须是 <code>https</code>,好吧，那就给谷歌云搞个 <code>https</code>, 下面讲讲过程。万万没想到， 最后的结局是悲伤的，这个 api 最后还是用不成，因为小程序要求的接口域名必须是要经过备案的，而谷歌云无法备案，苦涩的哈哈哈… 。仅以此纪念学习这个的过程。</p><h3 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h3><p>首先在本地先试验下，用 <code>openssl</code> 生成了自签名证书，参考 <a href="http://www.xymiao.com/archives/769" target="_blank" rel="noopener">这儿</a>, 再修改下 <code>nginx.conf</code> 的配置，就可以访问 <a href="https://localhost" target="_blank" rel="noopener">https://localhost</a> 了，但放在谷歌云上却无法正确运行，不知道为什么…</p><p>那么，我们去买一个 <code>https</code> 证书来配置，==…发现有免费的，那自然用免费的，申请下载请参考 <a href="http://www.zslin.com/web/article/detail/72" target="_blank" rel="noopener">这儿</a>，文章中阿里云的免费证书已经不可以申请了，所以我申请了腾讯云的免费证书，不枉我玩了那么多腾讯游戏…手动笑哭</p><h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><p>免费的证书有 1 年的使用时间，下载下来的证书长这样：<img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/ca-dir.png" alt="https腾讯云证书"><br><a id="more"></a><br>在 <code>/etc/nginx</code> 下创建个 <code>ssl</code> 文件夹，此路径下的文件如图：<img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/nginx-dir.png" alt="nginx目录"><br>将下载下来 <code>nginx</code> 下的证书上传到 <code>ssl</code> 文件夹下。然后修改 <code>nginx.conf</code> 文件，只需要添加一个 <code>server</code> 配置，其他的都不变：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="comment"># http 的 server 配置，不变</span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="comment"># https 的 server 配置 </span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">443</span> <span class="string">ssl</span> <span class="string">http2</span> <span class="string">default_server;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="string">[::]:443</span> <span class="string">ssl</span> <span class="string">http2</span> <span class="string">default_server;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">_;</span></span><br><span class="line">        <span class="string">root</span>         <span class="string">/usr/share/nginx/html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加的证书信息, 主要修改下证书的路径</span></span><br><span class="line">        <span class="string">ssl_certificate</span> <span class="string">"/etc/nginx/ssl/1_cloud-tv.top_bundle.crt"</span><span class="string">;</span></span><br><span class="line">        <span class="string">ssl_certificate_key</span> <span class="string">"/etc/nginx/ssl/2_cloud-tv.top.key"</span><span class="string">;</span></span><br><span class="line">        <span class="string">ssl_session_cache</span> <span class="attr">shared:SSL:1m;</span></span><br><span class="line">        <span class="string">ssl_session_timeout</span>  <span class="number">10</span><span class="string">m;</span></span><br><span class="line">        <span class="string">ssl_ciphers</span> <span class="attr">HIGH:!aNULL:!MD5;</span></span><br><span class="line">        <span class="string">ssl_prefer_server_ciphers</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="string">include</span> <span class="string">/etc/nginx/default.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">proxy_pass</span> <span class="attr">http://localhost:3000;</span></span><br><span class="line">            <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$host;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">error_page</span> <span class="number">404</span> <span class="string">/404.html;</span></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/40x.html</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="string">/50x.html;</span></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>最后重启 <code>nginx</code> 服务就可以访问了。我是这样重启的<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop nginx</span><br><span class="line">$ systemctl start nginx</span><br></pre></td></tr></table></figure><p></p><p>感觉自己好傻逼…</p>]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker初识]]></title>
      <url>http://jintang.github.io/2018/04/24/docker%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<blockquote><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">阮大神</a>，有些介绍直接 copy 了阮大神的，因为阮大神写得很通俗易懂，嘿嘿</li></ul></blockquote><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 <code>Python</code> 应用，计算机必须有 <code>Python</code> 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><p><strong>解决方案：</strong></p><ol><li><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><ul><li><strong>资源占用多</strong>:<br>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</li><li><strong>冗余步骤多</strong>：<br>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</li><li><strong>启动慢</strong>：<br>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</li></ul></li><li><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><ul><li><strong>启动快</strong>:<br>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</li><li><strong>资源占用少</strong>：<br>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</li><li><strong>体积小</strong>：<br>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</li></ul></li></ol><p><strong>总之</strong>，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><a id="more"></a><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p><code>Docker</code> 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p><code>Docker</code> 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 <code>Docker</code>，就不用担心环境问题。</p><p>总体来说，<code>Docker</code> 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>Docker</code> 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。我们使用社区版。</p><p><code>Docker</code> 可以在<code>Mac</code>、<code>Linux</code>、<code>windows</code>下安装，其中的 windows 只能是 win10，我又没有 mac, 所以我使用谷歌云来进行安装，它是 <code>CentOs7</code>。</p><p>鉴于国内网络问题，强烈建议使用国内源<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \ 表示换行</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p></p><p>如果无法识别 <code>yum-config-manager</code> 命令，使用下面命令安装并重新登录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p></p><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br><span class="line">``` </span><br><span class="line">安装完成后，运行下面的命令，验证是否安装成功。</span><br><span class="line">``` bash</span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure><p></p><p><code>Docker</code> 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 <code>Docker</code> 用户组。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p></p><p><code>Docker</code> 是服务器—-客户端架构。命令行运行 <code>docker</code> 命令的时候，需要本机有 <code>Docker</code> 服务。如果这项服务没有启动，可以用下面的命令启动。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p></p><p>最后，验证 <code>docker</code> 是否可以正常运行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure><p></p><h3 id="image文件"><a href="#image文件" class="headerlink" title="image文件"></a>image文件</h3><p><strong>Docker 把应用程序及其依赖，打包在 image 文件里面，这就是 docker 里常说的镜像。</strong> 只有通过这个文件，才能生成 <code>Docker</code> 容器。 <code>image</code> 文件可以看作是容器的模板。 <code>Docker</code> 根据 <code>image</code> 文件生成容器的实例。同一个 <code>image</code> 文件，可以生成多个同时运行的容器实例。</p><p><code>image</code> 是二进制文件。实际开发中，一个 <code>image</code> 文件往往通过继承另一个 <code>image</code> 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 <code>image</code> 基础上，往里面加入 Apache 服务器，形成你的 <code>image</code>。</p><p><code>iamge</code> 常用命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取image</span></span><br><span class="line">$ docker pull [imageName]</span><br><span class="line"><span class="comment"># 显示本机所有的image</span></span><br><span class="line">$ docker images</span><br><span class="line"><span class="comment"># 删除 image 文件</span></span><br><span class="line">$ docker rmi [imageName]</span><br></pre></td></tr></table></figure><p></p><p><code>image</code> 文件是通用的，一台机器的 <code>image</code> 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 <code>image</code> 文件，而不是自己制作。即使要定制，也应该基于别人的 <code>image</code> 文件进行加工，而不是从零开始制作。</p><p>为了方便共享， <code>image</code> 文件制作完成后，可以上传到网上的仓库。 <code>Docker</code> 的官方仓库 <em>Docker Hub</em> 是最重要、最常用的 <code>image</code> 仓库。此外，出售自己制作的 <code>image</code> 文件也是可以的。</p><p>我们来使用下上面这些命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull hello-world</span><br><span class="line">$ docker images</span><br><span class="line">$ docker rmi hello-world</span><br></pre></td></tr></table></figure><p></p><h3 id="container文件"><a href="#container文件" class="headerlink" title="container文件"></a>container文件</h3><p><strong>image 运行时的实例，本身也是一个文件，称为容器文件。</strong></p><p>container 常用命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据image生成container并启动</span></span><br><span class="line">$ docker run [OPTIONS] imageName [<span class="built_in">command</span>]</span><br><span class="line"><span class="comment"># 启动已经停止的container</span></span><br><span class="line">$ docker start [containerId, ...]</span><br><span class="line"><span class="comment"># 查看正在运行的container，加 -a 显示所有的container</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># 停止container</span></span><br><span class="line">$ docker stop [containerId]</span><br><span class="line"><span class="comment"># 删除container</span></span><br><span class="line">$ docker rm [containerId]</span><br></pre></td></tr></table></figure><p></p><p><code>docker run</code> 常用的 options:</p><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；-it一起使用表示，容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器</li><li><strong>-p:</strong> 端口映射，将 <code>docker</code> 内部端口映射到本机端口,如 -p 8080:3000，8080表示本机端口</li></ul><p>我们来使用下上面这些命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world <span class="comment"># 本地找不到会自动在仓库下载</span></span><br><span class="line">$ docker ps</span><br><span class="line">$ docker stop [containerId]</span><br><span class="line">$ docker ps <span class="comment"># 只能看到正在运行的container</span></span><br><span class="line">$ docker ps -a</span><br><span class="line">$ docker rm [containerId]</span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p></p><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><p><code>Docker</code> 根据该文件生成二进制的 <code>image</code> 文件。</p><p>常用相关命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建image</span></span><br><span class="line">$ docker build [optiosn] PATH</span><br></pre></td></tr></table></figure><p></p><p>下面用实例来演示：</p><p>创建一个 <code>Dockerfile</code> 文件<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir docker-demo &amp;&amp; <span class="built_in">cd</span> docker-demo</span><br><span class="line">$ touch Dockfile</span><br><span class="line">$ vim Dockerfile</span><br></pre></td></tr></table></figure><p></p><p>填入如下内容：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> tang</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'hello docker'</span></span></span><br></pre></td></tr></table></figure><p></p><p>保存退出。继续下面的命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t hello-docker . </span><br><span class="line">$ docker images <span class="comment"># 可以看到生成的hello-docker</span></span><br><span class="line">$ docker run hello-docker <span class="comment"># 输出：hello docker</span></span><br></pre></td></tr></table></figure><p></p><p>上面 <code>docker build</code> 语句中：-t 指定 <code>image</code> 的名称，后面跟冒号可以指定标签，若没有指定，则默认为 <code>latest</code></p><p><code>Dockerfile</code> 文件常用命令：</p><ul><li><strong>FROM:</strong> 基础镜像</li><li><strong>MAINTAINER:</strong> 维护者</li><li><strong>WORKDIR:</strong> 指定工作目录</li><li><strong>ADD:</strong> 添加文件,可以添加远程文件</li><li><strong>COPY:</strong> 拷贝文件，但不允许远程文件</li><li><strong>RUN:</strong> 执行命令，允许出现多条</li><li><strong>CMD:</strong> 执行命令，只允许一条生效，若有多条，最后一条生效，若 <code>docker run</code> 命令后面有命令，会覆盖CMD命令</li><li><strong>EXPOSE:</strong> 暴露端口</li><li><strong>ENV:</strong> 设定环境变量</li><li><strong>ENTRYPOINT:</strong> 容器入口</li><li><strong>USER:</strong> 指定用户</li><li><strong>VOLUME:</strong> 挂载卷。如：<code>VOLUME /data</code> ， /data 目录就会在运行时自动挂载为匿名卷,任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。运行时可以覆盖这个挂载设置,如： <code>docker run -d -v mydata:/data imageName</code>, 使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置</li></ul><p>下面我们来个稍微复杂点的实例，还是在上面那个目录，先做些准备工作：</p><p>初始化一个 <code>node</code> 项目:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">$ npm install koa -S</span><br></pre></td></tr></table></figure><p></p><p>创建 <code>.dockerignore</code> 文件，并写入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line"><span class="keyword">node</span><span class="title">-debug</span>.log</span><br></pre></td></tr></table></figure><p>创建 <code>server.js</code> 并填写：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'hello koa2'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3006</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[demo] start-quick is starting at port 3006'</span>)</span><br></pre></td></tr></table></figure><p></p><p>准备工作完成，修改 <code>Dockerfile</code> , 参考 <a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/" target="_blank" rel="noopener">node官方demo</a>, 最终如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM node:carbon</span><br><span class="line">MAINTAINER tang</span><br><span class="line"><span class="comment"># Dockerfile 中每一个指令都会建立一层，使用 WORKDIR 后各层的当前目录就被改为指定的目录</span></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">COPY package*.json ./</span><br><span class="line"></span><br><span class="line">RUN \</span><br><span class="line">npm install -g nrm &amp;&amp; \</span><br><span class="line">nrm use taobao &amp;&amp; \</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">EXPOSE 3006</span><br><span class="line">CMD [<span class="string">"npm"</span>, <span class="string">"start"</span>]</span><br></pre></td></tr></table></figure><p></p><p>继续下面命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建image</span></span><br><span class="line">$ docker build -t hello-koa2 .</span><br><span class="line"><span class="comment"># 查看创建的image</span></span><br><span class="line">$ docker images</span><br><span class="line"><span class="comment"># run the image</span></span><br><span class="line">$ docker run -p 9000:3006 -d hello-koa2 <span class="comment"># 返回containerId</span></span><br><span class="line"><span class="comment"># 查看生成的container</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># Print app output</span></span><br><span class="line">$ docker logs containerId</span><br></pre></td></tr></table></figure><p></p><p>最后访问 <a href="localhost:9000" target="_blank" rel="noopener">localhost:9000</a>，可以看到结果： hello koa2</p><h3 id="发布-image-文件"><a href="#发布-image-文件" class="headerlink" title="发布 image 文件"></a>发布 image 文件</h3><p>容器运行成功后，就确认了 <code>image</code> 文件的有效性。这时，我们就可以考虑把 <code>image</code> 文件分享到网上，让其他人使用。假设我们要发布上面用到的 <code>hello-koa2 image</code> ，进行如下步骤：</p><p>首先，去 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 或 <a href="https://cloud.docker.com" target="_blank" rel="noopener">cloud.docker.com</a> 注册一个账户。然后，使用下面的命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker login <span class="comment"># 输入注册的用户名和密码</span></span><br><span class="line"><span class="comment"># 为本地的 image 标注用户名和版本。</span></span><br><span class="line">$ docker tag hello-koa2 [username]/[respository]:[tag]</span><br><span class="line"><span class="comment"># 我的是： docker tag hello-koa2 jintang/hello-koa2</span></span><br><span class="line">$ docker push jintang/hello-koa2</span><br></pre></td></tr></table></figure><p></p><p>现在就可以在 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 上登录自己的账号看到刚发布的 <code>image</code> 了</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p><code>Compose</code> 是 <code>Docker</code> 公司推出的一个工具软件，可以管理多个 <code>Docker</code> 容器组成一个应用。你需要定义一个 <em>YAML</em> 格式的配置文件 <code>docker-compose.yml</code> ，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>检测是否安装成功：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line"><span class="comment"># docker-compose version 1.21.0, build 5920eb0</span></span><br></pre></td></tr></table></figure><p></p><h4 id="编写-docker-compose-yml"><a href="#编写-docker-compose-yml" class="headerlink" title="编写 docker-compose.yml"></a>编写 docker-compose.yml</h4><p>现在我们要搭建一个 <code>wordpress</code> 站点，它需要 <code>wordpress</code> 容器和 <code>mysql</code> 容器。</p><p><strong>先看看不使用 compose 的实现方法:</strong></p><p>首先，基于官方的 <code>mysql image</code>， 新建并启动 <code>MySQL</code> 容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  -d \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpressdb \</span><br><span class="line">  --env MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  --env MYSQL_DATABASE=wordpress \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure><p></p><p>然后，基于官方的 <code>WordPress image</code> ，新建并启动 <code>WordPress</code> 容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  -d \</span><br><span class="line">  -p 9001:80 \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpress \</span><br><span class="line">  --env WORDPRESS_DB_PASSWORD=123456 \</span><br><span class="line">  --link wordpressdb:mysql \</span><br><span class="line">  --volume <span class="string">"<span class="variable">$PWD</span>/wordpress"</span>:/var/www/html \</span><br><span class="line">  wordpress</span><br></pre></td></tr></table></figure><p></p><p>解析：</p><ul><li><strong>–rm：</strong> 停止运行后，自动删除容器文件。</li><li><strong>–name wordpress：</strong> 容器的名字叫做wordpress。</li><li><strong>–env MYSQL_ROOT_PASSWORD=123456：</strong> 向容器进程传入一个环境变量 MYSQL_ROOT_PASSWORD ，该变量会被用作 MySQL 的根密码。</li><li><strong>–env MYSQL_DATABASE=wordpress：</strong> 向容器进程传入一个环境变量 MYSQL_DATABASE ，容器里面的 <code>MySQL</code> 会根据该变量创建一个同名数据库。</li><li><strong>–link wordpressdb:mysql</strong> ，表示 <code>WordPress</code> 容器要连到 <code>wordpressdb</code> 容器，冒号表示该容器的别名是 mysql</li><li><strong>–volume “$PWD/“:/var/www/html：</strong> 将当前目录（$PWD）映射到容器的 <code>/var/www/html</code> （Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到。</li></ul><p>现在访问 <a href="localhost:9001" target="_blank" rel="noopener">localhost:9001</a> 即可以看到安装页面，停止两个 container 后因为 <code>--rm</code> 就自动删除了。</p><p><strong>下面是使用 compose 的实现方法:</strong></p><p><code>docker-compose.yml</code> 写入如下内容：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">MYSQL_DATABASE=wordpress</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">WORDPRESS_DB_PASSWORD=123456</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"9001:80"</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/var/www/html</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">     - wordpress:</span><span class="string">/var/www/html</span></span><br></pre></td></tr></table></figure><p></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><p>访问 <a href="localhost:9001" target="_blank" rel="noopener">localhost:9001</a> 就可以看到 <code>wordpress</code> 的安装界面了</p><p>现在关闭两个容器。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure><p></p><p>关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose rm</span><br></pre></td></tr></table></figure><p></p><p>比起上面单独创建 container 的方式方便多了。</p><p><strong>ok, 本文结束。</strong></p>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue动态添加组件]]></title>
      <url>http://jintang.github.io/2018/03/27/vue%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote><p>大多数时候，我们都用单文件.vue文件来实现功能。比如添加一个dialog，代码如下：</p></blockquote><p><code>hello.vue</code><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showDialog"</span>&gt;</span>显示一个弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">v-if</span>=<span class="string">"dialogFlag"</span>&gt;</span><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                dialogFlag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            showDialog() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dialogFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123; Dialog &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>点击按钮即可显示弹框。很简单明了，功能划分也清晰，表示很开心。下面列出动态创建弹框的代码，可以跟上面的比较一下有啥优缺点，在不同的情景下选用不同的方案：<br><a id="more"></a><br><code>hello.vue</code><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showDialog"</span>&gt;</span>显示一个弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                dialogComp: <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            showDialog() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> dialogClass = Vue.extend(Dialog);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dialogComp = <span class="keyword">new</span> dialogClass().$mount()</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.vm.$el)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.vm.dialogFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123; Dialog &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>下面做一些解析：</p><ul><li><p><code>extend()</code>:</p><ul><li><p>参数是一个包含组件选项的对象，此处 <code>Dialog</code> 是 <code>import</code> 的一个单文件组件，其值为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;...&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;...&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引申一下，我们的单文件组件通过<code>import</code>后解析为一个<code>js</code>对象，在添加到<code>components</code>里后才可以按组件使用，内部机制请原谅我没深究…</p></li><li>返回值： 返回一个”子类”，通过<code>console</code>看到结构如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VueComponent(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>$mount([elementOrSelector])</code>: 通过<code>new</code>一个”子类”创建了一个<strong>未挂载</strong>的 <code>vue</code> 组件，<code>$mount()</code>用来挂载组件到页面，如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 <code>DOM API</code> 把它插入文档中。如上面的 <code>appendChild()</code> 。返回值是挂载后的 <code>vue</code>组件。</p></li></ul><p><strong>总结：</strong> 各有妙用,嘿嘿</p>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[经常遇到的小算法]]></title>
      <url>http://jintang.github.io/2018/03/21/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote><p>以此记录经常见到的小算法</p></blockquote><h2 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h2><p><strong>算法：</strong><a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95" target="_blank" rel="noopener">埃氏筛法</a>，简单解释如下：<br>首先，列出从2开始的所有自然数，构造一个序列：</p><blockquote><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：</p><blockquote><p>3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：</p><blockquote><p>5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p></blockquote><p>不断筛下去，这些第一个数的集合就是所有的素数。</p><p>以<code>python</code>代码为例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr = range(<span class="number">2</span>, <span class="number">100</span>) <span class="comment"># 生成2-100的序列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPrimeNum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fil</span><span class="params">(item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item % arr[<span class="number">0</span>] != <span class="number">0</span></span><br><span class="line">    result = []    </span><br><span class="line">    <span class="keyword">while</span> len(arr) != <span class="number">0</span>:</span><br><span class="line">        result.append(arr[<span class="number">0</span>])</span><br><span class="line">        arr = list(filter(fil, arr))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = getPrimeNum(arr)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a>]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx反向代理豆瓣接口]]></title>
      <url>http://jintang.github.io/2018/03/05/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B1%86%E7%93%A3%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote><p><code>nginx</code>是一个<code>web</code>服务器，类似<code>apache</code>。又不仅仅是个服务器，还可以<code>反向代理</code>、<code>负载均衡</code>…很多牛逼的网站都是用了<code>nginx</code>二次开发，比如说大名鼎鼎的 <strong>草榴</strong>。我们普通人可以通过<code>反向代理</code>来转发接口，实现 <strong>跨域</strong>。</p></blockquote><p>不论你是<code>windows</code>还是<code>linux</code>，都可以用下面三个步骤来概括：</p><ol><li>下载安装，<code>windows</code>下不需安装，解压即可</li><li>修改配置：<code>conf/nginx.conf</code></li><li>重启：第一次启动：<code>start nginx</code>；修改配置后重启：<code>nginx -s realod</code><br>然后访问就可以看到结果。</li></ol><p>那么，下面放上其中的重点——<strong>修改配置</strong>：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">~</span> <span class="string">/v2/</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="comment"># 反向代理https://api.douban.com</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="attr">https://api.douban.com;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>所谓<strong>反向代理</strong>，就是当你访问你的<code>nginx</code>服务器时，会转发到你设置的服务器上。比如上面当你访问<code>localhost</code>时，就转发到 <a href="https://api.douban.com" target="_blank" rel="noopener">https://api.douban.com</a> 上。即你访问<code>localhost</code>相当于访问 <a href="https://api.douban.com" target="_blank" rel="noopener">https://api.douban.com</a> 。</p><p>重启后就可以访问下豆瓣的接口了，比如：<a href="https://api.douban.com/v2/book/1220562" target="_blank" rel="noopener">https://api.douban.com/v2/book/1220562</a> 可以用 <a href="/v2/book/1220562">localhost/v2/book/1220562</a> 访问。<br><a id="more"></a><br><strong>Tip:</strong> <code>nginx</code>默认不支持<code>https</code>，如果要访问 <a href="https://localhost" target="_blank" rel="noopener">https://localhost</a> 来转发接口。需要 <code>https</code>证书，这种证书可以用两种方法获得：</p><ul><li>用<a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">openSSL</a>自己生成一个，这样转发的接口访问时谷歌浏览器会提示<strong>您的连接不是私密连接</strong>，你需要点击：高级——继续前往…就可以了，其他的浏览器类似。具体的做法可以参考<a href="http://www.xymiao.com/archives/769" target="_blank" rel="noopener">这里</a></li><li>买一个认证的证书，可以去阿里云等地方买一个，然后配置和上面差不多。</li></ul>]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谷歌云部署个人网站]]></title>
      <url>http://jintang.github.io/2018/01/24/%E8%B0%B7%E6%AD%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<blockquote><p>得知谷歌云免费的消息，喜出望外，毕竟阿里云腾讯云这些一年价格也不菲。赶紧申请了一个，想申请的抓紧了。废话不说了，跟我一起在谷歌云上部署一个个人网站吧。</p></blockquote><p>假设你已经拥有了一个谷歌云账号。没有的话赶紧注册一个，需要一个<strong>VISA</strong>的信用卡，其他的都是基本信息填写。</p><h2 id="谷歌云上创建-Compute-Engine-实例"><a href="#谷歌云上创建-Compute-Engine-实例" class="headerlink" title="谷歌云上创建 Compute Engine 实例"></a>谷歌云上创建 Compute Engine 实例</h2><ol><li>点击<a href="https://console.cloud.google.com/compute/instances" target="_blank" rel="noopener">这里</a>进入 <strong>Compute Engine</strong> 页面</li><li>选择 <strong>创建实例</strong><ul><li>地区选<code>asia-east1-c</code>，据说对大陆玩家友好。</li><li>机器类型：我选了 小型(一个共享vCPU) ，我部署的网站很小，所以这个就可以了</li><li>启动磁盘——更改：选择 <code>CentOS7</code>，其他不用变。因为我要用到<code>mongodb</code>，如果选择<code>debian9</code>，<code>mongodb</code>的官网目前还不支持，为了在<code>debian9</code>上安装<code>mongodb</code>，我也是被折磨得很心累。然后果断在同事的建议下果断新建了个<code>CentOS7</code>的<strong>实例</strong>。当然你也可以选择其他的…</li><li>管理、磁盘、网络、SSH密钥：需要改网络部分，如果你之前已经创建了<strong>静态IP</strong>，<strong>外部IP</strong>这一栏就选<code>临时</code>，如果没有创建的话，请选择<code>创建IP地址</code>。</li></ul></li><li>点击创建，结果如下：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/google-cloud-vm.png" alt="vm实例"></li></ol><a id="more"></a><h2 id="创建部署的项目"><a href="#创建部署的项目" class="headerlink" title="创建部署的项目"></a>创建部署的项目</h2><p>要在云服务器上部署一个网站，那首先肯定要从本地新建一个了。我选择了一个使用<code>node</code>和<code>mongodb</code>的博客系统，跟着<strong>nswbmw</strong>大神的<a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">N-blog</a>敲一遍，写完之后本地运行成功。感叹一下，大神的这个项目带了多少人走进了<code>node</code>。</p><p>如果不想关注创建项目，这儿就不用花费功夫，在下一步的时候可以直接使用大神的项目部署。</p><h2 id="进入云服务器部署"><a href="#进入云服务器部署" class="headerlink" title="进入云服务器部署"></a>进入云服务器部署</h2><p><strong>vm实例</strong>右侧有个<code>ssh</code>按钮，点击就可以进入到后台。当然我们可以使用其他<code>ssh</code>工具登陆，那个<code>ssh</code>按钮右边有个小三角，点开之后选择<strong>使用其他SSH客户端</strong>，就可以进入教程。</p><p>关于<code>ssh</code>工具的选择，最具代表性的是<strong>putty</strong>，我选择使用<strong>xshell</strong>，因为它是中文版的，我英语不好…而且功能比<strong>putty</strong>强大很多。更多<code>ssh</code>工具的选择，请参考<a href="https://llinmeng.github.io/2015/08/05/windows-ssh-tools-diff/" target="_blank" rel="noopener">这儿</a>。</p><p>废话不多说，<code>ssh</code>登陆后开始下面的步骤：</p><p><em>Tip:</em> 我的系统是<code>centOS7</code>，所以其他的系统会有稍微的区别，主要是包管理器的区别。如果是<code>debian</code>和<code>ubuntu</code>使用<code>apt-get</code>安装。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p><strong>方法1： </strong>使用源码安装包安装，你也可以选择其他方式，目前的最新稳定版是<code>8.9.4</code>，以下安装<code>node</code>的版本是<code>8.9.4</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget</span><br><span class="line"><span class="comment"># 在官方网站（https://nodejs.org/zh-cn/download/）查看链接并下载源码</span></span><br><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzvf node-v8.9.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v8.9.4</span><br><span class="line"><span class="comment"># 安装编译环境并编译</span></span><br><span class="line">sudo yum install gcc gcc-c++</span><br><span class="line">./configure</span><br><span class="line">make <span class="comment"># 这一步时间比较长</span></span><br><span class="line"><span class="comment"># 安装node</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 检测安装是否成功，出现版本号就成功了</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><p></p><p><strong>方法2：</strong>官方编译过的二进制数据包安装，更快速和方便<br>在<a href="https://nodejs.org/download/release/" target="_blank" rel="noopener">下载地址</a>选择要下载的版本，还是选择<code>8.9.4</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/download/release/v8.9.4/node-v8.9.4-linux-x64.tar.gz</span><br><span class="line">sudo tar --strip-components 1 -xzvf node-v8.9.4-linux-x64.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment"># 检测安装是否成功，出现版本号就成功了</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><p></p><h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><p>我们安装的<strong>mongodb社区版</strong>，根据<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">官方链接</a>安装并启动。</p><h3 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h3><p>之前我们不是在本地跟着大神写了一个项目，我们可以通过<strong>ftp</strong>将刚刚那个项目上传上来，也可以安装个<code>git</code>直接克隆大神的项目进行部署。我们直接克隆好了，更方便…<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/nswbmw/N-blog.git</span><br></pre></td></tr></table></figure><p></p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> N-blog</span><br><span class="line">npm i</span><br><span class="line">vim config/default.js <span class="comment">#修改端口 3000-&gt;80</span></span><br><span class="line">sudo node index</span><br><span class="line"><span class="comment"># 成功的提示: myblog listening on port 80</span></span><br></pre></td></tr></table></figure><p>如果成功了，那么访问你的<strong>静态ip</strong>这时候已经可以看到项目了。<br>我在最后运行的时候出现了这个问题:<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">command</span> is undefined</span><br></pre></td></tr></table></figure><p></p><p>因为<code>centOS</code>的安全策略，要运行 <strong>80</strong>端口必须以管理员身份运行，但在管理员身份下却获取不到<code>node</code>命令，解决办法是添加<strong>环境变量</strong>。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换为管理员</span></span><br><span class="line">sudo -i </span><br><span class="line"><span class="comment"># 获取node的位置</span></span><br><span class="line"><span class="built_in">which</span> node <span class="comment"># 我的是在/usr/local/bin/node</span></span><br><span class="line"><span class="comment"># 编辑环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line">    <span class="comment"># 在结尾处添加:</span></span><br><span class="line">    PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/ <span class="comment"># 结尾到bin/就可以了，不是bin/node</span></span><br><span class="line">    <span class="built_in">export</span> PATH</span><br><span class="line">    <span class="comment"># 使环境变量生效</span></span><br><span class="line">    <span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 检测是否生效，包含刚刚添加的表示生效了</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>   </span><br><span class="line">node --version <span class="comment"># 可以正确显示版本号</span></span><br></pre></td></tr></table></figure><p></p><p>经过上面的步骤，项目已经成功的跑了起来，访问<strong>静态ip</strong>已经可以看到项目。但如果关闭终端，我们的项目就又停止了，我们需要<code>pm2</code>作为守护进程启动博客</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> pm2 -g</span><br><span class="line">pm2 start index<span class="selector-class">.js</span> --name=<span class="string">"myblog"</span></span><br></pre></td></tr></table></figure><p>关闭终端，访问<strong>静态ip</strong>，我们的项目依旧在运行。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我们随便访问一个网站，地址栏里都输入的是域名，而非<code>IP</code>，所以我们也来个域名吧。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>购买域名可以去 <a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>…因为我只是为了玩，所以在<a href="https://www.zzidc.com/main/huodong/doMainActivity/spreadid_138149_hdName_doMainActivity.html" target="_blank" rel="noopener">景安网络</a>买个1年便宜的<code>.top</code>域名。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>进入<strong>域名控制面板</strong>——选择<strong>DNS解析管理</strong>——<strong>添加记录：</strong><br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/google-cloud-host.png" alt="host"><br>我的域名是<code>cloud-tv.top</code>，为了让<code>www.cloud-tv.top</code>也可用，我添加的记录如上图所示，下面解释一下：</p><blockquote><p>主机名这一列表示域名前缀，以<code>cloud-tv.top</code>为例，当值为：</p><ul><li>www：表示 <code>www.cloud-tv.top</code></li><li>留空：表示主域名 <code>cloud-tv.top</code></li><li>*：泛解析，表示匹配其他所有域名 <code>*.cloud-tv.top</code></li></ul></blockquote><ul><li>第一行：A记录，将域名指向ip。所以主机名我<strong>留空</strong>表示主域名，记录值填写ip</li><li>第二行：CNAME记录，增加子域名，指向到已有空间。所以主机名我填写<strong>www</strong>表示<code>www.cloud-tv.top</code>，记录值填写主域名</li></ul><p>当我访问<code>www.cloud-tv.top</code>时，先根据<strong>CNAME记录</strong>指向主域名<code>cloud-tv.top</code>。再根据<code>A记录</code>指向<strong>ip</strong>，这样完成了整个解析过程。</p><h3 id="检测解析完成"><a href="#检测解析完成" class="headerlink" title="检测解析完成"></a>检测解析完成</h3><p>等几分钟一般就解析完了。检测方法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping cloud-tv.top</span><br></pre></td></tr></table></figure><p></p><p>当域名后面出现你绑定的<code>ip</code>时说明解析成功。<br>更多域名解析的相关知识请自行百度。</p><p><strong>最后</strong>：访问 <a href="http://cloud-tv.top" target="_blank" rel="noopener">http://cloud-tv.top</a> 或 <a href="http://www.cloud-tv.top" target="_blank" rel="noopener">http://www.cloud-tv.top</a> 就可以看到之前部署的项目了。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/google-cloud-cost.png" alt="google-cost"><br>刚心血来潮查看了一下谷歌云的花费，然后算一笔账。第一行是我开的一个微型主机（可供选择里面最小的），用来翻墙，算下来一年的费用是<strong>$78.87</strong>。第二行就是我开的一个比上面一个高一级的主机（也就是可选择主机里排倒数第二），用来部署个人网站，算下来一年的费用是<strong>$481.65</strong>。而且这只是主机运行的费用，不包含流量费。so…谷歌云送的<strong>$300</strong>不够啊…看来我得把两个主机合成一个，用最小型号的那个主机。果然…没钱是多么苦…</p>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> 云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux学习]]></title>
      <url>http://jintang.github.io/2018/01/23/linux%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote><p>谷歌云有一个免费1年的服务，那就申请一个学习学习啦。对于<code>linux</code>之前只用过<code>ubuntu</code>，装啥环境感觉非常方便。用这篇文章来记录下自己的理解。</p></blockquote><p><code>linux</code>有很多发行的版本，想要了解请看<a href="http://blog.sciencenet.cn/blog-3373182-1089895.html" target="_blank" rel="noopener">这里</a>。我这次使用了其中的<code>centos7</code>和<code>debian9</code>。之前我使用的<code>ubuntu</code>是基于<code>Debian</code>的<code>unstable</code>版本加强而来。</p><h2 id="通用的命令"><a href="#通用的命令" class="headerlink" title="通用的命令"></a>通用的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ id <span class="comment"># 查看当前用户与其所在的组</span></span><br><span class="line">$ <span class="built_in">which</span> node <span class="comment"># 查看node命令所在地址</span></span><br><span class="line">$ man ps <span class="comment"># 查看ps命令的用法</span></span><br></pre></td></tr></table></figure><p><strong>systemctl</strong>命令：系统管理与服务管理<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mysqld <span class="comment"># 启动mysql服务</span></span><br><span class="line">$ sudo systemctl status mysqld <span class="comment"># 查看mysql服务的状态</span></span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> mysqld <span class="comment"># mysql单元开机启动</span></span><br><span class="line"><span class="comment"># 查看开启启动项：</span></span><br><span class="line"><span class="comment"># 只显示sysV services，上面的mysqld是不展示的</span></span><br><span class="line">$ chkconfig --list</span><br><span class="line"><span class="comment"># 查看系统服务，其中开机启动的服务状态是enabled，可以看到mysqld</span></span><br><span class="line">$ systemctl list-unit-files</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程状态：</p><ul><li>R： running or in run queue（在运行队列中等待）</li><li>S： sleeping，可中断的睡眠状态</li><li>D： uninterruptible sleep (usually IO)，不可中断的睡眠状态</li><li>T： traced or stopped，此刻进程是不可中断的</li><li>Z： zombie（僵尸），退出状态，进程成为僵尸进程</li></ul><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示progress status的静态结果。详细参数请点击<a href="http://man.linuxde.net/ps" target="_blank" rel="noopener">这儿</a>。<br><strong>常见用法：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认只显示运行在当前控制台下的属于当前用户的进程</span></span><br><span class="line">$ ps</span><br><span class="line"><span class="comment"># -a表示所有，加上x会显示所有进程，包括没有控制终端的进程</span></span><br><span class="line">$ ps -ax</span><br><span class="line"><span class="comment"># 查看tang用户下的进程，没有指定用户名时默认为当前用户</span></span><br><span class="line">$ ps -u tang</span><br><span class="line"><span class="comment"># 查看系统中所有用户下所有进程，显示全面信息，常用！</span></span><br><span class="line">$ ps -aux</span><br></pre></td></tr></table></figure><p></p><p><strong>引申用法：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 CPU 使用来升序排序</span></span><br><span class="line">$ ps -aux --sort -pcpu</span><br><span class="line"><span class="comment"># 根据 内存使用 来升序排序</span></span><br><span class="line">$ ps -aux --sort -pmem</span><br><span class="line"><span class="comment"># 将上面两个合并到一个命令，并通过管道显示前10个结果</span></span><br><span class="line">$ ps -aux --sort -pcpu,-pmem | head -n 10</span><br><span class="line"><span class="comment"># 根据进程名过滤，如下查找mongod进程</span></span><br><span class="line">$ ps -C mongod</span><br><span class="line"><span class="comment"># 根据PID过滤</span></span><br><span class="line">$ ps -L 1213</span><br><span class="line"><span class="comment"># 显示更多信息加-f</span></span><br><span class="line">$ ps -C mongod -f</span><br></pre></td></tr></table></figure><p></p><p><code>ps -aux</code>显示的结果：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/linux_ps_result.png" alt="ps_result"><br><strong>列的含义：</strong></p><ul><li>USER： 账号</li><li>PID： progress id</li><li>%CPU： 占用cpu百分比</li><li>%MEM：占用物理内存百分比</li><li>VSZ：占用虚拟内存(kb)</li><li>RSS：占用固定内存(kb)</li><li>TTY：该 process 是在哪个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</li><li>STAT：进程状态，参照本节刚开始的说明</li><li>START： 启动时间</li><li>TIME： 运行时间</li><li>COMMAND： 实际指令</li></ul><blockquote><p><strong>Tip：</strong>不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号：进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行</p></blockquote><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>实时（动态的）显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。<br><strong>使用：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top [参数]</span><br></pre></td></tr></table></figure><p></p><p><strong>参数说明：</strong></p><ul><li>d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</li><li>p 通过指定监控进程ID来仅仅监控某个进程的状态。</li><li>q 该选项将使top没有任何延迟的进行刷新。</li><li>c 显示整个命令行而不只是显示命令名</li><li>S 指定累计模式</li><li>s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</li><li>i 使top不显示任何闲置或者僵死进程。</li></ul><p><strong>结果：</strong><br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/linux-top-result.png" alt="top-result"><br><strong>含义：</strong></p><ol><li>top：<ul><li>08:01:27 当前时间</li><li>up 1 day, 23:14 系统运行时间，格式为时:分</li><li>1 user 当前登录用户数</li><li>load average: 0.00, 0.02, 0.05 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</li></ul></li><li>Tasks：进程状态，状态说明参考<code>ps</code>指令，不再详述</li><li>%Cpu(s)：cpu 百分比<ul><li>2.0 us 用户空间占用CPU百分比</li><li>4.0 sy 内核空间占用CPU百分比</li><li>0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比</li><li>94.0 id 空闲CPU百分比</li><li>0.0 wa 等待输入输出的CPU时间百分比</li><li>0.0 hi：硬件CPU中断占用百分比</li><li>0.0 si：软中断占用百分比</li><li>0.0 st：虚拟机占用百分比</li></ul></li><li>KiB Mem：物理内存使用情况，只解释下面一个，其他看单词就可以明白<ul><li>157056 buff/cache 用作内核缓存的内存量</li></ul></li><li>KiB Swap：交换区使用情况</li><li>统计区列的含义：下面没列出来的请参考<code>ps</code>指令。<ul><li>PR：priority。优先级</li><li>NI：nice。负值表示高优先级，正值表示低优先级</li><li>VIRT：进程使用的虚拟内存总量，单位kb。</li><li>RES：进程使用的、未被换出的物理内存大小，单位kb。</li><li>SHR：共享内存大小，单k位b</li><li>S：进程状态，参照本节刚开始的说明</li><li>TIME+：进程使用的CPU时间总计，单位1/100秒</li></ul></li></ol><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p><code>centos</code>与<code>debian</code>虽然使用的是不同的软件包管理器，但大体的命令都差不多</p><ul><li><p><code>centos</code>（<code>Redhat</code>系列一样）的包管理方式采用的是基于<code>RPM</code>包的<code>YUM</code>包管理方式，包分发方式是编译好的二进制文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-attr">[options]</span> <span class="selector-attr">[command]</span> <span class="selector-attr">[package ...]</span></span><br></pre></td></tr></table></figure><p><strong>options:</strong><code>-h</code>（帮助），<code>-y</code>（安装过程中的提示选择全部为”yes”），<code>-q</code>（不显示安装的过程）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install [package]              下载并安装一个rpm包</span></span><br><span class="line"><span class="comment"># yum localinstall [package.rpm]    安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</span></span><br><span class="line"><span class="comment"># yum -y update                              更新当前系统中安装的所有rpm包</span></span><br><span class="line"><span class="comment"># yum update [package]                 更新一个rpm包</span></span><br><span class="line"><span class="comment"># yum remove [package]                删除一个rpm包</span></span><br><span class="line"><span class="comment"># yum list                            列出当前系统中安装的所有包</span></span><br><span class="line"><span class="comment"># yum search [package]                 在rpm仓库中搜寻软件包</span></span><br><span class="line"><span class="comment"># yum clean [package]                   清除缓存目录（/var/cache/yum）下的软件包</span></span><br><span class="line"><span class="comment"># yum clean headers                      删除所有头文件</span></span><br><span class="line"><span class="comment"># yum clean all                                删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>Debian</code>最具特色的是<code>apt-get / dpkg</code>包管理方式，包分发方式是编译好的二进制文件。其实<code>Redhat</code>的<code>YUM</code>也是在模仿<code>Debian</code>的<code>APT</code>方式，但是<code>YUM</code>可供选择的包比较少。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"> apt-get [选项] 命令  </span><br><span class="line"> apt-get [选项] install pkg1 [pkg2 ...]  </span><br><span class="line">命令：  </span><br><span class="line"> update - 重新获取软件包列表  </span><br><span class="line"> upgrade - 进行更新  </span><br><span class="line"> install - 安装新的软件包  </span><br><span class="line"> remove - 移除软件包  </span><br><span class="line"> autoremove - 自动移除全部不使用的软件包  </span><br><span class="line"> purge - 移除软件包和配置文件  </span><br><span class="line"> <span class="built_in">source</span> - 下载源码档案  </span><br><span class="line"> build-dep - 为源码包配置编译依赖  </span><br><span class="line"> dist-upgrade - 发行版升级, 参见 apt-get(8)  </span><br><span class="line"> dselect-upgrade - 依照 dselect 的选择更新  </span><br><span class="line"> clean - 清除下载的归档文件  </span><br><span class="line"> autoclean - 清除旧的的已下载的归档文件  </span><br><span class="line"> check - 检验是否有损坏的依赖  </span><br><span class="line">  </span><br><span class="line">选项：  </span><br><span class="line"> -h 本帮助文件。  </span><br><span class="line"> -q 输出到日志 - 无进展指示  </span><br><span class="line"> -qq 不输出信息，错误除外  </span><br><span class="line"> -d 仅下载 - 不安装或解压归档文件  </span><br><span class="line"> -s 不实际安装。模拟执行命令  </span><br><span class="line"> -y 假定对所有的询问选是，不提示  </span><br><span class="line"> -f 尝试修正系统依赖损坏处  </span><br><span class="line"> -m 如果归档无法定位，尝试继续  </span><br><span class="line"> -u 同时显示更新软件包的列表  </span><br><span class="line"> -b 获取源码包后编译  </span><br><span class="line"> -V 显示详细的版本号  </span><br><span class="line"> -c=? 阅读此配置文件  </span><br><span class="line"> -o=? 设置自定的配置选项，如 -o dir::cache=/tmp</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[debounce与throttle]]></title>
      <url>http://jintang.github.io/2017/12/23/debounce%E4%B8%8Ethrottle/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noopener">David Corbacho’s article</a></li><li><a href="https://lodash.com/docs/4.17.4#debounce" target="_blank" rel="noopener">官方文档</a></li></ul><blockquote><p>在<code>lodash</code>的方法里，有两个比较有趣的方法：<code>debounce</code>与<code>throttle</code>，这两个方法是用来限制连续事件的触发频率的。具体的使用请查看<a href="https://lodash.com/docs/4.17.4#debounce" target="_blank" rel="noopener">官方文档</a>。</p></blockquote><h2 id="debounce-防抖"><a href="#debounce-防抖" class="headerlink" title="debounce: 防抖"></a>debounce: 防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.debounce(func, [wait=<span class="number">0</span>], [options=&#123;</span><br><span class="line">    leading: <span class="literal">false</span>,</span><br><span class="line">    maxWait: <span class="built_in">Number</span>,</span><br><span class="line">    trailing: <span class="literal">true</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p><strong>作用：</strong>连续触发的事件，如果一直在触发，没有中途暂停且暂停时间超过<code>wait</code>,那么这些事件会合并为一次，直到暂停时间超过<code>wait</code>时执行。然后判断下一轮…直到事件最后一次触发。<br><strong>使用：</strong><br><code>debounce()</code>接受一些配置参数，返回一个 <em>new debounced function</em>，这个对象拥有<code>cancel</code>、<code>flush</code>方法，这两个方法都不咋用，就看看配置参数就行了。<br>默认的效果图：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/debounce.webp" alt="debounce默认效果图"><br>使用<code>leading</code>属性的效果图：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/debounce-leading.webp" alt="debounce使用leading属性的效果图"><br>所以，当设置<code>leading:true, trailing: false</code>时会在<code>wait</code>时间段的开始触发合并后的事件。</p><a id="more"></a><p><em>注意：</em><code>leading: true,trailing: true</code>时同默认情况<br>自己尝试一下,鼠标在<em>trigger area</em>上不停的动:</p><div style="min-width:900px;transform:translateX(-50%);margin-left:50%;margin-bottom:-85px"><br><p data-height="360" data-theme-id="0" data-slug-hash="GZWqNV" data-default-tab="result" data-user="dcorb" data-embed-version="2" data-pen-title="Debounce. Leading" class="codepen">See the Pen <a href="https://codepen.io/dcorb/pen/GZWqNV/" target="_blank" rel="noopener">Debounce. Leading</a> by Corbacho (<a href="https://codepen.io/dcorb" target="_blank" rel="noopener">@dcorb</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br></div><p>还有一个<code>maxWait</code>属性，请查看<strong>区别</strong>这一部分。<br><em>注意：</em><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WRONG</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   _.debounce(doSomething, <span class="number">300</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RIGHT</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, _.debounce(doSomething, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><p></p><p><strong>使用场景：</strong></p><ul><li><code>scroll</code>、<code>resize</code>、<code>输入验证</code>这种连续触发的事件，触发时运行某些代码，大多数时候你可能不需要每次事件都要运行这些代码。比如<code>input</code>输入时验证</li><li>有个新增弹框，为了防止快速点击两次确定按钮提交两次接口，可以使用<code>debounce</code></li></ul><h2 id="throttle：节流"><a href="#throttle：节流" class="headerlink" title="throttle：节流"></a>throttle：节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.throttle(func, [wait=<span class="number">0</span>], [options=&#123;</span><br><span class="line">    leading: <span class="literal">true</span>,</span><br><span class="line">    trailing: <span class="literal">true</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p><strong>作用：</strong>连续触发的事件，如果一直在触发，不论有没有中途暂停,<code>wait</code>时间段里的事件会被合并为一次。<br><strong>使用：</strong><br>参数少了个<code>maxWait</code>，其他的不论是参数还是返回值和<code>debounce</code>都一样。<br>自己尝试一下，无限滚动：</p><div style="min-width:900px;transform:translateX(-50%);margin-left:50%;margin-bottom:-85px"><br><p data-height="500" data-theme-id="0" data-slug-hash="eJLMxa" data-default-tab="result" data-user="dcorb" data-embed-version="2" data-pen-title="Infinite scrolling throttled" class="codepen">See the Pen <a href="https://codepen.io/dcorb/pen/eJLMxa/" target="_blank" rel="noopener">Infinite scrolling throttled</a> by Corbacho (<a href="https://codepen.io/dcorb" target="_blank" rel="noopener">@dcorb</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br></div><p><strong>使用场景：</strong></p><ul><li><code>scroll</code>无限滚动翻页，此时不能用<code>debounce</code>，因为一直连续触发，只要你没有中间暂停时间超过<code>wait</code>，那你滚动的那么多事件都会合并为一次。此时用<code>throttle</code>,连续触发的事件在每<code>wait</code>事件内触发的多次会合并为一次，还是可以连续触发，只不过频率降低了</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>这两个方法非常相似，都降低了触发频率，只有一点细微的差别：<br><code>throttle</code>方法其实是加了<code>maxWait</code>选项的<code>debounce</code>方法，<code>lodash</code>的源码中就可以看到。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> leading = <span class="literal">true</span>,</span><br><span class="line">      trailing = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func != <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(FUNC_ERROR_TEXT);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isObject(options)) &#123;</span><br><span class="line">    leading = <span class="string">'leading'</span> <span class="keyword">in</span> options ? !!options.leading : leading;</span><br><span class="line">    trailing = <span class="string">'trailing'</span> <span class="keyword">in</span> options ? !!options.trailing : trailing;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounce(func, wait, &#123;</span><br><span class="line">    <span class="string">'leading'</span>: leading,</span><br><span class="line">    <span class="string">'maxWait'</span>: wait,</span><br><span class="line">    <span class="string">'trailing'</span>: trailing</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结语：</strong><br>大神David Corbacho说建议直接使用<code>lodash</code>或<code>underscore</code>的这两个方法。这里放下源码的地址：<a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener">debounce</a>,利用的是<code>setTimeout</code>方法实现这种效果。</p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue静态资源放在src/assets与static目录下的区别]]></title>
      <url>http://jintang.github.io/2017/11/03/vue%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%94%BE%E5%9C%A8src-assets%E4%B8%8Estatic%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote><ul><li><a href="http://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">官方链接</a></li><li><a href="https://segmentfault.com/q/1010000009842688" target="_blank" rel="noopener">翻译链接</a></li></ul></blockquote><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>为了回答这个问题，我们首先需要了解Webpack如何处理静态资产。在 <code>*.vue</code>组件中，所有模板和CSS都会被 <code>vue-html-loader</code> 及 <code>css-loader</code> 解析，并查找资源URL。例如，在 <code>&lt;img src=&quot;./logo.png&quot;&gt; 和 background: url(./logo.png)</code> 中，<code>&quot;./logo.png&quot;</code>是相对的资源路径，将由<strong>Webpack</strong>解析为模块依赖。</p><p>因为 <code>logo.png</code> 不是 JavaScript，当被视为模块依赖时，需要使用 <code>url-loader</code> 和 <code>file-loader</code>处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。</p><p>由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将Webpack 处理的静态资源放在 <code>/src</code> 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 <code>/src/assets</code>：可以用<code>模块/组件</code>的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。<br><a id="more"></a></p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>相比之下，<code>static/</code> 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终目录（默认是<code>dist/static</code>）下。必须使用绝对路径引用这些文件，这是通过在 <code>config.js</code> 文件中的 <code>build.assetsPublicPath</code> 和 <code>build.assetsSubDirectory</code> 连接来确定的。</p><p>任何放在 <code>static/</code> 中文件需要以绝对路径的形式引用：<code>/static/[filename]</code>。如果更改 <code>assetSubDirectory</code> 的值为 <code>assets</code>，那么路径需改为 <code>/assets/[filename]</code>。</p><h2 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"filterIcon(item.pollingState)"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pollingIcon"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            filterIcon(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> commonUrl = <span class="string">'../../../../static/images/assetpolling/'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> commonUrl + <span class="string">'pollingSuccess.png'</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> commonUrl + <span class="string">'pollingLoading.gif'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>src</code>的值是一个变量，放在<code>staic</code>下能访问到图片，放在<code>assets</code>下访问不到。如果是一个字符串常量，<code>static</code>和<code>assets</code>下都可以访问到。</p><p><strong>分析：</strong>官方说，在 <code>*.vue</code>组件中，所有模板和CSS都会被 <code>vue-html-loader</code> 及 <code>css-loader</code> 解析，并查找资源URL。所以对应的资源如果是个字符串常量，在<strong>编译期</strong>就已经被解析为<code>Base64</code>与代码融合为一体。而如果<code>src</code>对应的是个变量，只有在<strong>运行期</strong>才会被解析，这时候就访问不到<code>assets</code>目录下的资源了。</p><p><strong>结论:</strong>当资源对应的是变量时，资源放在<code>static</code>下。第三方的类库的资源也放在<code>static</code>下。其他时候个人感觉相同。</p><p><em>tip: 如果有不对的地方请留言</em></p>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种环境下使用es6]]></title>
      <url>http://jintang.github.io/2017/09/28/%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8es6/</url>
      <content type="html"><![CDATA[<blockquote><p>不讲为什么使用es6，只讲es6如何在各种环境下使用。目前浏览器…环境都不支持es6，所以我们需要<a href="http://babeljs.cn/" target="_blank" rel="noopener">babel</a></p></blockquote><h2 id="浏览器中使用"><a href="#浏览器中使用" class="headerlink" title="浏览器中使用"></a>浏览器中使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/babel-core/browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"> <span class="comment">// 注意type</span></span></span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  test() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> test = <span class="keyword">new</span> Test;</span></span><br><span class="line"><span class="actionscript">test.test(); <span class="comment">// "test"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong><code>Babel</code>可以用于浏览器环境,但是从<code>Babel 6.0</code>开始，不再直接提供浏览器版本，而是要用构建工具构建出来。所以，我们只是做简单的<code>html</code>时，又不想使用构建工具，可以通过<code>安装5.x版本的babel-core模块获取</code>。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core@5</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="命令行转换使用"><a href="#命令行转换使用" class="headerlink" title="命令行转换使用"></a>命令行转换使用</h2><p>我们创建了一个用<code>es6</code>写的js文件，想要运行，但是不想使用构建工具,可以使用<code>babel</code>提供的命令行工具。</p><ol><li><p>安装命令行工具:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cli -g // 全局安装</span><br></pre></td></tr></table></figure></li><li><p>配置编译规则</p><ul><li><p>添加<code>babel</code>用来转换的依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ES2015转码规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-es2015</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev babel-preset-stage-3</span></span><br></pre></td></tr></table></figure></li><li><p>在根目录下创建<code>.babelrc</code>文件并添加配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是为了演示添加的简单配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用：<br>放个<a href="http://babeljs.cn/docs/usage/cli/" target="_blank" rel="noopener">官方链接</a>，懒得写了。<br>因为我不想让<code>babel</code>编译了之后重新生成个文件，所以我一般用<code>babel-node</code>命令测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-node 文件名</span><br></pre></td></tr></table></figure><p>即可在命令行看到结果。</p></li></ol><h2 id="构建工具中使用"><a href="#构建工具中使用" class="headerlink" title="构建工具中使用"></a>构建工具中使用</h2><p>…未完待续</p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
            <tag> babel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中遇到的坑]]></title>
      <url>http://jintang.github.io/2017/05/17/vue%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<blockquote><p>仅以此记录 vue 中遇到的坑</p></blockquote><h3 id="组件的复用问题"><a href="#组件的复用问题" class="headerlink" title="组件的复用问题"></a>组件的复用问题</h3><blockquote><p><code>Vue</code>的虚拟DOM中，<code>Vue</code>会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。</p></blockquote><p><em>然后我遇到了这样的bug：</em>同事做了一个<code>scrollbar</code>的组件,我用在了<code>steps</code>组件中，用了多个。在点击<strong>下一步</strong>的时候当前<code>step</code>下的组件会销毁，我特意加了<code>v-if</code>，下一个<code>step</code>下的组件会创建，问题来了…上一步的<code>scrollbar</code>组件影响到了当前创建下的<code>scrollbar</code>组件。</p><p><em>原因：</em><code>Vue</code>的算法会尝试复用组件</p><p><strong>解决方案：</strong>使用<code>key</code>，它会基于<code>key</code>的变化重新排列元素顺序，并且会移除<code>key</code>不存在的元素。加了<code>key</code>之后，就会重新渲染，而不是复用了。<br>代码：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepContent"</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">v-else-if</span>=<span class="string">"currentStep == 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">"scrollheight"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">s-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepContent"</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">v-else-if</span>=<span class="string">"currentStep == 2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">"scrollheight"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">s-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><em>结语：</em>我想大多数玩家和我一样，都是在<code>v-for</code>里用到了<code>key</code>，我虽然用到了，但是没有真正理解它，所以才会碰到这个bug不知道原因，还傻乎乎的去看组件的源码，浪费了很长时间。理解最值得重视…</p><p>最后附上：<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">key的官方介绍</a><br><a id="more"></a></p><h3 id="数据的拷贝和动态组件产生的bug"><a href="#数据的拷贝和动态组件产生的bug" class="headerlink" title="数据的拷贝和动态组件产生的bug"></a>数据的拷贝和动态组件产生的bug</h3><blockquote><p>自己用<code>element</code>的<code>input</code>和<code>tree</code>合成了一个<code>inputTree</code>组件</p></blockquote><p>想使用动态组件来生成不同的表单，代码如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :is=&quot;getDynamicComp(item)&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;&lt;/component&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list: [</span><br><span class="line">                &#123;</span><br><span class="line">                    htmlType: &apos;udf_char_single_line&apos;,</span><br><span class="line">                    value: &apos;&apos;</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    htmlType: &apos;udf_char_list&apos;,</span><br><span class="line">                    value: &apos;&apos;,</span><br><span class="line">                    listvalues: [</span><br><span class="line">                        &#123;value：1&#125;,</span><br><span class="line">                        &#123;value：2&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getDynamicComp(item) &#123;</span><br><span class="line">            let dynamicComp = &#123;</span><br><span class="line">              data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                  item: item</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              template: &apos;&apos;</span><br><span class="line">            &#125;;</span><br><span class="line">            if (item.htmlType === &apos;udf_char_single_line&apos;) &#123;</span><br><span class="line">              dynamicComp.template = `&lt;s-input v-model=&quot;$&#123;item.value&#125;&quot;&gt;&lt;/s-input&gt;`;</span><br><span class="line">            &#125; else if (item.htmlType === &apos;udf_char_list&apos;) &#123;</span><br><span class="line">              dynamicComp.template = &apos;&lt;s-select v-model=&quot;item.value&quot;&gt;&apos; +</span><br><span class="line">                  &apos;&lt;s-option v-for=&quot;(option,index) in item.listvalues&quot; :key=&quot;index&quot; :value=&quot;option.value&quot;&gt;&lt;/s-option&gt;&apos; +</span><br><span class="line">                &apos;&lt;/s-select&gt;&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            return dynamicComp;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结果：</strong><code>input</code>和<code>select</code>都生成了，但是改变不了数据<br><strong>原因:</strong>改变<code>input</code>和<code>select</code>的值时，<code>list</code>数组会变化，这个<code>list</code>其实还在我另外一个组件中使用，另外一个组件监听了这个<code>list</code>的变化,由此<code>getDynamicComp()</code>重新计算，然后重新生成动态组件，动态组件里面的<code>input</code>、<code>select</code>又恢复到了初始渲染状态,所以改变数据无效</p><p><strong>最后:</strong>提供对象浅拷贝和深拷贝的方法</p><ol><li><p><strong>浅拷贝：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br></pre></td></tr></table></figure></li><li><p><strong>深拷贝：</strong></p><ul><li><p><strong><code>json</code>转化：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br></pre></td></tr></table></figure><p>非常简单，但是有两个常见的错误:</p><ul><li>如果属性是函数会被忽略</li><li>如果有循环引用会报错</li></ul><p><code>JSON.stringify()</code>拥有三个参数(参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">官方描述</a>)，第一个错误可以用下面的代码修复：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(json, <span class="function"><span class="keyword">function</span>(<span class="params">key,val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> val==<span class="string">'function'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> val+<span class="string">''</span><span class="comment">//手动将其字符串化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">),<span class="function"><span class="keyword">function</span>(<span class="params">key,val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val.indexOf&amp;&amp;val.indexOf(<span class="string">'function'</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"(function()&#123;return "</span>+val+<span class="string">" &#125;)()"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第二个错误只能望而叹之。</p></li><li><p><strong>递归拷贝：</strong><br>可以使用<code>lodash</code>的<code>_.cloneDeep(obj)</code>方法,通过学习这个库，咱们可以简单实现这样的一个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneDeep</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result;</span><br><span class="line">        <span class="keyword">if</span>(value.constructor === <span class="built_in">Object</span>) &#123; <span class="comment">// 对象</span></span><br><span class="line">            result  = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> value) &#123;</span><br><span class="line">                result[i] = cloneDeep(value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.constructor === <span class="built_in">Array</span>) &#123; <span class="comment">// 数组</span></span><br><span class="line">            result  = [];</span><br><span class="line">            value.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">                result[index] = cloneDeep(item);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.constructor === <span class="built_in">Function</span>) &#123; <span class="comment">// 函数</span></span><br><span class="line">            result = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return "</span> + value.toString())();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// new String、new Date...的instanceof Object也为true，这些基本类型直接赋值</span></span><br><span class="line">            result = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面对于循环引用没做处理，因为对<code>lodash</code>的封装的<code>Stack</code>还不是很明白…</p></li></ul></li></ol>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6常用语法]]></title>
      <url>http://jintang.github.io/2017/04/20/es6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>含义：</p><p><strong>1.</strong> 函数中的剩余参数<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">object, ...keys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class="line">        result[keys[i]] = object[keys[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>keys</code> 是一个包含所有在 <code>object</code> 之后的参数的剩余参数（这与包含所有参数的 <code>arguments</code> 不同，后者会连第一个参数都包含在内）</p><p><strong>2.</strong> 数组的扩展运算: 将一个数组分割，返回分离的各个项<br>在<code>vuex</code>中的辅助函数中常有这样的用法，如下:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>作用是将<code>mapGetters</code>返回的数组分割开来放到了<code>computed</code>属性里<br>还有这样一个例子：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment">// 等价于 console.log(Math.max(25, 50, 75, 100, 120));</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values, <span class="number">120</span>)); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p></p><p><strong>3.</strong> 对象的扩展运算：属于es7的内容<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 2</span></span><br><span class="line">z; <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="comment">// 分隔符---------------------------</span></span><br><span class="line"><span class="keyword">let</span> n = &#123; x, y, ...z &#125;;</span><br><span class="line">n; <span class="comment">// &#123; x: 1, y: 2, a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="export与import"><a href="#export与import" class="headerlink" title="export与import"></a>export与import</h3><ul><li><p>命名导出: 对导出多个值很有用。在导入期间，必须使用相应对象的相同名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module "modules.js"</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Math</span>.PI + <span class="built_in">Math</span>.SQRT2;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; cube,foo &#125;;</span><br><span class="line"><span class="comment">// 导入时：</span></span><br><span class="line"><span class="keyword">import</span> &#123; cube, foo, a &#125; <span class="keyword">from</span> <span class="string">'modules.js'</span>;</span><br></pre></td></tr></table></figure></li><li><p>默认导出: 可以使用任何名称导入默认导出,且一个模块只能有一个默认的导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module "modules.js"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> k = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 导入时：</span></span><br><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">'modules.js'</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong>不能直接使用<code>var</code>，<code>let</code>或<code>const</code>作为默认导出<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;　　<span class="comment">// 正确,可以用这种方式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p></p><p><strong>原因：</strong><code>export</code>后面需要跟变量声明或者大括号作为输出，而<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add;</span><br><span class="line"><span class="comment">// 等同于 export &#123;add as default&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'modules'</span>;</span><br><span class="line"><span class="comment">// 等同于 import &#123; default as xxx &#125; from 'modules.js';</span></span><br></pre></td></tr></table></figure><p></p><p><strong>综合用法：</strong><br>一些成熟的框架都是这样导入的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><p></p><p>下面就是我们的实例：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="keyword">export</span> add() &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> reduce() &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> calcObj = &#123;add, reduce&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> calcObj;</span><br><span class="line"><span class="comment">// 导入时:</span></span><br><span class="line"><span class="keyword">import</span> calcObj, &#123;add, reduce&#125; <span class="keyword">from</span> <span class="string">'modules.js'</span></span><br></pre></td></tr></table></figure><p></p><h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator  函数"></a>Generator 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 该函数并不执行返回的值，也不是函数运行结果，</span></span><br><span class="line"><span class="comment">*  而是一个指向内部状态的指针对象：遍历器对象*/</span></span><br><span class="line"><span class="keyword">var</span> funIte = fun(); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 每次调用next方法，内部指针就从上一次停下来的地方</span></span><br><span class="line"><span class="comment">开始执行，直到遇到下一个yield语句（或return语句）为止*/</span></span><br><span class="line">funIte.next(); <span class="comment">// &#123;value: 'a', done: false&#125;</span></span><br><span class="line">funIte.next(); <span class="comment">// &#123;value: 'b', done: false&#125;</span></span><br><span class="line">funIte.next(); <span class="comment">// &#123;value: 'c', done: true&#125;</span></span><br><span class="line">funIte.next(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>这种函数有两个特征：</p><ul><li>function关键字后紧跟<code>*</code></li><li>函数内部用<code>yield</code>语句。yield意思是<em>产出</em></li></ul>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue自定义树组件s-tree]]></title>
      <url>http://jintang.github.io/2017/04/18/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%91%E7%BB%84%E4%BB%B6s-tree/</url>
      <content type="html"><![CDATA[<blockquote><p>本组件是基于<code>Vue2</code>的自定义tree组件，参考了<a href="https://github.com/weibangtuo/vue-tree" target="_blank" rel="noopener">weibangtuo</a>的实现，实现了以下功能:</p></blockquote><ul><li>节点单击钩子函数与选中效果</li><li>树节点默认的增删改</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><strong>1.</strong>基础使用：给<code>s-tree</code>组件传递<code>tree-data</code>即可,<code>treeData</code>中单个节点的数据结构:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'Node Name'</span>,</span><br><span class="line">  title: <span class="string">'Node Tag title attr'</span>,</span><br><span class="line">  isParent: <span class="literal">true</span>, <span class="comment">// Requested for parent node</span></span><br><span class="line">  isOpen: <span class="literal">false</span>, <span class="comment">//  Control node to fold or unfold</span></span><br><span class="line">  icon: <span class="string">'fa fa-folder'</span>, <span class="comment">// Icon class name</span></span><br><span class="line">  openedIcon: <span class="string">'fa fa-folder-open'</span>, <span class="comment">// 节点打开时的icon样式</span></span><br><span class="line">  closedIcon: <span class="string">'fa fa-folder'</span>, <span class="comment">// 节点折叠时的icon样式</span></span><br><span class="line">  children: [], </span><br><span class="line">  buttons: [ </span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'icon button tag title attr'</span>, <span class="comment">//[opt]</span></span><br><span class="line">      icon: <span class="string">'fa fa-edit'</span>,</span><br><span class="line">      click: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123; </span><br><span class="line">          <span class="comment">// 自定义事件</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>本例所使用的<a href="https://github.com/jintangWang/hello-vue/blob/master/src/components/my/tree/tree.json" target="_blank" rel="noopener">json数据</a><br><strong>2.</strong>节点单击事件：监听<code>node-click</code>,此方法接受了<code>node</code>参数(点击的节点对象)<br><strong>3.</strong>节点后的按钮事件: <code>buttons</code>下<code>click</code>的值可以是自定义方法，也可以默认方法，默认有<code>addNode</code>、<code>delNode</code>、<code>editNode</code>字符串<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tree-demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">s-tree</span> <span class="attr">:tree-data</span> = <span class="string">"treeData"</span> @<span class="attr">node-click</span>=<span class="string">"nodeClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">s-tree</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> sTree <span class="keyword">from</span> <span class="string">"src/common/component/tree"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> treeData =  <span class="built_in">require</span>(<span class="string">"./tree.json"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//自定义事件</span></span></span><br><span class="line"><span class="actionscript">treeData[<span class="number">0</span>].children[<span class="number">1</span>].buttons[<span class="number">0</span>].click=<span class="function"><span class="keyword">function</span><span class="params">(node)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'自定义添加事件'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data()&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            treeData: treeData</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components:&#123;</span></span><br><span class="line"><span class="undefined">        sTree</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods:&#123;</span></span><br><span class="line"><span class="undefined">        nodeClick(node)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(node);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/vue_tree.png" alt="s-tree"></p><h3 id="组件原理"><a href="#组件原理" class="headerlink" title="组件原理"></a>组件原理</h3><p>下面是一部分需要注意的地方讲解，其他的请查看底部的源代码链接</p><h4 id="使用递归组件"><a href="#使用递归组件" class="headerlink" title="使用递归组件"></a>使用递归组件</h4><p>因为不确定树有多少层，所以必须得使用递归组件，递归组件最重要的是什么时候跳出递归,本例使用了如下条件：<br><em>tree.vue</em><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"s-tree"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">s-tree-item</span> <span class="attr">v-for</span>=<span class="string">"node in innerTreeData"</span> <span class="attr">:key</span>=<span class="string">"node.name"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:node</span>=<span class="string">"node"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">s-tree</span> <span class="attr">v-if</span>=<span class="string">"node.isOpen &amp;&amp; node.children"</span> <span class="attr">:tree-data</span>=<span class="string">"node.children"</span>&gt;</span><span class="tag">&lt;/<span class="name">s-tree</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s-tree-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="node-click事件实现"><a href="#node-click事件实现" class="headerlink" title="node-click事件实现"></a>node-click事件实现</h4><p>由于组件是递归的，无法直接<code>$emit</code>事件给外部钩子函数，所以循环获取到了最外层的<code>s-tree</code>vue实例，通过此实例<code>$emit</code>事件暴漏给外部钩子函数<br><em>tree-item.vue</em>:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        nodeClick()&#123;</span><br><span class="line">            <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">while</span>(isNotTree(_this.$parent))&#123;</span><br><span class="line">                _this = _this.$parent;</span><br><span class="line">            &#125;</span><br><span class="line">            _this.$emit(<span class="string">'node-click'</span>,<span class="keyword">this</span>.node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNotTree</span>(<span class="params">vm</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> classStr = vm.$el.className;</span><br><span class="line">    <span class="keyword">if</span>(classStr.indexOf(<span class="string">'s-tree'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="单击节点选中效果实现"><a href="#单击节点选中效果实现" class="headerlink" title="单击节点选中效果实现"></a>单击节点选中效果实现</h4><p><code>s-tree-item</code>如果是单个循环的组件，不是递归的，那么直接在外层的<code>s-tree</code>创建变量储存选中的值，在<code>s-tree-item</code>内部与该值判断来实现选中效果就可以了，但是递归组件中<code>s-tree</code>也可能生成了多个，所以这个值不能储存在<code>s-tree</code>里，只能储存在一个单例里，这儿我使用了<code>事件中心</code>，代码如下:<br><em>tree-item.vue</em>:<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"s-tree-item"</span> @<span class="attr">click.stop</span>=<span class="string">"nodeClick"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"[statusIconClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;'is-active': activeValue === node.name&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>  <span class="attr">:class</span>=<span class="string">"[node.icon,nodeIconClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            &#123;&#123;node.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"node.buttons"</span> <span class="attr">v-for</span>=<span class="string">"button in node.buttons"</span> <span class="attr">class</span>=<span class="string">"iButton"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">:class</span>=<span class="string">"[button.icon]"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">:title</span>=<span class="string">"button.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'./bus.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        computed:&#123;</span></span><br><span class="line"><span class="undefined">            activeValue()&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> Bus.activeValue;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            nodeClick()&#123;</span></span><br><span class="line"><span class="actionscript">                Bus.$emit(<span class="string">'active'</span>,<span class="keyword">this</span>.node.name);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><em>bus.vue</em>:<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       name: <span class="string">'bus'</span>,</span></span><br><span class="line"><span class="undefined">       data()&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">               activeValue: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;,</span></span><br><span class="line"><span class="undefined">       created()&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">this</span>.$on(<span class="string">'active'</span>,<span class="keyword">this</span>.active);</span></span><br><span class="line"><span class="undefined">       &#125;,</span></span><br><span class="line"><span class="undefined">       methods:&#123;</span></span><br><span class="line"><span class="undefined">           active(value)&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.activeValue = value;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>对了，这儿使用<a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">vuex</a>也是可以的。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul><li><a href="https://github.com/jintangWang/hello-vue/tree/master/src/common/component/tree" target="_blank" rel="noopener">源代码</a></li><li><a href="https://jintangwang.github.io/hello-vue/#/my/tree-demo" target="_blank" rel="noopener">实例</a></li></ul>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> tree </tag>
            
            <tag> 自定义组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中上传照片生成带图片的二维码]]></title>
      <url>http://jintang.github.io/2017/04/13/vue%E4%B8%AD%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87%E7%94%9F%E6%88%90%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>本例使用了：</p><ul><li><a href="https://github.com/kciter/qart.js" target="_blank" rel="noopener">qart.js</a>：Generate artistic QR code</li><li><a href="http://javascript.ruanyifeng.com/htmlapi/canvas.html#toc5" target="_blank" rel="noopener">canvas</a></li></ul><h3 id="上传照片"><a href="#上传照片" class="headerlink" title="上传照片"></a>上传照片</h3><p>利用<code>&lt;input type=&quot;file&quot;&gt;</code>的<code>change</code>事件<br>html部分:<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"fileChange"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"originImg"</span> <span class="attr">alt</span>=<span class="string">"origin"</span> &gt;</span></span><br></pre></td></tr></table></figure><p></p><p>js部分:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QArt <span class="keyword">from</span> <span class="string">'qartjs'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fileChange(event)&#123;</span><br><span class="line">            <span class="keyword">let</span> files = event.target.files;</span><br><span class="line">            <span class="keyword">let</span> file = files[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(!file.type.match(<span class="string">'image.*'</span>))&#123;</span><br><span class="line">                alert(<span class="string">'请选择照片'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">            reader.readAsDataURL(file);</span><br><span class="line">            reader.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.generateQRcode(reader.result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        generateQRcode(base64Img)&#123;</span><br><span class="line">            <span class="keyword">this</span>.originImg = base64Img;</span><br><span class="line">            <span class="keyword">new</span> QArt(&#123;</span><br><span class="line">              value: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">              imagePath: base64Img,</span><br><span class="line">              filter: <span class="string">'color'</span>,</span><br><span class="line">              size: <span class="number">195</span></span><br><span class="line">            &#125;).make(<span class="keyword">this</span>.$refs.result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="下载二维码"><a href="#下载二维码" class="headerlink" title="下载二维码"></a>下载二维码</h3><p>利用<code>canvas</code>生成图片，让现代浏览器直接输出<code>image/octet-stream</code>实现图片自动弹出下载功能<br>html部分：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"resultImg"</span> <span class="attr">ref</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"download"</span>&gt;</span>下载二维码<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>js部分：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        download()&#123;</span><br><span class="line">            <span class="keyword">let</span> resultCanvas = <span class="keyword">this</span>.$refs.result.children[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> type = <span class="string">"image/png"</span>;</span><br><span class="line">            <span class="keyword">let</span> image = resultCanvas.toDataURL(type).replace(type, <span class="string">"image/octet-stream"</span>);</span><br><span class="line">            <span class="built_in">window</span>.location.href = image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="最后附上demo和源代码："><a href="#最后附上demo和源代码：" class="headerlink" title="最后附上demo和源代码："></a>最后附上demo和源代码：</h5><p><strong><a href="https://jintangwang.github.io/hello-vue/#/comment" target="_blank" rel="noopener">demo</a></strong><br><strong><a href="https://github.com/jintangWang/hello-vue/blob/master/src/components/comment/comment.vue" target="_blank" rel="noopener">源代码</a></strong></p>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> File </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中封装使用markdown并语法高亮]]></title>
      <url>http://jintang.github.io/2017/03/22/vue%E4%B8%AD%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8markdown%E5%B9%B6%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>最近学习Vue2.0，感觉很有意思，给大家分享一个在<code>vue</code>项目中写<code>markdown</code>的方法。国际惯例,先附上一些链接。</p></blockquote><ul><li><a href="https://github.com/chjj/marked" target="_blank" rel="noopener">marked</a>：A full-featured markdown parser and compiler, written in JavaScript.</li><li><a href="https://github.com/isagalaev/highlight.js/" target="_blank" rel="noopener">highlight.js</a>:Javascript syntax highlighter</li><li><a href="http://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">vue自定义指令</a></li></ul><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -S marked</span><br><span class="line">npm install -S highlight.js</span><br></pre></td></tr></table></figure><h3 id="vue中注册自定义指令"><a href="#vue中注册自定义指令" class="headerlink" title="vue中注册自定义指令"></a>vue中注册自定义指令</h3><p><code>main.js</code>:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Marked <span class="keyword">from</span> <span class="string">'./common/directive/marked.js'</span></span><br><span class="line">Vue.use(Marked);</span><br></pre></td></tr></table></figure><p></p><p><strong>ps:</strong><code>Vue.use()</code>会自动调用参数文件里的<code>install()</code><br><a id="more"></a><br><code>marked.js</code>:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'marked'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'highlight.js/styles/monokai-sublime.css'</span>;<span class="comment">//这个样式有多种类型可选择</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">marked.setOptions(&#123;</span><br><span class="line">  renderer: <span class="keyword">new</span> marked.Renderer(),</span><br><span class="line">  gfm: <span class="literal">true</span>,</span><br><span class="line">  tables: <span class="literal">true</span>,</span><br><span class="line">  breaks: <span class="literal">false</span>,</span><br><span class="line">  pedantic: <span class="literal">false</span>,</span><br><span class="line">  sanitize: <span class="literal">false</span>,</span><br><span class="line">  smartLists: <span class="literal">true</span>,</span><br><span class="line">  smartypants: <span class="literal">false</span>,</span><br><span class="line">  highlight: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'highlight.js'</span>).highlightAuto(code).value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (install.installed) <span class="keyword">return</span>;</span><br><span class="line">    Vue.directive(<span class="string">'marked'</span>,&#123;</span><br><span class="line">      <span class="comment">//注意，这儿得使用bind钩子函数，因为我们使用此指令主要是为了写文档，</span></span><br><span class="line">      <span class="comment">//文档里不会有变量且一次性生成,而update在自定义指令所在模板变化时就会重新执行，</span></span><br><span class="line">      <span class="comment">//会影响渲染文档的方法，所以不能使用update钩子，也不能使用函数简写</span></span><br><span class="line">      bind:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding,vnode</span>)</span>&#123;</span><br><span class="line">        el.innerHTML = marked(el.innerText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install;</span><br></pre></td></tr></table></figure><p></p><h3 id="使用自定义指令-v-marked"><a href="#使用自定义指令-v-marked" class="headerlink" title="使用自定义指令:v-marked"></a>使用自定义指令:<code>v-marked</code></h3><p>里面的缩进和空格也是<code>markdown</code>语法的一部分<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/vue_mark.png" alt="vue mark"><br><strong>结果：</strong><br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/vue_mark_result.png" alt="vue mark result"></p><p><strong>ps:</strong><br>代码语法高亮的样式可以有多种选择:<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/highlight.png" alt="highlight style"></p><h3 id="vue自定义指令相关知识"><a href="#vue自定义指令相关知识" class="headerlink" title="vue自定义指令相关知识"></a><code>vue</code>自定义指令相关知识</h3><h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><h5 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h5><ul><li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 <code>DOM</code> 。</li><li><strong>binding</strong>: 一个对象，包含以下属性：<ul><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, <code>value</code> 的值是 2。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的字符串形式。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo， arg</code> 的值是 <code>&quot;foo&quot;</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 <code>modifiers</code> 的值是 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><strong>vnode</strong>: <code>Vue</code> 编译生成的虚拟节点，查阅 <code>VNode API</code> 了解更多详情。</li><li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><h5 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h5><p>大多数情况下，我们可能想在 <code>bind</code> 和 <code>update</code> 钩子上做重复动作，并且不想关心其它的钩子函数。可以这样写:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先bind的时候执行一次，再多次执行update</span></span><br><span class="line">Vue.directive(<span class="string">'color-swatch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><blockquote><ul><li><strong><a href="https://jintangwang.github.io/hello-vue/dist/#/my" target="_blank" rel="noopener">我的demo</a></strong></li><li><strong><a href="https://github.com/jintangWang/hello-vue" target="_blank" rel="noopener">源代码</a></strong></li></ul></blockquote>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> marked </tag>
            
            <tag> highlight.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小疑问]]></title>
      <url>http://jintang.github.io/2017/01/19/%E5%B0%8F%E7%96%91%E9%97%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>记录一些闪过的疑问,有解决方法更好喽</p></blockquote><h3 id="获取数组中某一项的index"><a href="#获取数组中某一项的index" class="headerlink" title="获取数组中某一项的index?"></a>获取数组中某一项的index?</h3><ul><li><p><code>item</code>为<code>直接值</code>,如：数组、字符串等。这种很好获取index</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArr.indexOf(item);</span><br></pre></td></tr></table></figure></li><li><p>系列节点：获取<code>ul</code>中某一<code>li</code>的下标,这种多个变幻，不过还是很方便:<br>假如点击了当前<code>li</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.indexOf().call(<span class="keyword">this</span>.parentNode.childNodes,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>item</code>为对象时，如何获取？有没有很方便的方法？现在我用的常规方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIndexOfArray</span>(<span class="params">arr,item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i].uuid == item.uuid)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="如何判断一个节点上是否绑定了事件"><a href="#如何判断一个节点上是否绑定了事件" class="headerlink" title="如何判断一个节点上是否绑定了事件?"></a>如何判断一个节点上是否绑定了事件?</h3><p>网上流传的<code>$(elem).data(&quot;events&quot;)[type]</code>不起作用，谁有好办法吗？</p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> question </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小棋童]]></title>
      <url>http://jintang.github.io/2016/12/02/%E5%B0%8F%E6%A3%8B%E7%AB%A5/</url>
      <content type="html"><![CDATA[<p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/xiaoqitong.jpg" alt="小棋童"></p><a id="more"></a><div style="width:330px;margin:0 auto"><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=409649814&auto=1&height=66"></iframe><br></div><blockquote class="pullquote lrc"><p>大牛且慢 咱 再来一盘 手谈<br>昨夜受风寒 不是我脚在软<br>麻雀咿呀乱 叫得人心很烦<br>东头二狗也观战 笑我一般<br>大路且漫漫 咱 先走几步看看</p><p>低头不见抬头看 拿人手短<br>李家镇的碗 春花小妹的发簪<br>有朝一日定叫你 统统归还</p><p>听说古人犯难 总爱拍遍栏杆<br>词人失恋心烦 总爱睡杨柳岸<br>我娘说 一旦我难过 我都会添很多 的饭<br>那个今晚 我已吃了十几碗<br>不知怎么办 不知怎么那个办<br>观 房梁望穿 这星河瀚翰</p><p>扳呐扳扳扳扳<br>上路扳完下路拆三 手段<br>他举棋 又不定<br>抓耳挠腮擦汗</p><p>断呐断断断断<br>黑蛟断首白龙收官 怒斩<br>斜阳里春家小妹 别起发簪<br>她眉眼弯弯</p><p>算呐算算算算<br>人活几世能打几番 算盘<br>有何贪 有何婪<br>打水偏用竹篮</p><p>换呐换换换换<br>冰糖葫芦一钱换 一串<br>送春花 能啵一下 啦啦啦啦啦<br>啦啦啦啦</p><p>春花：你是怎么赢的大牛？<br>施小夏：……嗯……看天上的星星。<br>春花：你骗人。<br>施小夏：……吃糖葫芦吗？<br>春花：不吃！<br>施小夏：你不吃……那我可就吃啦。<br>春花：你敢！<br>施小夏：发簪我都赢回来了，怎么还这么凶……</p><p>大爹且慢 咱 先缓一缓 再谈<br>京城的棋院 家要往南边搬<br>牛弟哭得惨 见我要翻座山<br>二狗兄长倒心宽 夸不简单<br>大道且漫漫 咱 一步一步走完</p><p>宛如那棋谱 总得一步步参<br>书谱竟然叹 两处有情方可断<br>小小棋童又不安 惶惶不安</p><p>听说京城恶歹 总逮棋童来贩<br>沿街黑店客栈 睡一晚要十万<br>我娘猜 就算我被卖 也会吃穷他们 的饭<br>自打今晚 我吃不下小半碗<br>不知怎么瞒 爹娘骗不过怎么办<br>望 秋水望穿 这秋水潺潺<br>翻呐翻翻翻翻</p><p>我翻篱笆再淌河滩 河湾<br>月光满 夜色晚<br>悄悄呼朋引伴</p><p>拦呐拦拦拦拦<br>远处火把爹娘在喊 定庵<br>我只能一步一望春家姑娘<br>她深情款款</p><p>关呐关关关关<br>人活几世也算不完 机关<br>况且我只是在<br>十九道里周转</p><p>拆呐拆拆拆拆<br>岁月拆开 西村南门外<br>老树槐 年轮几载 哎呀呀呀呀<br>哎呀呀呀</p></blockquote>]]></content>
      
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[戏言]]></title>
      <url>http://jintang.github.io/2016/12/01/%E6%88%8F%E8%A8%80/</url>
      <content type="html"><![CDATA[<p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/xiyan.jpg" alt="戏言"></p><a id="more"></a><p></p><div style="width:330px;margin:0 auto"><p></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28793806&auto=1&height=66"></iframe><br></p></div><br><blockquote class="pullquote lrc"><p>作曲 : 神居谣<br>作词 : 五子<br>戏中言 莫当真<br>字传神 也不过 撇竖横<br>一纸情分</p><p>谭惜言写了一辈子的戏，真情假意，全在戏言里，<br>借着他的口，唱给自己听。<br>薄云淡月谢酒 檀板暗悄收<br>斜影栏杆处 趁醉吟 轻旋走<br>未必胭脂粉扣 素颜挑水袖<br>戏中情意切 只借作 他人口<br>此一折 伴弦歌<br>可有闻者泪渐落<br>台前戏言怎知写书人心事不可说<br>幕起 一帘隔<br>开场情字婉转可为我<br>笙琴不需多<br>开场说的是画舫初见，谭惜言用了三十二个字，<br>每个字都亲口教给他，声声入耳。<br>泼陈墨潦新愁 故人旧时候<br>浮生哪个敢说一世再无求<br>卷角戏本且留 浅字深描勾<br>依稀写过同枝比翼恋某某<br>那一折 曾为我<br>辗转青衣扮婀娜<br>嬉笑戏言也该是脱口把玩笑开过<br>身起 一世隔<br>散场仍有人在琢磨<br>尾句留白不留墨<br>戏书难如你 我又弹一曲<br>提笔弄句<br>勘几页 血字泣<br>潭勾冷月 一笔画潭勾冷月<br>堪觅我徒留心<br>梦里路陌雾深<br>此一折 伴弦歌<br>可有闻者泪渐落<br>台前戏言怎知写书人心事不可说<br>幕起 一帘隔<br>开场情字婉转可为我<br>笙琴不需多<br>那一折 曾为我<br>辗转青衣扮婀娜<br>嬉笑戏言也该是脱口把玩笑开过<br>身起 一世隔<br>散场仍有人在琢磨<br>尾句留白不留墨</p><p>谭惜言写的每一页戏词他都妥善保存着。<br>虽然他不知这些戏词是写给谁的，<br>但也按着对方的遗愿，<br>每年上坟的时候，给他烧一页，唱一段。</p></blockquote><p></p>]]></content>
      
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优化hexo之next主题]]></title>
      <url>http://jintang.github.io/2016/12/01/%E4%BC%98%E5%8C%96hexo%E4%B9%8Bnext%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a>主题是一款黑白色的主题，简单大方，时间久了难免有点厌烦。于是自己遍想做点优化和美化,让它色彩缤纷些。下面的方法也适用于其他主题</p></blockquote><h3 id="样式方面"><a href="#样式方面" class="headerlink" title="样式方面"></a>样式方面</h3><p><a href="http://notes.iissnan.com/" target="_blank" rel="noopener">官方默认样式</a>对比<a href="http://jintang.github.io/">我的主题样式</a></p><ul><li><code>next/source/css/_custom/custom.styl</code>:这里面写自定义样式，浏览器中<code>f12</code>调试，看哪儿不好看，直接写在此文件中覆盖。我的自定义样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3399FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">article a, .about-page a&#123; // about页面下也用此样式</span><br><span class="line">	color: $my-link-color;</span><br><span class="line">	&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	    <span class="attribute">color</span>: $my-link-hover-color;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">list-style</span>: disc;</span><br><span class="line">&#125;</span><br><span class="line">//最近访客</span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line">//最新评论</span><br><span class="line"><span class="selector-class">.ds-recent-comments</span>&#123;</span><br><span class="line">	<span class="attribute">padding-left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">//打赏样式</span><br><span class="line"><span class="selector-id">#wechat</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">margin-top</span>:-<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#alipay</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>:top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lrc</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tip</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#DF0101</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line">// 行内代码</span><br><span class="line">$code-block &#123;</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">  <span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span> 0;</span><br><span class="line">  <span class="selector-tag">padding</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line">  font-size : $code-font-size;</span><br><span class="line">  color: $highlight-foreground;</span><br><span class="line">  background: $my-highlight-background;</span><br><span class="line">  border:1px solid $my-highlight-border;</span><br><span class="line">  line-height: $line-height-code-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">color</span>: $my-code-foreground;</span><br><span class="line">  <span class="attribute">background</span>: $my-code-background;</span><br><span class="line">  <span class="attribute">border-radius</span>: $code-border-radius;</span><br><span class="line">  <span class="attribute">font-size </span>: $code-font-size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><code>next/source/css/_variables/custom.styl</code>:这里面可以自定义一些<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener">Stylus</a>的变量，一般用作全局的东西，可以覆盖主题默认的变量。我的自定义变量：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//字体:</span><br><span class="line">// 标题，修改成你期望的字体族</span><br><span class="line">$font-family-headings = Georgia, sans</span><br><span class="line">// 正文, 修改成你期望的字体族</span><br><span class="line">$font-family-base = "Helvetica Neue","Helvetica","Microsoft YaHei","WenQuanYi Micro 	Hei",Arial,sans-serif</span><br><span class="line"></span><br><span class="line">//行内代码字体颜色</span><br><span class="line">$my-code-foreground = #c7254e</span><br><span class="line">//行内代码背景颜色</span><br><span class="line">$my-code-background = #f8f5ec</span><br><span class="line">//代码块背景颜色</span><br><span class="line">$my-highlight-background = #eee;</span><br><span class="line">//代码块border颜色</span><br><span class="line">$my-highlight-border = #ddd;</span><br><span class="line"></span><br><span class="line">//a标签的颜色</span><br><span class="line">$my-link-color = #0d8abf;</span><br><span class="line">$my-link-hover-color = #29B4F0;</span><br><span class="line"></span><br><span class="line">//bootstrap的颜色</span><br><span class="line">$brand-primary = #428bca;</span><br><span class="line">$brand-success = #5cb85c;</span><br><span class="line">$brand-info =    #5bc0de;</span><br><span class="line">$brand-warning = #f0ad4e;</span><br><span class="line">$brand-danger =  #d9534f;</span><br></pre></td></tr></table></figure></li></ul><h3 id="主页添加热评文章、最新访客、最新评论"><a href="#主页添加热评文章、最新访客、最新评论" class="headerlink" title="主页添加热评文章、最新访客、最新评论"></a>主页添加热评文章、最新访客、最新评论</h3><blockquote><p>这几种功能都是利用了<a href="http://dev.duoshuo.com/docs" target="_blank" rel="noopener">多说</a>，所以想要这几个功能你的博客必须得添加<code>多说</code>,如何添加请点<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">这儿</a>。</p></blockquote><p><strong>原理</strong>：在需要的页面上加上<code>多说</code>的<code>通用代码</code>，<code>多说</code>的<code>embed.js</code>会解析生成对应的模块，next主题使用的是<a href="http://yangxiaofu.com/swig/" target="_blank" rel="noopener">swig</a>模板来生成对应的<code>html</code>，所以我们在模板中添加<code>通用代码</code>。实例讲解：</p><h4 id="热评文章"><a href="#热评文章" class="headerlink" title="热评文章"></a>热评文章</h4><p>通用代码：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>  <span class="attr">class</span>=<span class="string">"ds-top-threads"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-range</span>=<span class="string">"monthly"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-num-items</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>属性说明:<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下参数均为可选参数</span></span><br><span class="line"> <span class="keyword">data</span>-range=<span class="string">"weekly"</span>      <span class="comment">//热评统计时间范围：daily：日；weekly：周；monthly：月；默认值daily</span></span><br><span class="line"> <span class="keyword">data</span>-num-items=<span class="string">"5"</span>     <span class="comment">//显示最新文章的条数，默认值5</span></span><br></pre></td></tr></table></figure><p></p><p>我要显示在<strong>侧边栏</strong>，所以我将通用代码添加到<code>sidebar.swig</code>,此文件在<code>next/layout/_macro</code>目录下。我要放在许可协议<img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/blog_license.png" alt="许可协议">的下面：</p><p>首先，在文件中找到证书对应的代码：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cc-license motion-element"</span> <span class="attr">itemprop</span>=<span class="string">"license"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后，在下面加入通用代码和样式：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-globe fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>热评文章<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>  <span class="attr">class</span>=<span class="string">"ds-top-threads"</span> <span class="attr">data-range</span>=<span class="string">"monthly"</span> <span class="attr">data-num-items</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>重新部署，就ok了</p><blockquote><p>如果没有生效，用<code>hexo clean</code>后再部署试试</p></blockquote><h4 id="最新访客"><a href="#最新访客" class="headerlink" title="最新访客"></a>最新访客</h4><p>通用代码：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-recent-visitors"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-avatar-size</span>=<span class="string">"42"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"ds-recent-visitors"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-num-items</span>=<span class="string">"24"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>属性说明:<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data-num-items</span>=<span class="string">"10"</span>     //显示访客的数量</span><br><span class="line"><span class="attr">data-avatar-size</span>=<span class="string">"42"</span>   //访客头像大小</span><br></pre></td></tr></table></figure><p></p><p>在<strong>热评文章</strong>下添加<strong>最新访客</strong>通用代码和样式：<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="comment">&#123;# Blogroll:只在主页显示 #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> !display_toc %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">//</span><span class="template-tag">&#123;%%&#125;</span><span class="xml">、</span><span class="comment">&#123;##&#125;</span><span class="xml">是swig模板的语法</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element clearfix"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-globe fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>最近访客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-recent-visitors"</span></span></span></span><br><span class="line"><span class="xml">      data-num-items="36"</span></span><br><span class="line"><span class="xml">      data-avatar-size="42"</span></span><br><span class="line"><span class="xml">      id="ds-recent-visitors" </span></span><br><span class="line"><span class="xml">      data-num-items="24" &gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><p>重新部署，ok了。</p><h4 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h4><p>通用代码：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ds-recent-comments"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-num-items</span>=<span class="string">"5"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-show-avatars</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-show-time</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-show-admin</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-excerpt-length</span>=<span class="string">"70"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>属性说明:<br></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下参数均为可选</span></span><br><span class="line"><span class="keyword">data</span>-num-items=<span class="string">"10"</span>     <span class="comment">//显示最新评论的条数，最大支持200条</span></span><br><span class="line"><span class="keyword">data</span>-show-avatars=<span class="string">"1"</span>   <span class="comment">//是否显示头像，1：显示，0：不显示</span></span><br><span class="line"><span class="keyword">data</span>-show-<span class="built_in">time</span>=<span class="string">"1"</span>      <span class="comment">//是否显示时间，1：显示，0：不显示</span></span><br><span class="line"><span class="keyword">data</span>-show-<span class="built_in">title</span>=<span class="string">"0"</span>     <span class="comment">//是否显示标题，1：显示，0：不显示</span></span><br><span class="line"><span class="keyword">data</span>-show-admin=<span class="string">"1"</span>     <span class="comment">//是否显示管理员的评论，1：显示，0：不显示</span></span><br><span class="line"><span class="keyword">data</span>-excerpt-length=<span class="string">"70"</span><span class="comment">//最大显示评论汉字数</span></span><br></pre></td></tr></table></figure><p></p><p>在<strong>最新访客</strong>下添加<strong>最新评论</strong>通用代码和样式：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-globe fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>最新评论<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ds-recent-comments"</span> <span class="attr">data-num-items</span>=<span class="string">"5"</span> <span class="attr">data-show-avatars</span>=<span class="string">"1"</span> <span class="attr">data-show-time</span>=<span class="string">"1"</span> <span class="attr">data-show-admin</span>=<span class="string">"0"</span> <span class="attr">data-excerpt-length</span>=<span class="string">"70"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>重新部署，生效了。</p>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> duoshuo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sass VS less]]></title>
      <url>http://jintang.github.io/2016/11/17/sass%20VS%20less/</url>
      <content type="html"><![CDATA[<blockquote><p>为了重构项目的css代码，先体验了<code>less</code>，但发现less不能满足我的需求，没办法转为<code>sass</code>,在此描述一下自我感受这两者的区别。我描述的只是我直观使用的部分，大部分的不同点百度一下，第一页的全一样。。。</p></blockquote><h3 id="判断条件的区别-感觉最重要的地方"><a href="#判断条件的区别-感觉最重要的地方" class="headerlink" title="判断条件的区别(感觉最重要的地方)"></a>判断条件的区别(感觉最重要的地方)</h3><ul><li><code>less</code>写<code>mixin</code>时判断的唯一关键字就是<code>when</code>，而我需要生成复合样式中的一部分，像这样：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>要选择性的生成部分属性，<code>less</code>很不方便，可以参考前面一篇文章<a href="http://jintang.github.io/2016/11/10/less%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%A3-%E9%99%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8E%E5%9F%BA%E6%9C%ACminix/#复合样式mixin">less实战全解之复合样式mixin</a></p><ul><li><code>sass</code>的判断关键字很符合我们的习惯<code>@if</code>、<code>@else</code>、<code>@else if</code>,还有其他的<code>@for</code>、<code>@each</code>，非常强大。额…有点跑题，继续。那么用<code>sass</code>处理符合属性可以写成这样,不会生成多余的属性：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> position(<span class="variable">$position</span>,<span class="variable">$top</span>:null,<span class="variable">$right</span>:null,<span class="variable">$bottom</span>:null,<span class="variable">$left</span>:null,<span class="variable">$z-index</span>:null)&#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">$position</span>;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$top</span>&#123;<span class="attribute">top</span>: <span class="variable">$top</span>;&#125;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$right</span>&#123;<span class="attribute">right</span>: <span class="variable">$right</span>;&#125;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$bottom</span>&#123;<span class="attribute">bottom</span>: <span class="variable">$bottom</span>;&#125;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$left</span>&#123;<span class="attribute">left</span>: <span class="variable">$left</span>;&#125;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$z-index</span>&#123;<span class="attribute">z-index</span>: <span class="variable">$z-index</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>假设要编译成这样的css:<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">right</span>: 0;</span><br><span class="line"><span class="selector-tag">bottom</span>: 0;</span><br></pre></td></tr></table></figure><p></p><p>使用的方式有两种：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//方法1,最后一个&quot;有效参数&quot;前面的参数设为null，后面的不用管，因为参数默认值就是null</span><br><span class="line">@include position(absolute,null,0,0);</span><br><span class="line">//方法2,指定参数名称</span><br><span class="line">@include position(absolute,$right:0,$bottom:0);</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>而且像<code>sass</code>写的这种：支持多属性的0%和100%<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@mixin frames($props,$starts,$ends)&#123;</span><br><span class="line">  $length:length($props);</span><br><span class="line">  0% &#123;</span><br><span class="line">    @for $i from 1 through $length&#123;</span><br><span class="line">      $prop:nth($props,$i);</span><br><span class="line">      #&#123;$prop&#125;:nth($starts,$i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    @for $j from 1 through $length&#123;</span><br><span class="line">      $prop:nth($props,$j);</span><br><span class="line">      #&#123;$prop&#125;:nth($ends,$j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>less</code>由于缺少<code>for</code>这种关键字，只能通过递归实现循环，要实现上面的效果，想想就醉了</p><h3 id="import的路径问题"><a href="#import的路径问题" class="headerlink" title="import的路径问题"></a><code>import</code>的路径问题</h3><ul><li><code>less</code>:可以使用相对路径和绝对路径，可以参考<a href="http://jintang.github.io/2016/11/07/less%E4%BD%BF%E7%94%A8mixin%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/#import导入的路径问题">前面的文章</a></li><li><code>sass</code>:可以使用相对路径，绝对路径好像不可以，我尝试了很多次，依旧不行，不知道是不是我尝试的有问题，请知道的前辈告诉我。语法没有<code>less</code>的小括号，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;../../furnace/sass/_base&quot;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用mixin"><a href="#使用mixin" class="headerlink" title="使用mixin"></a>使用<code>mixin</code></h3><ul><li><p><code>less</code>:只能放在选择器内，不能放在外面，以至于我只能这样定义一个动画,而不能使用公共mixin定义动画</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blink</span> &#123;</span><br><span class="line">  <span class="selector-class">.animation</span>(blink <span class="number">1.8s</span> infinite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> blink &#123;<span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> blink &#123;<span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> blink &#123;<span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> blink &#123;<span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>sass</code>:可以放在外面，然后代码就变成了这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.blink &#123;</span><br><span class="line">  @include animation(blink 1.8s infinite);</span><br><span class="line">&#125;</span><br><span class="line">@include keyframes-opacity(blink);</span><br></pre></td></tr></table></figure></li></ul><p>是不是简练了很多？</p><h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><ul><li><code>less</code>:自定义函数比较多，很方便</li><li><code>sass</code>:官方自己封装的都是基本的，比较少，如三角操作函数就没有，所以需要用sass扩展库:<a href="http://compass-style.org/" target="_blank" rel="noopener">compass</a>、<a href="http://www.w3cplus.com/sasscore/index.html" target="_blank" rel="noopener">sassCore</a></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="grunt插件编译"><a href="#grunt插件编译" class="headerlink" title="grunt插件编译"></a>grunt插件编译</h4><p>很多人选择用<code>less</code>是因为用<code>sass</code>是基于<code>ruby</code>的,所以选择了<code>less</code>,我在使用的过程中用了这样两个插件，都是<code>grunt</code>的，<code>gulp</code>当然也有。下面我的两个插件：</p><ul><li><a href="https://github.com/gruntjs/grunt-contrib-less" target="_blank" rel="noopener">grunt-contrib-less</a></li><li><a href="https://github.com/sindresorhus/grunt-sass" target="_blank" rel="noopener">grunt-sass</a></li></ul><blockquote><p>此处不使用grunt官方团队的<a href="https://github.com/gruntjs/grunt-contrib-sass" target="_blank" rel="noopener">grunt-contrib-sass</a>,因为它需要ruby环境的支持</p></blockquote><p>使用<code>grunt-sass</code>,就不需要安装ruby环境了，因为它是用<a href="https://github.com/sass/node-sass" target="_blank" rel="noopener">node-sass</a>编译的,只需要用<code>npm</code>安装了<code>node-sass</code>就可以编译了。这是我的<code>Gruntfile.js</code>:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">    sass: &#123;</span><br><span class="line">        dist:&#123;</span><br><span class="line">          options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span>,</span><br><span class="line">              outputStyle:<span class="string">"expanded"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          dist:&#123;</span><br><span class="line">              files:&#123;</span><br><span class="line">                  <span class="string">'sass/style.css'</span>:<span class="string">'sass/style.scss'</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    less:&#123;</span><br><span class="line">        dist:&#123;</span><br><span class="line">            options:&#123;</span><br><span class="line">                <span class="comment">// paths: ['WebRoot/css']//Directory of input file.</span></span><br><span class="line">            &#125;,</span><br><span class="line">            files:&#123;</span><br><span class="line">                <span class="string">'WebRoot/css/less/tvwall.css'</span>:<span class="string">'WebRoot/css/less/tvwall.less'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">        css:&#123;</span><br><span class="line">            files:[</span><br><span class="line">                <span class="string">'WebRoot/css/less/tvwall.less'</span>,</span><br><span class="line">                <span class="string">'WebRoot/css/sass/tvwall.scss'</span>,</span><br><span class="line">            ],</span><br><span class="line">            tasks:[<span class="string">'less'</span>,<span class="string">'sass'</span>],</span><br><span class="line">            options:&#123;</span><br><span class="line">                reload:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        self:&#123;</span><br><span class="line">            files:[<span class="string">'Gruntfile.js'</span>],</span><br><span class="line">            tasks:[<span class="string">'watch:css'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-sass'</span>);</span><br><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-less'</span>);</span><br><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'less'</span>,<span class="string">'sass'</span>,<span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure><p></p><p>命令行使用：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt watch</span><br></pre></td></tr></table></figure><p></p><h4 id="js编译，方便调试"><a href="#js编译，方便调试" class="headerlink" title="js编译，方便调试"></a>js编译，方便调试</h4><ul><li><code>less</code>是基于JavaScript，所以，是在客户端处理的。官方提供了<code>less.js</code>文件，放在html里直接就可以编译，很方便.</li><li><code>sass</code>是基于服务端的，但有牛人创造了<a href="https://github.com/medialize/sass.js" target="_blank" rel="noopener">sass.js</a>,主要由：<code>sass.js</code>、<code>sass.work.js</code>和<code>sass.sync.js</code>组成。如果你的浏览器支持h5的<a href="https://developer.mozilla.org/en/docs/Web/API/Worker" target="_blank" rel="noopener"> Web Worker</a>,请使用<code>sass.js</code>和<code>sass.work.js</code>，我这儿就用的这两个文件。如果不支持，就使用<code>sass.js</code>和<code>sass.sync.js</code>。使用如下：</li></ul><p><strong>(1)直接在html中使用<code>sass.js</code></strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/sass/sass.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> sass = <span class="keyword">new</span> Sass(<span class="string">'/js/sass/sass.worker.js'</span>);</span></span><br><span class="line"><span class="undefined">            sass.destroy();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> sass = <span class="keyword">new</span> Sass();</span></span><br><span class="line"><span class="undefined">            sass.options(&#123;</span></span><br><span class="line"><span class="actionscript">                style: Sass.style.expanded<span class="comment">//这种格式我们比较习惯</span></span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> base = <span class="string">'../../furnace/'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> directory = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">            /*因为我的'audio.scss'引入了公共的文件:</span></span><br><span class="line"><span class="actionscript">             *   @<span class="meta"><span class="meta-keyword">import</span> "../../sass/_base";</span></span></span><br><span class="line"><span class="actionscript">             * 所以<span class="string">'_base.scss'</span>文件也必须使用preloadFiles()<span class="string">"注册"</span>文件之后再编译</span></span><br><span class="line"><span class="undefined">            */</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> files = [</span></span><br><span class="line"><span class="actionscript">                <span class="string">'audio/sass/audio.scss'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'sass/_base.scss'</span></span></span><br><span class="line"><span class="undefined">            ];</span></span><br><span class="line"><span class="actionscript">            sass.preloadFiles(base, directory, files, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                sass.compileFile(<span class="string">'audio/sass/audio.scss'</span>,<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> style=<span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span></span><br><span class="line"><span class="undefined">                    style.innerHTML=result.text;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.head.appendChild(style);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>(2)在对应的模块js中使用</strong><br>我们使用了<code>sea.js</code>来模块化，本来官方介绍是简单的<code>require</code>之后就可以使用，官方demo:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> <span class="title">defineSassModule</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// load Sass.js</span></span><br><span class="line">  <span class="keyword">var</span> Sass = <span class="built_in">require</span>(<span class="string">'path/to/sass.js'</span>);</span><br><span class="line">  <span class="comment">// tell Sass.js where it can find the worker,</span></span><br><span class="line">  <span class="comment">// url is relative to document.URL - i.e. outside of whatever</span></span><br><span class="line">  <span class="comment">// Require or Browserify et al do for you</span></span><br><span class="line">  Sass.setWorkerUrl(<span class="string">'dist/sass.worker.js'</span>);</span><br><span class="line">  <span class="comment">// initialize a Sass instance</span></span><br><span class="line">  <span class="keyword">var</span> sass = <span class="keyword">new</span> Sass();</span><br><span class="line">  <span class="keyword">var</span> scss = <span class="string">'$someVar: 123px; .some-selector &#123; width: $someVar; &#125;'</span>;</span><br><span class="line">  sass.compile(scss, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>但是在我的项目里并不成功,提示<code>require</code>返回的对象是<code>underfined</code>,注意到了<code>sass.js</code>里面的这段代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">      define([], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/*走到了这个逻辑里，可能是因为用的是sea.js而非require.js*/</span></span><br><span class="line">      root.Sass = factory();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(<span class="keyword">this</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>所以，<code>require</code>之后的对象被绑定到了window上，于是，代码修改为：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'/js/sass/sass.js'</span>);</span><br><span class="line">    Sass.setWorkerUrl(suninfo.getRootPath()+<span class="string">'js/sass/sass.worker.js'</span>);</span><br><span class="line">    <span class="keyword">var</span> sass=<span class="keyword">new</span> Sass();</span><br><span class="line">    sass.options(&#123;</span><br><span class="line">        style: Sass.style.expanded</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> base = <span class="string">'../../furnace/'</span>;</span><br><span class="line">    <span class="keyword">var</span> directory = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> files = [</span><br><span class="line">        <span class="string">'audio/sass/audio.scss'</span>,</span><br><span class="line">        <span class="string">'sass/_base.scss'</span>,</span><br><span class="line">        <span class="string">'sass/_variables.scss'</span></span><br><span class="line">    ];</span><br><span class="line">    sass.preloadFiles(base, directory, files, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        sass.compileFile(<span class="string">'audio/sass/audio.scss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> style=<span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">            style.innerHTML=result.text;</span><br><span class="line">            <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>然后在浏览器中开心的调试<code>sass</code>吧…</p><blockquote class="pullquote tip"><p>最终，我还是比较喜欢sass。最后放个我总结的<strong>sass使用规范</strong>和<strong>_base.scss</strong>:</p></blockquote><blockquote><ul><li><a href="https://gist.github.com/jintangWang/15b7175268946b9cef21d94625180ee7#file-sass-md" target="_blank" rel="noopener">sass使用规范</a></li><li><a href="https://gist.github.com/jintangWang/15b7175268946b9cef21d94625180ee7#file-_base-scss" target="_blank" rel="noopener">_base.scss</a></li></ul></blockquote>]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> less </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[less实战全解]]></title>
      <url>http://jintang.github.io/2016/11/10/less%E5%AE%9E%E6%88%98%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>附上我的<strong>开发规范</strong>与<strong>公用mixin</strong>:</p><blockquote><ul><li><a href="https://gist.github.com/jintangWang/7633204455a2b992f08252f82fac1d58#file-_less-md" target="_blank" rel="noopener">less开发规范</a></li><li><a href="https://gist.github.com/jintangWang/7633204455a2b992f08252f82fac1d58#file-base-less" target="_blank" rel="noopener">less公用mixin</a></li></ul></blockquote><p>本文所有的实例都可以在<a href="https://gist.github.com/jintangWang/7633204455a2b992f08252f82fac1d58#file-base-less" target="_blank" rel="noopener">less公用mixin</a> 找到</p><h3 id="不同主题的颜色字体等变量定义规范："><a href="#不同主题的颜色字体等变量定义规范：" class="headerlink" title="不同主题的颜色字体等变量定义规范："></a>不同主题的颜色字体等变量定义规范：</h3><p>假设有一蓝色主题，且起名为”Blue”。那么：</p><ul><li>其下的所有变量都以”Blue”为开头起名</li><li>变量名应包含主要特征和用途,若用途较多用”color”声明</li><li>对于一些动作变化效果，如hover的颜色效果，最后再跟上对应的动作名</li></ul><p>实例：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Blue-color-blue:</span><span class="number">#1D89E4</span>;<span class="comment">//用途较多,是此主题的主色</span></span><br><span class="line"><span class="variable">@Blue-border-lightgray-a:</span><span class="number">#e4e4e4</span>;<span class="comment">//常用作border</span></span><br><span class="line"><span class="variable">@Blue-border-lightgray-b:</span><span class="number">#dddddd</span>;</span><br><span class="line"><span class="variable">@Blue-bg-lightgray:</span><span class="number">#f9f9f9</span>;<span class="comment">//常作背景色</span></span><br><span class="line"><span class="variable">@Blue-font-blue-hover:</span><span class="number">#0f79d5</span>;<span class="comment">//常作字体颜色,当hover时字体为这个颜色</span></span><br></pre></td></tr></table></figure><p></p><p>这样，就定义了一套主题的颜色。下面的语句决定我们使用的主题：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@theme-color:</span><span class="variable">@Blue-color-blue</span>;</span><br><span class="line"><span class="variable">@theme-border-a:</span><span class="variable">@Blue-border-lightgray-a</span>;</span><br><span class="line"><span class="variable">@theme-border-b:</span><span class="variable">@Blue-border-lightgray-b</span>;</span><br><span class="line"><span class="variable">@theme-bg:</span><span class="variable">@Blue-bg-lightgray</span>;</span><br><span class="line"><span class="variable">@theme-font-hover:</span><span class="variable">@Blue-font-blue-hover</span>;</span><br></pre></td></tr></table></figure><p></p><p>这里定义的变量才是实际在项目中用的，这些名称只包含了主要作用，而不包含特征。要切换不同的主题，只需要该这些变量对应的值就可以了。</p><h3 id="跟主题无关的颜色字体等变量定义规范："><a href="#跟主题无关的颜色字体等变量定义规范：" class="headerlink" title="跟主题无关的颜色字体等变量定义规范："></a>跟主题无关的颜色字体等变量定义规范：</h3><p>和跟主题相关的颜色名称定义类似，只不过开头不用加主题名，使用的时候可以明显区分主题相关的颜色和不相关的颜色。</p><ul><li>用途较多的颜色：不用声明作用，只需用单词表明特征即可</li><li>一些有常规用途的颜色：声明主要作用和特征</li></ul><p>这个比较灵活，具体视情况而定。<br>实例：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@white:</span><span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@font-red:</span><span class="number">#f00</span>;</span><br></pre></td></tr></table></figure><p></p><h3 id="兼容不同浏览器的样式mixin"><a href="#兼容不同浏览器的样式mixin" class="headerlink" title="兼容不同浏览器的样式mixin"></a>兼容不同浏览器的样式mixin</h3><p>以<code>.</code>开头，其名称与样式的名称一致：<br>实例1：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-radius</span>(...)&#123;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>实例2：<code>linear-gradient</code>的兼容处理<br>这儿就能感觉到<code>less</code>的缺陷，判断关键词只有个<code>when</code>，为后面sass的用法埋个伏笔<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gradient开始</span></span><br><span class="line"><span class="comment">//相反方向</span></span><br><span class="line"><span class="variable">@top_opposite:</span>bottom;</span><br><span class="line"><span class="variable">@bottom_opposite:</span>top;</span><br><span class="line"><span class="variable">@left_opposite:</span>right;</span><br><span class="line"><span class="variable">@right_opposite:</span>left;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">1</span>) <span class="keyword">and</span> (isstring(<span class="variable">@origin</span>))&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="string">~"@&#123;@&#123;origin&#125;_opposite&#125;"</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="string">~"to @&#123;opposite&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">1</span>) <span class="keyword">and</span> (isnumber(<span class="variable">@origin</span>)) <span class="keyword">and</span>(<span class="variable">@origin</span>&lt;<span class="number">180</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="variable">@origin</span>+<span class="number">180</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="variable">@origin</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">1</span>) <span class="keyword">and</span> (isnumber(<span class="variable">@origin</span>)) <span class="keyword">and</span>(<span class="variable">@origin</span>&gt;=<span class="number">180</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="variable">@origin</span>+(-<span class="number">180</span>);</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="variable">@origin</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">2</span>) <span class="keyword">and</span> (<span class="string">"@&#123;origin&#125;"</span>=<span class="string">"left top"</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="string">~"right bottom"</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="string">~"to @&#123;opposite&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">2</span>) <span class="keyword">and</span> (<span class="string">"@&#123;origin&#125;"</span>=<span class="string">"left bottom"</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="string">~"right top"</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="string">~"to @&#123;opposite&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">2</span>) <span class="keyword">and</span> (<span class="string">"@&#123;origin&#125;"</span>=<span class="string">"right top"</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="string">~"left bottom"</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="string">~"to @&#123;opposite&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opposite</span>(<span class="variable">@origin</span>) <span class="keyword">when</span> (length(<span class="variable">@origin</span>)=<span class="number">2</span>) <span class="keyword">and</span> (<span class="string">"@&#123;origin&#125;"</span>=<span class="string">"right bottom"</span>)&#123;</span><br><span class="line">  <span class="variable">@opposite:</span><span class="string">~"left top"</span>;</span><br><span class="line">  <span class="variable">@to_opposite:</span><span class="string">~"to @&#123;opposite&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gradient</span> (<span class="variable">@origin</span>:top, <span class="variable">@start</span>, <span class="variable">@stop</span>) &#123;</span><br><span class="line">  <span class="selector-class">.opposite</span>(<span class="variable">@origin</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: mix(<span class="variable">@start</span>,<span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: -webkit-linear-gradient(<span class="variable">@origin</span>, <span class="variable">@start</span>, <span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: -webkit-gradient(linear, <span class="variable">@origin</span>, <span class="variable">@opposite</span>, from(<span class="variable">@start</span>), to(<span class="variable">@stop</span>));</span><br><span class="line">  <span class="attribute">background-image</span>: -moz-linear-gradient(<span class="variable">@origin</span>, <span class="variable">@start</span>, <span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: -o-linear-gradient(<span class="variable">@origin</span>, <span class="variable">@start</span>, <span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: -ms-linear-gradient(<span class="variable">@origin</span>, <span class="variable">@start</span>, <span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: linear-gradient(<span class="variable">@to_opposite</span>, <span class="variable">@start</span>, <span class="variable">@stop</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="attribute">progid</span>:DXImageTransform.Microsoft.gradient(startColorstr=<span class="variable">@start</span>, endColorstr=<span class="variable">@stop</span>, GradientType=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gradient结束</span></span><br></pre></td></tr></table></figure><p></p><h3 id="特殊的mixin"><a href="#特殊的mixin" class="headerlink" title="特殊的mixin"></a>特殊的mixin</h3><h4 id="一些常用的"><a href="#一些常用的" class="headerlink" title="一些常用的"></a>一些常用的</h4><p>实例：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>,&#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="特殊的keyframes-只能生成单属性的动画定义"><a href="#特殊的keyframes-只能生成单属性的动画定义" class="headerlink" title="特殊的keyframes(只能生成单属性的动画定义)"></a>特殊的keyframes(只能生成单属性的动画定义)</h4><p>实例：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.keyframs</span>(<span class="number">2</span>,<span class="variable">@prop</span>,<span class="variable">@start</span>,<span class="variable">@end</span>)&#123;</span><br><span class="line">      <span class="selector-tag">0%</span>&#123;</span><br><span class="line">        <span class="attribute">@&#123;prop&#125;</span>:<span class="variable">@start</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">100%</span>&#123;</span><br><span class="line">        <span class="attribute">@&#123;prop&#125;</span>:<span class="variable">@end</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//只是支持单属性opacity的动画定义</span></span><br><span class="line"><span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="variable">@value</span>) <span class="keyword">when</span> (<span class="variable">@value</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable">@indicate:</span>percentage(<span class="variable">@value</span>);</span><br><span class="line">      <span class="variable">@&#123;indicate&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="variable">@value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.keyframes-opacity</span>(<span class="number">10</span>,<span class="variable">@value</span>+<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="复合样式mixin"><a href="#复合样式mixin" class="headerlink" title="复合样式mixin:"></a>复合样式mixin:</h3><p><del>注意：此部分废弃，因为项目中大多数是设了部分属性，如<code>margin-top</code>和<code>margin-right</code>,但如果用了此<code>mixin</code>，会造成多了<code>margin-bottom</code>和<code>margin-left</code>属性，即使他们设的是默认属性。这样很不好，如果要修改这个<code>mixin</code>，由于<code>less</code>中的判断只有<code>when</code>关键字，类似于上面的<code>line-gradient</code>,所以要写11条(怎么算出来的：$C_4^2+C_4^3+1$)的判断，很麻烦，所以废弃。后面会有<code>sass</code>的方法，完美解决这个问题</del><br>实例：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据不同的参数只设置部分属性,其他的还是默认值0</span></span><br><span class="line"><span class="selector-class">.margin</span>(<span class="variable">@top</span>:<span class="number">0</span>;<span class="variable">@right</span>:<span class="number">0</span>;<span class="variable">@bottom</span>:<span class="number">0</span>;<span class="variable">@left</span>:<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="variable">@top</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="variable">@right</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="variable">@bottom</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="variable">@left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为了区分兼容不同浏览器的mixin，这个采用”驼峰命名法”.</p>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> less </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[less使用mixin的小技巧]]></title>
      <url>http://jintang.github.io/2016/11/07/less%E4%BD%BF%E7%94%A8mixin%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote><p>less是一种css的扩展，可以编译成css。将它定位为”工具”即可，最终 浏览器/app 识别的还是css</p></blockquote><p>参考网站：</p><blockquote><ul><li><a href="http://less.bootcss.com/" target="_blank" rel="noopener">less中文官网</a>，是bootstrap帮忙翻译的，但容我吐槽一句：翻译翻一半，惆怅也疼蛋。</li><li><a href="http://www.css88.com/doc/less/features/" target="_blank" rel="noopener">css88的less中文文档</a>，这个翻译完了，不喜欢英文的可以看这个</li></ul></blockquote><h3 id="css3中calc在less编译时被计算的解决办法"><a href="#css3中calc在less编译时被计算的解决办法" class="headerlink" title="css3中calc在less编译时被计算的解决办法"></a>css3中calc在less编译时被计算的解决办法</h3><p>目标：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">-moz-calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">-webkit-calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p></p><p>错误<code>less</code>:<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//less的mixin</span></span><br><span class="line"><span class="selector-class">.calcWidth</span>(<span class="variable">@width</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>:-moz-calc(<span class="variable">@width</span>);</span><br><span class="line">    <span class="attribute">width</span>:-webkit-calc(<span class="variable">@width</span>);</span><br><span class="line">    <span class="attribute">width</span>:calc(<span class="variable">@width</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-class">.calcWidth</span>(<span class="number">100%</span> - <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>错误结果:<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">-moz-calc</span>(90%);</span><br><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">-webkit-calc</span>(90%);</span><br><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(90%);</span><br></pre></td></tr></table></figure><p></p><p>原因：<code>less</code>把这个当成运算式去执行了<br><strong>正确<code>less</code></strong>:<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//less的mixin</span></span><br><span class="line"><span class="selector-class">.calcWidth</span>(<span class="variable">@width</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>:-moz-calc(<span class="variable">@width</span>);</span><br><span class="line">    <span class="attribute">width</span>:-webkit-calc(<span class="variable">@width</span>);</span><br><span class="line">    <span class="attribute">width</span>:calc(<span class="variable">@width</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-class">.calcWidth</span>(<span class="string">~"100% - 10px"</span>);</span><br><span class="line">    <span class="comment">//~是less内置的转义函数，就是以前的e函数，语法：~"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>结果就是目标，验证通过<br><a id="more"></a></p><h3 id="less写一个可复用的帧动画类型的-函数"><a href="#less写一个可复用的帧动画类型的-函数" class="headerlink" title="less写一个可复用的帧动画类型的 函数"></a>less写一个可复用的帧动画类型的 函数</h3><p>目标：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: blink <span class="number">1.8s</span> infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: blink <span class="number">1.8s</span> infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: blink <span class="number">1.8s</span> infinite;</span><br><span class="line">  <span class="attribute">-o-animation</span>: blink <span class="number">1.8s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line">//定义的动画还有-webkit-、-moz-、-o-、-ms-，此处为了省篇幅没有加</span><br><span class="line">@<span class="keyword">keyframes</span> blink &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  10% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  30% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  90% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>方法：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mixin开始</span></span><br><span class="line"><span class="selector-class">.animation</span>(...)&#123;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-o-animation</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opacityLoop</span>(<span class="variable">@count</span>) <span class="keyword">when</span> (<span class="variable">@count</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">//percentage是less的内置函数，作用：将浮点数转换为百分比字符串</span></span><br><span class="line">  <span class="variable">@keysname:</span>percentage(<span class="variable">@count</span>);</span><br><span class="line">  <span class="comment">/*注意：less不能直接在属性名上调用内置函数*/</span></span><br><span class="line">  <span class="variable">@&#123;keysname&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="variable">@count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.opacityLoop</span>((<span class="variable">@count</span>+<span class="number">0.1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mixin结束</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.animation</span>(blink <span class="number">1.8s</span> infinite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> blink &#123;<span class="selector-class">.opacityLoop</span>(<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> blink &#123;<span class="selector-class">.opacityLoop</span>(<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> blink &#123;<span class="selector-class">.opacityLoop</span>(<span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> blink &#123;<span class="selector-class">.opacityLoop</span>(<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure><p></p><p>经过验证,结果正确。<br>其实，上述的代码是否看起来还有点累赘，<code>@keyframes</code>的定义没有用<code>mixin</code>，但是<code>less</code>没办法做到，而<code>sass</code>可以像下面这样写：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//支持多属性的0%和100%</span><br><span class="line">@mixin keyframes($name,$props,$starts,$ends)&#123;</span><br><span class="line">  @-webkit-keyframes #&#123;$name&#125; &#123;@include frames($props,$starts,$ends);&#125;</span><br><span class="line">  @-moz-keyframes #&#123;$name&#125; &#123;@include frames($props,$starts,$ends);&#125;</span><br><span class="line">  @-o-keyframes #&#123;$name&#125; &#123;@include frames($props,$starts,$ends);&#125;</span><br><span class="line">  @keyframes #&#123;$name&#125; &#123;@include frames($props,$starts,$ends);&#125;</span><br><span class="line">&#125;</span><br><span class="line">@mixin frames($props,$starts,$ends)&#123;</span><br><span class="line">  $length:length($props);</span><br><span class="line">  0% &#123;</span><br><span class="line">    @for $i from 1 through $length&#123;</span><br><span class="line">      $prop:nth($props,$i);</span><br><span class="line">      #&#123;$prop&#125;:nth($starts,$i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    @for $j from 1 through $length&#123;</span><br><span class="line">      $prop:nth($props,$j);</span><br><span class="line">      #&#123;$prop&#125;:nth($ends,$j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//外部直接调用</span><br><span class="line">@include keyframes(blink,background-color border-width,#f00 1px,#0f0 5px);</span><br></pre></td></tr></table></figure><p></p><h3 id="import导入的路径问题"><a href="#import导入的路径问题" class="headerlink" title="import导入的路径问题"></a>import导入的路径问题</h3><p>我们通常会将公共的颜色和mixin提取出来，放在一个文件里。那么如何引入此文件呢？<br>默认:当前路径<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> (keyword) <span class="string">"filename"</span>;</span><br></pre></td></tr></table></figure><p></p><p>现在，我有一个<code>demo1.less</code>需要引用<code>base.less</code>，他们的路径如图:<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/less%E4%B9%8Bimport.png" alt="引用base.less"><br>使用相对路径：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> (keyword) <span class="string">"../../../furnace/less/base.less"</span>;</span><br></pre></td></tr></table></figure><p></p><p>使用绝对路径:<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> (keyword) <span class="string">"WebRoot\furnace\less\base.less"</span>;</span><br></pre></td></tr></table></figure><p></p><p><strong>ps</strong>:还可以直接从你的 node_modules 文件夹中加载 LESS 文件。</p><p><strong>结语：</strong>不论是<code>less</code>还是<code>sass</code>，都只是个工具，不应该在这上面花费大量的精力来玩花它。附一张百度找的<code>less</code>的思维导图,如下：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/less%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="less思维导图"><br>话说这思维导图不全，以后有时间自己做个。所谓的有时间，大概又是了了无期…</p>]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> less </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则RegExp中的九曲十八弯]]></title>
      <url>http://jintang.github.io/2016/10/25/%E6%AD%A3%E5%88%99RegExp%E4%B8%AD%E7%9A%84%E4%B9%9D%E6%9B%B2%E5%8D%81%E5%85%AB%E5%BC%AF/</url>
      <content type="html"><![CDATA[<blockquote><p>很多知识都是有许多不被注意的细节，一不小心就会拐错了弯，翻了车。今天说几个正则需要注意的地方。</p></blockquote><h3 id="正则和string常用的方法"><a href="#正则和string常用的方法" class="headerlink" title="正则和string常用的方法"></a>正则和string常用的方法</h3><h4 id="正则表达式验证字符串的方法"><a href="#正则表达式验证字符串的方法" class="headerlink" title="正则表达式验证字符串的方法"></a>正则表达式验证字符串的方法</h4><ol><li><code>reg.exec(string)</code>:<ul><li>如果执行exec方法的正则表达式没有分组（没有括号括起来的内容），那么如果有匹配，他将返回一个只有一个元素的数组(不论正则是否有标志g)，这个数组唯一的元素就是该正则表达式匹配的第一个串;如果没有匹配则返回null</li><li>exec如果找到了匹配，而且包含分组的话，返回的数组将包含多个元素，第一个元素是找到的匹配，之后的元素依次为该匹配中的第一、第二…个分组</li></ul></li><li><code>reg.test(string)</code>: 返回的是true和false。</li></ol><h4 id="字符串验证正则的方法"><a href="#字符串验证正则的方法" class="headerlink" title="字符串验证正则的方法"></a>字符串验证正则的方法</h4><ol><li><code>string.match(reg/str)</code>:<ul><li>参数为reg时返回符合正则的子串，但是被封装在数组里;不同于<code>reg.exec()</code>，如果正则带有标志g,且有多个匹配的子串，会返回有多个元素的数组。</li><li>参数为str时若包含返回该str，不包含时返回<code>null</code><br><strong>tip:特殊情况</strong><code>&#39;1 2 ()&#39;.match(&#39;1 2 ()&#39;)</code>，当字符串里面有<code>()</code>时<code>match</code>直接返回<code>null</code>，因为括号是正则中特殊的存在，可以匹配<code>$N</code>。此时用<code>indexOf()</code>。</li></ul></li><li><code>string.replace(reg/str,replacement)</code>:将字符串 满足reg的子串/指定的str 替换为replacement，返回值为替换后的结果，原变量不变</li><li><code>string.search(reg)</code>:作用类似于<code>string.indexOf()</code>,返回符合正则的起始下标，如果没找到也为-1</li></ol><h3 id="RegExp静态属性"><a href="#RegExp静态属性" class="headerlink" title="RegExp静态属性"></a>RegExp静态属性</h3><p><code>$1...$9</code>:每当产生一个带括号的成功匹配时，$1…$9 属性的值就被修改。可以在一个正则表达式模式中指定任意多个带括号的子匹配，但只能存储最新的九个。<br><strong>Note:</strong></p><ul><li>这些属性是RegExp的静态属性，而非RegExp实例的属性。</li><li>这些属性是全局的，只要对正则有影响，就会改变这几个属性的值</li></ul><a id="more"></a><h3 id="RegExp-对象中需要注意的属性：lastIndex"><a href="#RegExp-对象中需要注意的属性：lastIndex" class="headerlink" title="RegExp 对象中需要注意的属性：lastIndex"></a>RegExp 对象中需要注意的属性：<code>lastIndex</code></h3><p>这是一个例子：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g</span>;</span><br><span class="line"><span class="comment">//$1...$9对应的是带括号的正则匹配的值中最近的第1-9个</span></span><br><span class="line"><span class="keyword">var</span> Arr=[<span class="string">'192.168.1.1'</span>,<span class="string">'192.168.1.2'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;Arr.length;j++)&#123;</span><br><span class="line">    <span class="comment">//每次匹配时lastIndex会更新为匹配子串结束时的index+1，此处为11</span></span><br><span class="line">    reg.lastIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!reg.test(Arr[j]))&#123;</span><br><span class="line">        <span class="comment">//若不将lastIndex重新设为0，明明符合正则的字串却会进入此步骤，就会出错</span></span><br><span class="line">        result=<span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">RegExp</span>.$<span class="number">1</span> &gt;=<span class="number">256</span> || <span class="built_in">RegExp</span>.$<span class="number">2</span>&gt;=<span class="number">256</span> || <span class="built_in">RegExp</span>.$<span class="number">3</span>&gt;=<span class="number">256</span> || <span class="built_in">RegExp</span>.$<span class="number">4</span>&gt;=<span class="number">256</span>)&#123;</span><br><span class="line">            result = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这是<code>RegExp</code>对象<code>$1...$9</code>值的变化：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/regExp1.png" alt="$1...$9的值"><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/regExp2.png" alt="$1...$9的值"><br>可以看到，每次循环<code>$1...$4</code>是新匹配的4个<br>附上<a href="https://segmentfault.com/u/trigkit4" target="_blank" rel="noopener">trigkit4</a>的正则表达式思维导图一张：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/repExp%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.gif" alt="正则思维导图"></p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用handsontable插件修改bug心得]]></title>
      <url>http://jintang.github.io/2016/10/18/%E4%BF%AE%E6%94%B9handsontable%E6%8F%92%E4%BB%B6%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<blockquote><p>这段日子有个坑爹的项目——南网，这篇文章就来纪念它。里面有用到一个jq插件：<a href="https://handsontable.com/" target="_blank" rel="noopener">handsontable</a>,作用是生成一个类似excel的表格，不得不说功能十分强大，实现了类似excel的各种功能，使用的api也比较简单，然而…后面有些莫名其妙的bug，奈何于水平有限，其源码也太长(30000+)，各种嵌套，无法从正确的逻辑中找到出问题的地方，只能在关键的地方强制使用自己的逻辑，下面就说说怎么找这个bug关键的地方</p></blockquote><h3 id="平时修改bug"><a href="#平时修改bug" class="headerlink" title="平时修改bug"></a>平时修改bug</h3><ol><li>js的bug：我总是想一遍过程，整个流程构思的跑一遍，然后哪儿的逻辑出了问题或者疏忽了，自然就知道了对应的地方。</li><li>页面的bug:google浏览器，你懂得。我对页面渲染理解着实不深，所以经常”不求甚解”。</li></ol><h3 id="这次修改handsontable插件bug的经验"><a href="#这次修改handsontable插件bug的经验" class="headerlink" title="这次修改handsontable插件bug的经验"></a>这次修改handsontable插件bug的经验</h3><h4 id="bug1-要渲染的数据很多，但是只显示了一部分"><a href="#bug1-要渲染的数据很多，但是只显示了一部分" class="headerlink" title="bug1:要渲染的数据很多，但是只显示了一部分:"></a>bug1:要渲染的数据很多，但是只显示了一部分:</h4><svg height="597" version="1.1" width="417.171875" xmlns="http://www.w3.org/2000/svg" style="overflow:hidden;position:relative" viewbox="0 0 417.171875 597" preserveaspectratio="xMidYMid meet"><desc style="-webkit-tap-highlight-color:transparent">Created with Raphaël 2.1.2</desc><defs style="-webkit-tap-highlight-color:transparent"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block-obj27" style="-webkit-tap-highlight-color:transparent"/><marker id="raphael-marker-endblock33-obj28" markerheight="3" markerwidth="3" orient="auto" refx="1.5" refy="1.5" style="-webkit-tap-highlight-color:transparent"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block-obj27" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color:transparent"/></marker></defs><rect x="0" y="0" width="383" height="55" r="20" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="st" transform="matrix(1,0,0,1,18.0859,4)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="stt" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,18.0859,4)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">根据官方demo发现handsontable是先渲染一部分数据，</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">然后滚动的时候渲染新数据</tspan></text><rect x="0" y="0" width="392" height="55" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op1" transform="matrix(1,0,0,1,13.5859,113)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op1t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,13.5859,113)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">在页面上使用开发者工具查看handsontable的绑定事件，</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">发现事件:wheel</tspan></text><rect x="0" y="0" width="350" height="55" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op2" transform="matrix(1,0,0,1,34.5859,222)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op2t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,34.5859,222)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">查看绑定事件的地方，发现嵌套多层，理不清楚，</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">转而在源码中搜索关键字:wheel</tspan></text><rect x="0" y="0" width="320.328125" height="37" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op3" transform="matrix(1,0,0,1,49.4219,340)"/><text x="10" y="18.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op3t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,49.4219,340)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="5.5">搜索发现wheel都与方法：onTableScroll()有关</tspan></text><rect x="0" y="0" width="357.328125" height="55" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op4" transform="matrix(1,0,0,1,30.9219,431)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op4t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,30.9219,431)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">在onTableScroll()内打断点，查看代码执行的步骤，</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">通过对比官方demo发现步骤中不同的地方</tspan></text><rect x="0" y="0" width="411.171875" height="55" r="20" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="end" transform="matrix(1,0,0,1,4,540)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="endt" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,4,540)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">在自己使用handsontable的地方加一个全局变量:window.flag</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">，在onTableScroll()中使用此变量来强制执行正确的步骤</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent"/></text><path fill="none" stroke="#000000" d="M209.5859375,59C209.5859375,59,209.5859375,98.65409994125366,209.5859375,110.00043908460066" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj28)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M209.5859375,168C209.5859375,168,209.5859375,207.65409994125366,209.5859375,219.00043908460066" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj28)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M209.5859375,277C209.5859375,277,209.5859375,324.48365688323975,209.5859375,337.0037617255002" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj28)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M209.5859375,377C209.5859375,377,209.5859375,416.65409994125366,209.5859375,428.00043908460066" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj28)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M209.5859375,486C209.5859375,486,209.5859375,525.6540999412537,209.5859375,537.0004390846007" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj28)" style="-webkit-tap-highlight-color:transparent"/></svg><blockquote><p>注：使用全局变量window.flag是为了在其他地方不影响</p></blockquote><a id="more"></a><h4 id="bug2-n-双击编辑时弹框位置不对、点击某些单元格时却滚动到表格顶部、下拉列表的显示位置不对…"><a href="#bug2-n-双击编辑时弹框位置不对、点击某些单元格时却滚动到表格顶部、下拉列表的显示位置不对…" class="headerlink" title="bug2-n:双击编辑时弹框位置不对、点击某些单元格时却滚动到表格顶部、下拉列表的显示位置不对…"></a>bug2-n:双击编辑时弹框位置不对、点击某些单元格时却滚动到表格顶部、下拉列表的显示位置不对…</h4><p><svg height="752.75" version="1.1" width="792.625" xmlns="http://www.w3.org/2000/svg" style="overflow:hidden;position:relative" viewbox="0 0 792.625 752.75" preserveaspectratio="xMidYMid meet"><desc style="-webkit-tap-highlight-color:transparent">Created with Raphaël 2.1.2</desc><defs style="-webkit-tap-highlight-color:transparent"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block-obj65" style="-webkit-tap-highlight-color:transparent"/><marker id="raphael-marker-endblock33-obj66" markerheight="3" markerwidth="3" orient="auto" refx="1.5" refy="1.5" style="-webkit-tap-highlight-color:transparent"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block-obj65" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color:transparent"/></marker></defs><rect x="0" y="0" width="379.171875" height="55" r="20" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="st" transform="matrix(1,0,0,1,8.9141,49.625)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="stt" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,8.9141,49.625)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">开发者工具查看绑定事件，找到可以搜索的关键字：</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">click、mousedown、mouseup、edit、select、render…</tspan></text><rect x="0" y="0" width="365" height="55" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op1" transform="matrix(1,0,0,1,16,204.25)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op1t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,16,204.25)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">搜索关键字，在觉得有可能影响的地方都打上断点，</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">如果关键字是方法，那调用它的地方都有可能影响</tspan></text><rect x="0" y="0" width="389" height="37" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op2" transform="matrix(1,0,0,1,4,367.875)"/><text x="10" y="18.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op2t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,4,367.875)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="5.5">开始苦逼的调试，在触发哪个断点的时候导致了bug发生</tspan></text><path fill="#ffffff" stroke="#000000" d="M73.125,36.5625L0,73.125L146.25,146.25L292.5,73.125L146.25,0L0,73.125" stroke-width="2" id="cond" class="flowchart" style="-webkit-tap-highlight-color:transparent" transform="matrix(1,0,0,1,52.25,458.875)"/><text x="78.125" y="73.125" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="condt" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,52.25,458.875)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-12.5">是否由包含该断点</tspan><tspan dy="18" x="78.125" style="-webkit-tap-highlight-color:transparent">的方法里的步骤导致的，</tspan><tspan dy="18" x="78.125" style="-webkit-tap-highlight-color:transparent">是或否？</tspan></text><rect x="0" y="0" width="270" height="37" r="20" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="e" transform="matrix(1,0,0,1,63.5,713.75)"/><text x="10" y="18.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="et" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,63.5,713.75)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="5.5">使用全局变量，在该步骤处”拨乱反正”</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent"/></text><rect x="0" y="0" width="125" height="55" r="0" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color:transparent" stroke-width="2" class="flowchart" id="op3" transform="matrix(1,0,0,1,530.75,504.5)"/><text x="10" y="27.5" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" id="op3t" class="flowchartt" font-size="15px" transform="matrix(1,0,0,1,530.75,504.5)" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="-3.5">以包含该断点的</tspan><tspan dy="18" x="10" style="-webkit-tap-highlight-color:transparent">方法名为关键字</tspan></text><path fill="none" stroke="#000000" d="M198.5,104.625C198.5,104.625,198.5,184.60484662652016,198.5,201.24127956738812" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M198.5,259.25C198.5,259.25,198.5,347.3604063168168,198.5,364.8706286659108" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M198.5,404.875C198.5,404.875,198.5,444.52909994125366,198.5,455.87543908460066" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/><path fill="none" stroke="#000000" d="M198.5,605.125C198.5,605.125,198.5,693.2354063168168,198.5,710.7456286659108" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/><text x="203.5" y="615.125" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" font-size="15px" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="5.5">yes</tspan></text><path fill="none" stroke="#000000" d="M344.75,532C344.75,532,503.8290500640869,532,527.7530478276312,532" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/><text x="349.75" y="522" text-anchor="start" font="10px &quot;Arial&quot;" stroke="none" fill="#000000" style="-webkit-tap-highlight-color:transparent;text-anchor:start;font-style:normal;font-variant:normal;font-weight:400;font-stretch:normal;font-size:15px;line-height:normal;font-family:Arial" font-size="15px" stroke-width="1"><tspan style="-webkit-tap-highlight-color:transparent" dy="5.5">no</tspan></text><path fill="none" stroke="#000000" d="M593.25,559.5C593.25,559.5,593.25,584.5,593.25,584.5C593.25,584.5,790.625,584.5,790.625,584.5C790.625,584.5,790.625,179.25,790.625,179.25C790.625,179.25,198.5,179.25,198.5,179.25C198.5,179.25,198.5,194.62344455718994,198.5,201.25924777425826" stroke-width="2" marker-end="url(#raphael-marker-endblock33-obj66)" style="-webkit-tap-highlight-color:transparent"/></svg><br><strong>总结</strong>:不清楚插件内部逻辑的情况下：搜索关键字，根据打的断点找到关键性代码</p><p>为了找到关键代码，断点是打了n遍，每次都发现外层的方法已经产生了bug，如此循环多次之后才找到。感觉方法很笨，但却很有效，经验大概就是这样起作用。不知道谁有好点的找bug的方法吗，请留言。</p><p><strong>[1]</strong> <code>hexo</code>竟然不支持<code>markdown</code>的流程图语法，上面的流程图是用其他<code>Markdown</code>编辑器生成的<code>html</code><br><strong>[2]</strong> 每次用<code>eclipse</code>打包、启动<code>maven</code>管理的项目都忍不住吐槽，各种报错，浪费时间。最近终于换了<code>idea</code>，和<code>webstorm</code>是一家公司的，真强大啊，再也不用每次更新代码就打包了，而且<code>tomcat</code>还可以配置两个<code>module</code>，不用切来切去，真爽。附上<a href="">idea使用教程</a></p>]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> handsontable </tag>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不同浏览器通用的事件处理]]></title>
      <url>http://jintang.github.io/2016/10/08/%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E7%94%A8%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote><p>摘抄自：<a href="https://github.com/markyun/Markyun.js/blob/master/markyunjs/WebContent/js/markyun.js" target="_blank" rel="noopener">马云云_理想青年</a></p></blockquote><p>封装的ie和其他浏览器的事件处理：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集</span></span><br><span class="line">markyun.Event = &#123;</span><br><span class="line">    <span class="comment">// 页面加载完成后</span></span><br><span class="line">    readyEvent : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn==<span class="literal">null</span>) &#123;</span><br><span class="line">            fn=<span class="built_in">document</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = fn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                oldonload();</span><br><span class="line">                fn();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">    <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class="line">    addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                handler.call(element);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除事件</span></span><br><span class="line">    removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">            element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">    stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">    preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取事件目标</span></span><br><span class="line">    getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">    getEvent : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">            <span class="keyword">while</span> (c) &#123;</span><br><span class="line">                ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                c = c.caller;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器中常用的存储]]></title>
      <url>http://jintang.github.io/2016/10/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<blockquote><p>本文参考:</p><ul><li><a href="http://jerryzou.com/posts/cookie-and-web-storage/" target="_blank" rel="noopener">邹润阳</a></li><li>Storage的用法：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="noopener">Storage的API</a></li></ul></blockquote><h3 id="localStorage-与-sessionStorage"><a href="#localStorage-与-sessionStorage" class="headerlink" title="localStorage 与 sessionStorage"></a>localStorage 与 sessionStorage</h3><p><code>localStorage</code>与<code>sessionStorage</code>都是h5中出现的，都继承于<code>Storage</code>，用法完全相同</p><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><ul><li>大小一般都是5M左右。</li><li>除非被手动清除，否则永久保存</li></ul><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><ul><li>大小一般也是5M左右。</li><li>仅在当前会话下有效，关闭 tab 或 浏览器(window) 后被清除<ul><li>刷新页面时不会清除</li><li>页面跳转时，如果还在当前网站范围内则不清除。如果跳转到了其他网站则清除<a id="more"></a></li></ul></li></ul><h4 id="共同的属性与方法"><a href="#共同的属性与方法" class="headerlink" title="共同的属性与方法"></a>共同的属性与方法</h4><ul><li><code>Storage.length</code> : 返回一个整数，表示存储在 Storage 对象中的数据项数量。只读。</li><li><code>Storage.key()</code> ：该方法接受一个数值 n 作为参数，并返回存储中的第 n 个键名。</li><li><code>Storage.getItem()</code> ：该方法接受一个键名作为参数，返回键名对应的值。</li><li><code>Storage.setItem()</code> : 该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li><li><code>Storage.removeItem()</code>: 该方法接受一个键名作为参数，并把该键名从存储中删除。</li><li><code>Storage.clear()</code> :调用该方法会清空存储中的所有键名。</li></ul><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><code>Cookie</code> 是小甜饼的意思。</p><ul><li><code>cookie</code> 确实非常小，它的大小限制为 4KB 左右。</li><li>一般由服务器生成，可设置失效时间。如果在浏览器端生成 <code>Cookie</code> ，默认是关闭浏览器后失效。</li></ul>]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html我们应该知道的]]></title>
      <url>http://jintang.github.io/2016/09/30/html%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="document-documentElement"><a href="#document-documentElement" class="headerlink" title="document.documentElement"></a>document.documentElement</h3><p>html页面按大小排序：</p><ol><li>window:整个浏览器窗口，包含工具栏、菜单栏…</li><li>document:整个html，包含<code>&lt;DOCTYPE&gt;</code></li><li>html：根节点,<code>document.documentElement</code>就是<code>html</code>节点</li><li>body: 页面主体</li></ol><p>然后有这样一个问题：如何获取如图的高度?</p><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/html_height.png" alt="高度"><br>这样获取：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"><span class="comment">//document.documentElement.offsetHeight不可以，有时候会出错</span></span><br></pre></td></tr></table></figure><p></p><h3 id="调试鼠标hover时提示框的样式"><a href="#调试鼠标hover时提示框的样式" class="headerlink" title="调试鼠标hover时提示框的样式"></a>调试鼠标hover时提示框的样式</h3><p>我们经常需要设计提示框，在<code>hover</code>时浮现，但是如何在控制台调试这个提示框的样式呢，每次鼠标移开提示框就消失，不胜其烦，这儿有个小技巧</p><ol><li>在提示框上右键<em>检查</em>,找到对应的dom<img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/inspect.gif" alt="inspect"></li><li>添加dom断点给<code>node removal</code>:<img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/debug.gif" alt="debugger"></li></ol><p>然后就可以在断点阻塞到提示框显示的时候开心的调试样式了</p><h3 id="在location中传递中文参数"><a href="#在location中传递中文参数" class="headerlink" title="在location中传递中文参数"></a>在location中传递中文参数</h3><p>传递的时候：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href = <span class="built_in">window</span>.encodeURI(url + <span class="string">'?key=你妹'</span>);</span><br></pre></td></tr></table></figure><p></p><p>获取的时候:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> search = <span class="built_in">window</span>.decodeURI(location.search);</span><br><span class="line"><span class="comment">// 结果是 ?key=你妹</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jq的promise]]></title>
      <url>http://jintang.github.io/2016/09/30/jq%E7%9A%84promise/</url>
      <content type="html"><![CDATA[<blockquote><p>之前用angular的$http向接口发起请求，里面的回调写法感觉很好看，最近用jquery，也找到相同的写法，展示于此处。</p></blockquote><h3 id="jq-Ajax中的Promise"><a href="#jq-Ajax中的Promise" class="headerlink" title="jq Ajax中的Promise"></a>jq Ajax中的Promise</h3><p>常规的<code>ajax</code>写法：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type : <span class="string">"post"</span>,</span><br><span class="line">    dataType : <span class="string">"json"</span>,</span><br><span class="line">    url : <span class="string">"project_getProJect.action"</span>,</span><br><span class="line">    <span class="keyword">async</span> : <span class="literal">true</span>,<span class="comment">//默认就是true，表示异步</span></span><br><span class="line">    data:&#123;<span class="attr">proUuid</span>:uuid&#125;,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>为了方便使用<code>ajax</code>，封装如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AjaxServer</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">        type:<span class="string">'POST'</span>,</span><br><span class="line">        url:url,</span><br><span class="line">        data:data,</span><br><span class="line">        dataType:<span class="string">'json'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>那么，这个<code>AjaxServer</code>返回的是什么呢？是一个<code>XMLHttpRequest</code>（<code>jqXHR</code>）对象，从jQuery1.5开始，该对象实现了<code>Promise</code>接口, 使它拥有了 <code>Promise</code> 的所有属性、方法和行为。可参考:<a href="http://www.css88.com/jqapi-1.9/category/deferred-object/" target="_blank" rel="noopener">jQuery.Deferred对象</a></p><p>然后就可以这样调用ajax:</p><p><strong>写法1</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AjaxServer(url,data).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取代了的过时的jqXHR.success()</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取代了的过时的jqXHR.error()</span></span><br><span class="line">&#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取代了的过时的jqXHR.complete()方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在响应一个成功的请求后，该函数的参数和.done()的参数是相同的。</span></span><br><span class="line">    <span class="comment">//对于失败的请求，参数和.fail()的参数是相同的*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>写法2</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AjaxServer(url,data).then(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//封装的.done()</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//封装的.fail()</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>从angular沿袭下来的习惯，我比较喜欢<strong>写法2</strong>。</p><p><strong>Tip:</strong>在调用接口失败时或者接口返回的值不是我们期望的值时，我们经常需要提示，但这两种情况的提示一般是相近的(如果要求不严格的话),所以为了简练，可以这样写：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AjaxServer(url,data).always(<span class="function"><span class="keyword">function</span>(<span class="params">result,textStatus,obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.data&amp;&amp;result.data==<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//else里面全是不满足要求的情况，进行提示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><h3 id="jQuery-Deferred对象"><a href="#jQuery-Deferred对象" class="headerlink" title="jQuery.Deferred对象"></a><a href="http://www.css88.com/jqapi-1.9/category/deferred-object/" target="_blank" rel="noopener">jQuery.Deferred对象</a></h3><blockquote><p>对比参考：<a href="http://jintang.github.io/2016/04/19/angular%E4%B9%8Bpromise%E7%9A%84%E7%94%A8%E6%B3%95/">angular中promise与defer</a></p></blockquote><h4 id="基本用法：强制同步-以点击事件触发为例"><a href="#基本用法：强制同步-以点击事件触发为例" class="headerlink" title="基本用法：强制同步(以点击事件触发为例)"></a>基本用法：强制同步(以点击事件触发为例)</h4><p>html:<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"小明"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span> <span class="attr">onclick</span>=<span class="string">"search()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"click1()"</span> <span class="attr">class</span>=<span class="string">"bt"</span> <span class="attr">id</span>=<span class="string">"click1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"click2()"</span> <span class="attr">class</span>=<span class="string">"bt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"click3()"</span> <span class="attr">class</span>=<span class="string">"bt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"click4()"</span> <span class="attr">class</span>=<span class="string">"bt"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>js:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    delegateClick().done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'search:'</span>+result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> defer;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    defer=$.Deferred();</span><br><span class="line">    $(<span class="string">'.bt'</span>).click();</span><br><span class="line">    <span class="keyword">return</span> defer.promise();<span class="comment">//将defer对象转为promise对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'模拟ajax的延迟'</span>);</span><br><span class="line">        defer.resolve(<span class="string">'click4执行完了'</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>点击”查询”按钮的输出结果为：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/jq/jq_promise1.png" alt="jq defer"></p><p>从结果可以看出：<code>resolve()</code>触发了<code>done(callback)</code>。其实：</p><ul><li>defer.resolve():触发 done 的回调执行,并传值给回调方法。</li><li>defer.reject():触发 fail 的回调,并传值给回调方法。</li><li>defer.notify():触发 progress 的回调,并传值给回调方法。<br>另外：上面这三个方法都会触发 always 的回调</li></ul><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p>有这样三个方法,让他们链式调用<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defer=$.Deferred();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'delay()'</span>);</span><br><span class="line">        defer.resolve();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> defer.promise();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">'#name'</span>).animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'动画执行完成'</span>);</span><br><span class="line">    &#125;).promise();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defer=$.Deferred();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click1()'</span>);</span><br><span class="line">        defer.resolve();</span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">return</span> defer.promise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>写法1</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promiseA=delay();</span><br><span class="line">    <span class="keyword">var</span> promiseB=promiseA.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  animate();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> promiseC=promiseB.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> click1();</span><br><span class="line">    &#125;);</span><br><span class="line">    promiseC.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'链式调用完成'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>结果如图：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/jq/jq_promise2.png" alt="链式调用结果"><br><strong>写法2</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//注意：then()里面是函数名，而不是animate()这种，这样then()里面得到的是一个匿名的函数体，</span></span><br><span class="line">    <span class="comment">//而该函数中返回的是 promise 对象，这样才符合了我们对 then 接受参数的要求</span></span><br><span class="line">    $.when(delay()).then(animate).then(click1).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'链式调用完成'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>结果同<strong>写法1</strong></p><p><code>$.when()</code>接受一个Promise对象，<a href="http://www.css88.com/jqapi-1.9/jQuery.when/" target="_blank" rel="noopener">$.when更多介绍</a></p><p>如果写作:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.when(delay()).then(animate()).then(click1());</span><br></pre></td></tr></table></figure><p></p><p>那就相当于<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.when(delay(),animate(),click1());</span><br></pre></td></tr></table></figure><p></p><p>其结果是：三个方法异步一起执行。</p><p><strong>备注：promise与defer的区别</strong><br>promise:promise 对象是没有 resolve , reject , notify 等方法的，也就意味着，你无法针对 promise 对象进行状态更改，只能在 done 或 fail 中进行回调配置。promise相当于defer对象的子集。</p>]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> promise </tag>
            
            <tag> jQuery </tag>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[seajs使用中的坑]]></title>
      <url>http://jintang.github.io/2016/09/21/seajs%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<blockquote><p>早有耳闻<code>模块化</code>的优点，最近在使用的过程中才慢慢加深了感触，恩…确实方便，下面讲讲我遇到的坑,提一下,seajs是CMD规范</p></blockquote><h3 id="seajs约定的书写规范："><a href="#seajs约定的书写规范：" class="headerlink" title="seajs约定的书写规范："></a>seajs约定的书写规范：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path=<span class="string">'./test'</span>;</span><br><span class="line"><span class="built_in">require</span>(path);</span><br></pre></td></tr></table></figure><p>恩，没错，这样是错误的。<code>require</code>只能使用<strong>直接量</strong>,即：字符串常量</p><p>替换的方案：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleName=<span class="string">'test'</span>;</span><br><span class="line"><span class="built_in">require</span>.async(<span class="string">'./'</span>+moduleName,<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">    m.render();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="同步加载多个模块"><a href="#同步加载多个模块" class="headerlink" title="同步加载多个模块"></a>同步加载多个模块</h3><p>在改写项目的时候，有这样一个插件：</p><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/seajs/kendo.png" alt="kendo"></p><p>没错….要使用这个插件，必须加载这些模块：<code>kendo.button.min.js</code>、<code>kendo.core.min.js</code>、<code>kendo.draganddrop.min.js</code>、<code>kendo.userevents.min.js</code>、<code>kendo.window.min.js</code>。你又猜对了，这些模块间是有依赖关系的，原项目用的是<code>requirejs</code>，依赖如图：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/seajs/kendo_depend.png" alt="kendo_depend"></p><p>改写如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.async(<span class="string">'kendoCore'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>.async(<span class="string">'kendoUserevents'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">require</span>.async(<span class="string">'kendoDraganddrop'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">require</span>.async(<span class="string">'kendoWindow'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'kendoButton'</span>);     </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>感觉好傻逼，有木有。。。谁有好点的方法请留言！</p><h3 id="路径解析"><a href="#路径解析" class="headerlink" title="路径解析"></a>路径解析</h3><p><code>seajs.user(&#39;path&#39;)</code> ： <code>seajs</code> 引用路径时默认给加后缀 <code>js</code>，除非路径有 <code>?</code> 或者 尾部以 <code>#</code> 结束 或者载入的是 <code>css</code> 模块。它的与普通的路径解析略有不同：</p><blockquote><p><code>seajs.use()</code> 一般用于载入入口模块，当只有一个入口模块时可以用 <code>data-main</code> 标签代替</p></blockquote><ul><li>相对路径: 以<code>.</code>开头</li><li>绝对路径：以<code>/</code>或<code>http://cdn.com/js/a</code>(这种类型)开头</li><li>顶级路径：不以<code>.</code>或<code>/</code>开头的路径都是顶级路径，此时以<code>Seajs</code>设定的<code>base</code>路径来解析</li></ul>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> seajs </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grunt实例全解]]></title>
      <url>http://jintang.github.io/2016/08/29/Grunt%E5%AE%9E%E4%BE%8B%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>早闻自动化部署大名，可惜我性子懒散，至今才了解了解。官网看了是一头雾水，直到跟着<a href="http://www.cnblogs.com/yexiaochai/p/3603389.html" target="_blank" rel="noopener">叶小钗</a>一笔一画，才了解这个<code>Grunt</code>是怎么一回事，回头再看<a href="http://www.gruntjs.net/sample-gruntfile" target="_blank" rel="noopener">官方案例</a>。对它也再无神秘的面纱，纸上得来终觉浅，绝知此事要躬行。</p></blockquote><h3 id="安装grunt的环境"><a href="#安装grunt的环境" class="headerlink" title="安装grunt的环境"></a>安装grunt的环境</h3><p>首先需要<code>node</code>环境，用<code>npm</code>安装<code>grunt</code><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure><p></p><h3 id="基础实例"><a href="#基础实例" class="headerlink" title="基础实例"></a>基础实例</h3><h4 id="新建一个空文件夹，并添加两个文件：package-json与Gruntfile-js"><a href="#新建一个空文件夹，并添加两个文件：package-json与Gruntfile-js" class="headerlink" title="新建一个空文件夹，并添加两个文件：package.json与Gruntfile.js"></a>新建一个空文件夹，并添加两个文件：<code>package.json</code>与<code>Gruntfile.js</code></h4><blockquote><p>这两个文件要在项目的根目录下</p></blockquote><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/grunt/grunt1.png" alt="新建的grunt项目"></p><p><code>package.json</code>中添加如下代码，<code>Gruntfile.js</code>中暂且不管：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"my-project-name"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"grunt"</span>: <span class="string">"~0.4.5"</span>,</span><br><span class="line">    <span class="string">"grunt-contrib-jshint"</span>: <span class="string">"~0.10.0"</span>,</span><br><span class="line">    <span class="string">"grunt-contrib-nodeunit"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line">    <span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.5.0"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用npm命令安装：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p></p><p>结果如图：<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/grunt/grunt2.png" alt="npm install后结果图"><br><a id="more"></a></p><h4 id="创建测试的用例"><a href="#创建测试的用例" class="headerlink" title="创建测试的用例"></a>创建测试的用例</h4><p>如图：</p><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/grunt/grunt3.png" alt="测试用例"></p><p>里面的代码也是随便写的，只用来演示,为了对比效果，将代码粘贴如下：</p><p><code>test.js</code>：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    cosnole.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>event.js</code>:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvents1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加event1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvents2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加event2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">addEvents1();</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">10</span>,</span><br><span class="line">    y=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x*y);</span><br></pre></td></tr></table></figure><p></p><p><code>require.js</code>是从requirejs官网下载的</p><h4 id="编辑Gruntfile-js"><a href="#编辑Gruntfile-js" class="headerlink" title="编辑Gruntfile.js"></a>编辑<code>Gruntfile.js</code></h4><p>下面是对<code>grunt</code>插件<code>uglify</code>的简单实例<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 项目配置</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    uglify: &#123;<span class="comment">//任务，名称是插件名</span></span><br><span class="line">      build: &#123;<span class="comment">//目标：可以多个</span></span><br><span class="line">        src: [<span class="string">'src/test.js'</span>,<span class="string">'src/event.js'</span>],</span><br><span class="line">        dest: <span class="string">'dest/uglifyResult.min.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 加载提供"uglify"任务的插件</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">  <span class="comment">// 默认任务</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="运行grunt"><a href="#运行grunt" class="headerlink" title="运行grunt"></a>运行<code>grunt</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/grunt/grunt4.png" alt="uglify的结果"></p><p>查看<code>uglifyResult.min.js</code>的内容，已经将<code>test.js</code>和<code>event.js</code>的内容压缩到一起了，这儿就不放图了，有兴趣的自己试试。</p><p>经过上面的基础实例，想必已经对<code>grunt</code>的作用和工作原理有所理解,只需写个配置文件，运行下grunt命令，就可以压缩文件了，果然方便。上面只是对<code>grunt</code>插件<code>uglify</code>的演示，其他插件的用法，我们继续。</p><h3 id="Grunt相关配置"><a href="#Grunt相关配置" class="headerlink" title="Grunt相关配置"></a>Grunt相关配置</h3><p>从上面我们看到了<code>grunt</code>有种种插件，各种插件的用法也不尽相同，除此之外，<code>grunt</code>还有一些约定，使得每个<code>grunt</code>插件都可以配置公共属性：</p><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><h4 id="files"><a href="#files" class="headerlink" title="files"></a>files</h4><blockquote><p>小技巧:</p></blockquote><blockquote><ul><li><code>src</code>匹配所有的<code>.styl</code>文件：设置<code>src: &#39;*.styl&#39;</code>是匹配不到的，因为<code>*</code>不匹配<code>/</code>。<code>**</code>可以匹配<code>/</code>，且一个路径中只可以出现一个<code>**</code>，所以可以设置为：<code>src: &#39;**/*.styl&#39;</code></li><li>生成多个<code>dest</code>文件：<code>dest</code>只能是一个字符串，表示单个文件，设置为[‘result/<em>.css</em>‘]会报错，只能用动态创建文件对象：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">files: [</span><br><span class="line">    &#123;</span><br><span class="line">        expand: <span class="literal">true</span>,</span><br><span class="line">        src: [<span class="string">'*.styl'</span>],</span><br><span class="line">        cwd: <span class="string">'css/stylus/src/'</span>,</span><br><span class="line">        dest: <span class="string">'css/stylus/result/'</span>,</span><br><span class="line">        ext: <span class="string">'.css'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h3><h4 id="实例1-单独使用concat插件"><a href="#实例1-单独使用concat插件" class="headerlink" title="实例1:单独使用concat插件"></a>实例1:单独使用concat插件</h4><h5 id="package-json不变，Gruntfile-js如下："><a href="#package-json不变，Gruntfile-js如下：" class="headerlink" title="package.json不变，Gruntfile.js如下："></a><code>package.json</code>不变，<code>Gruntfile.js</code>如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">    pkg:grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    concat:&#123;</span><br><span class="line">      options:&#123;</span><br><span class="line">        separator:<span class="string">';'</span><span class="comment">//文件连接处的分隔符</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mytarget:&#123;</span><br><span class="line">        src:<span class="string">'src/*.js'</span>,</span><br><span class="line">        dest:<span class="string">'dest/concatResult.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>]);</span><br></pre></td></tr></table></figure><h5 id="运行grunt-1"><a href="#运行grunt-1" class="headerlink" title="运行grunt"></a>运行<code>grunt</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/grunt/grunt5.png" alt="concat结果图"></p><p><code>concatResult.js</code>内容</p>]]></content>
      
        <categories>
            
            <category> Grunt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Grunt </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.shtml中include标签的用法]]></title>
      <url>http://jintang.github.io/2016/07/13/shtml%E4%B8%ADinclude%E6%A0%87%E7%AD%BE%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote><p>我们的<code>html</code>文件类似的有<code>.shtml</code>、<code>shtm</code>，这种和<code>html</code>文件的区别在于：</p></blockquote><ul><li>html是一种静态生成的页面</li><li>shtml是一种基于<code>SSI(Server Side Include)</code>技术的文件,它的机制是动态包含。<ul><li>SSI 就是在 HTML 文件中，可以通过注释行调用的命令;</li><li>当我们向 web服务器比如 apache 请求访问页面时，如果解析到其中有 SSI 包含指令时，就会自动包含被包含的页面;</li><li>包含动作是在每次用户请求页面时发生，所以如果被包含的页面内容有变化，也能实时的反应出来，正因为如此，就很容易用来实现静态页面的动态嵌入，我们就可以把<strong>出现很多的重复区域内容发布成一个独立静态页面</strong>，然后在需要的地方用SSI指令包含进去，比如像<strong>全站的头部和尾部</strong>，<strong>全站最新新闻</strong>等等;</li></ul></li></ul><p>深入理解参考：<a href="http://www.cnblogs.com/zichi/p/5111159.html" target="_blank" rel="noopener">http://www.cnblogs.com/zichi/p/5111159.html</a></p><p>那么，常用的SSI指令是什么呢？是<code>include</code>,用例如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过注释的方法来嵌入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#include virtual="/modelExample/common/title.shtml"--&gt;</span></span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="include标签的语法-lt-include-PathType-FilePath-gt"><a href="#include标签的语法-lt-include-PathType-FilePath-gt" class="headerlink" title="include标签的语法&lt;!-- #include PathType = FilePath --&gt;"></a>include标签的语法<code>&lt;!-- #include PathType = FilePath --&gt;</code></h3><ul><li><strong>FilePath:</strong>分为<code>绝对路径</code>与<code>相对路径</code><ul><li>绝对路径：以<code>/</code>开头</li><li>相对路径：不是以<code>/</code>开头的都是相对路径</li></ul></li><li><strong>pathType:</strong><code>virtual</code>与<code>file</code><ul><li>virtual:可以使用绝对路径，这样就可以使用指向上层目录</li><li>file:只能是相对路径，不能使用绝对路径，无法指向上层目录</li></ul></li></ul><p><strong>共同点：</strong><code>virtual</code>与<code>file</code>都使用相对路径时，效果一样；</p><p>可以参考：<a href="http://ttaale.iteye.com/blog/1030439" target="_blank" rel="noopener">http://ttaale.iteye.com/blog/1030439</a></p><p>但我测试他说的<code>virtual</code>通过相对路径访问上层目录是不行的</p><p><strong>Tip:</strong>假如<code>include</code>引入了公共头，而在公共头里又引入了其他文件，此时我们的路径是引入公共头的路径，而不是公共头所在的路径。这时候，如果公共头里引入的其他文件是相对路径，就有可能访问不到，所以公共头里引入的其他文件最好是绝对路径。</p>]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> SSI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js我们应该知道的]]></title>
      <url>http://jintang.github.io/2016/07/08/js%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="eval-方法的替换方法"><a href="#eval-方法的替换方法" class="headerlink" title="eval()方法的替换方法"></a>eval()方法的替换方法</h3><p>js里有个神奇的方法：<code>eval()</code>，但是不建议使用，原因看看<a href="https://www.zhihu.com/question/20591877" target="_blank" rel="noopener">知乎的回答</a>，但是有时候我们确实需要一个这样作用的方法，下面是替换的方法：<br>来源于<a href="http://blog.csdn.net/xundh/article/details/48153121" target="_blank" rel="noopener">这位前辈的文章</a><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算表达式的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Fn = <span class="built_in">Function</span>;  <span class="comment">//一个变量指向Function，防止有些前端编译工具报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fn(<span class="string">'return '</span> + fn)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>解释一下</strong>：<br>我们创建方法通常有三种方式：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.函数声明*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*2.函数表达式*/</span></span><br><span class="line"><span class="keyword">var</span> aaa=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*3.用Function构造函数：</span></span><br><span class="line"><span class="comment">* 可接受多个参数，但最后一个参数总是函数体,前面的才是新方法的参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> aaa=<span class="keyword">new</span> <span class="built_in">Function</span>(arg1,arg2...argn);</span><br></pre></td></tr></table></figure><p></p><p>所以,利用<code>Function()</code>构造方法就可以实现<code>eval()</code>的功能<br><a id="more"></a></p><h3 id="对象的属性描述符"><a href="#对象的属性描述符" class="headerlink" title="对象的属性描述符"></a>对象的属性描述符</h3><p>对象有很多属性来描述这个对象的特点，这些属性就叫属性描述符。属性描述符有两种主要形式：<strong>数据描述符</strong> 和 <strong>存取描述符</strong> , 详细请参看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这儿</a></p><ul><li><strong>两者都是的描述符</strong>：<ul><li><code>configurable</code>: 当且仅当该属性为 <code>true</code> 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 <code>false</code> , 当为 <code>false</code> 时, 除 <code>writable</code> 特性外的其他特性不可被修改</li><li><code>enumerable</code>: 当且仅当该属性为 <code>true</code> 时，该属性才能够出现在对象的枚举属性中。默认为 <code>false</code> , 当一个属性不可被枚举时，使用 <code>Object.keys(obj)</code> 是获取不到该属性的，此时可以用 <code>Object.getOwnPropertyNames(obj)</code></li></ul></li><li><strong>数据描述符</strong>：<ul><li><code>value</code>: 可以是任何有效的值（数值，对象，函数等）。默认为 <code>undefined</code></li><li><code>writable</code>: 当且仅当该属性为 <code>true</code> 时， <code>value</code> 才能被赋值运算符改变。默认为 <code>false</code></li></ul></li><li><strong>存取描述符</strong>:<ul><li><code>get</code>: 一个给属性提供 <code>getter</code> 的方法，如果没有 <code>getter</code> 则为 <code>undefined</code> 。该方法返回值被用作属性值。默认为 <code>undefined</code></li><li><code>set</code>: 一个给属性提供 <code>setter</code> 的方法，如果没有 <code>setter</code> 则为 <code>undefined</code> 。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 <code>undefined</code></li></ul></li></ul><p><code>Object</code> 有两个方法可以操作属性描述符，分别是：<code>Object.defineProperties(obj, props)</code> 与 <code>Object.defineProperty(obj, prop, descriptor)</code> ,我们知道， <code>vue</code> 的双向绑定就是利用 <code>defineProperty</code> 定义 <code>get</code> 与 <code>set</code> 实现的。</p><p>操作的描述符必须是这两种形式之一，不能同时是两者。所以下面这种是错误的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"conflict"</span>, &#123;</span><br><span class="line">  value: <span class="number">0x9f91102</span>, </span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xdeadbeef</span>; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors</span></span><br></pre></td></tr></table></figure><p></p><p>我们默认新创建的对象那些 <code>configurable</code> 等描述符对应的值都是 <code>true</code>，他们继承自原型链。如果要自己定义描述符， 用 <code>Object.create(null)</code> 来创建对象</p><h3 id="setTimeout-fun-time-与setInterval-fun-time"><a href="#setTimeout-fun-time-与setInterval-fun-time" class="headerlink" title="setTimeout(fun,time)与setInterval(fun,time)"></a>setTimeout(fun,time)与setInterval(fun,time)</h3><p>返回值是个唯一标识符，通常是个数字。 用于清除定时器和gc回收，比如：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">500</span>)</span><br><span class="line">clearTimeout(timer); <span class="comment">// 清除定时器</span></span><br><span class="line">timer = <span class="literal">null</span>; <span class="comment">// 释放让gc回收</span></span><br></pre></td></tr></table></figure><p></p><p><strong>注意：</strong></p><ol><li><p>在<code>time</code>的延迟之后才可以执行第一次，而不是马上开始执行。即使是<code>setTimeout(fun, 0)</code>，也是在主线程执行后再执行<code>fun</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// a</span></span><br></pre></td></tr></table></figure></li><li><p>要想循环体立即执行，可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        hand()</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法内部的return-false"><a href="#方法内部的return-false" class="headerlink" title="方法内部的return false"></a>方法内部的<code>return false</code></h3><p>经常可以看到这样的语句:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).bind(<span class="string">'click'</span>,test);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>return false</code>等于<code>e.preventDefault()</code></p><h3 id="从一个数组中删除子数组"><a href="#从一个数组中删除子数组" class="headerlink" title="从一个数组中删除子数组"></a>从一个数组中删除子数组</h3><p>先看下<strong>第一版</strong>：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">arr, delArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = arr[i];  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; delArr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> delItem = delArr[j];</span><br><span class="line">        <span class="keyword">if</span> (item === delItem) &#123; <span class="comment">// 满足某种条件</span></span><br><span class="line">            arr.splice(i , <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>乍看之下没问题，但有问题。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> delArr = [<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">del(arr, delArr);</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,5]</span></span><br></pre></td></tr></table></figure><p></p><p>原因很简单，先删除了4，此时5的下标已经往前移动了1，然而循环的i已经到了5当前的下标，所以就跳过了5的判断。下面来个<strong>修复版1</strong>：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">arr, delArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; delArr.length; i ++) &#123;</span><br><span class="line">      <span class="keyword">let</span> delItem = delArr[i];  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = arr[j];</span><br><span class="line">        <span class="keyword">if</span> (item === delItem) &#123; <span class="comment">// 满足某种条件</span></span><br><span class="line">            arr.splice(j , <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>只是换了两个循环的顺序，就ok了。因为两个数组里没有重复数据，所以在删除一个元素之后可以通过<code>break</code>直接进行下一次外层循环。得到正确的结果。试试下面的例子：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> delArr = [<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">del(arr, delArr);</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p></p><p>可能是<code>del</code>方法里用了<code>break</code>的原因，去掉之后发现还是同样的结果。原因同<strong>第一版</strong>。<br>再来看看<strong>修复版2</strong>：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">arr, delArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; delArr.length; i ++) &#123;</span><br><span class="line">      <span class="keyword">let</span> delItem = delArr[i];  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span> ; j--) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = arr[j];</span><br><span class="line">        <span class="keyword">if</span> (item === delItem) &#123; <span class="comment">// 满足某种条件</span></span><br><span class="line">            arr.splice(j , <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>再试试上面的例子，得到的结果正确。不论是数组中有没有重复数据，都可以得到正确的结果。原因想必大家一看就明白了，对<code>arr</code>的循环一定要倒序，这样才不会跳过某一项。</p>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>http://jintang.github.io/2016/06/24/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote><p>仅以此记录自己常忘记的命令</p></blockquote><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>安装完之后需要一些基本配置：</p><ol><li>生成公钥私钥： <code>ssh-keygen</code></li><li><p>在配置用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br><span class="line">$ git config --global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure></li><li><p>可以用 <code>git config --list</code> 查看配置，所有的自定义配置存放在 <code>~/.gitconfig</code> 里</p></li></ol><h3 id="本地仓库-关联-远程仓库"><a href="#本地仓库-关联-远程仓库" class="headerlink" title="本地仓库 关联 远程仓库"></a>本地仓库 关联 远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程git仓库地址</span><br></pre></td></tr></table></figure><p>如果是 <code>git clone</code> 下来的仓库，本地仓库与远程仓库是自动关联的。有时候我们本地做了<code>demo</code>，做完之后想上传到<code>github</code>去，就在<code>github</code>上新建了一个仓库，但加上了<code>init README</code>，当我用上面的命令将本地仓库与远程仓库关联之后，由于远程仓库有 <code>README.md</code> 文件，所以需要先 <code>pull</code> ， 但报了下面的错误:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br><span class="line">Error redoing merge 1234deadbeef1234deadbeef</span><br></pre></td></tr></table></figure><p></p><p>解决方案:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories # git 2.9后可用</span><br></pre></td></tr></table></figure><p></p><h3 id="本地分支-关联-远程分支"><a href="#本地分支-关联-远程分支" class="headerlink" title="本地分支 关联 远程分支"></a>本地分支 关联 远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure><p>创建新分支并关联到远程分支<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名x origin/远程分支名x</span><br></pre></td></tr></table></figure><p></p><p>查看本地分支与远程分支的关联关系<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><p></p><p>如果关联错了先取消与远程仓库的关联，再重新关联分支<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin # 注意是取消了仓库的关联，还需要重新关联仓库</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h3><p>经过上面的步骤我们关联了远程仓库和远程分支，然后就可以用下面的步骤工作了。<br>每次操作完可以通过 <code>git status</code> 查看文件状态</p><ol><li><p>add</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . # .表示所有</span><br></pre></td></tr></table></figure><p>如果文件提交错了，想撤销：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt; # 不指定文件表示所有文件</span><br></pre></td></tr></table></figure><p>如果想要放弃文件修改:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt; #</span><br></pre></td></tr></table></figure></li><li><p>commit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "本次提交的备注，一般填写内容"</span><br></pre></td></tr></table></figure><p>如果 <code>commit</code> 错了，想撤销：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 commit 历史，找到想撤销的commit_id</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加--hard只会撤销commit信息，而commit的代码不会撤销</span></span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure></li><li><p>push</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 若当前分支有关联的远程分支,下面命令会自动提交到对应的远程分支</span></span><br><span class="line">git push</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定其他分支提交</span></span><br><span class="line">git push origin 远程分支名</span><br></pre></td></tr></table></figure><p>如果 <code>push</code> 错了，想撤销：<br>先用上面撤销 <code>commit</code> 的办法回退本地代码，然后强制提交覆盖远程代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;分支名&gt; --force</span><br></pre></td></tr></table></figure></li></ol><h3 id="分支切换流程"><a href="#分支切换流程" class="headerlink" title="分支切换流程"></a>分支切换流程</h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。</p><ol><li><p>储藏当前没做完的工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">git stash save "stash说明"</span><br></pre></td></tr></table></figure><p>查看储藏列表，可能会有多个储藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure></li><li><p>转到新分支</p><p>我们可以用 <code>git checkout 分支名</code> 切换到该分支 或者 上面提到的 <code>git checkout -b 分支名</code> 创建新分支并转到该分支</p></li><li><p>做完工作重新回到原来分支并恢复储藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply # 默认是最近的储藏</span><br></pre></td></tr></table></figure><p>若要应用更早的储藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;2&#125; # stash@&#123;2&#125;是 git stash list 下列出的一条储藏id</span><br></pre></td></tr></table></figure></li><li><p>清除储藏<br>随着 <code>git stash list</code> 下的储藏越来越多，我们需要清理一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stashId</span><br></pre></td></tr></table></figure><p>可以通过<code>git stash pop</code> 同时完成 <code>apply</code> 和 <code>drop</code> 的工作。</p><p>清除所有储藏：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><p>更多请参考 <a href="http://iissnan.com/progit/html/zh/ch6_3.html" target="_blank" rel="noopener">这儿</a></p></li></ol><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ol><li><p><code>git branch -a</code> 看不到所有的远程分支：</p><p>我之前克隆了项目的管理端仓库，今天开始写代码。发现同事和我不在一个分支上，他们在 <code>dev</code> 分支，而我在默认的分支。<br>于是我使用 <code>git branch -a</code><br>来查看所有分支，却只能看到 <code>master</code> 分支，远程的 <code>dev</code> 分支我并看不到，飞哥告诉我这个命令： <code>git fetch &lt;远程主机名：默认是origin&gt;</code></p><p>这条语句的作用是：取回远程仓库所有分支的更新。这样就可以看到 <code>origin/dev</code>分支了，然后就可以创建本地对应的分支并 <code>pull</code> 。</p></li></ol>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ionic监听手机硬键盘的返回键]]></title>
      <url>http://jintang.github.io/2016/06/22/Ionic%E7%9B%91%E5%90%AC%E6%89%8B%E6%9C%BA%E7%A1%AC%E9%94%AE%E7%9B%98%E7%9A%84%E8%BF%94%E5%9B%9E%E9%94%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>我们用ionic打包的app在真机上需要处理手机硬键盘的返回键,下面提供几种方法:</p></blockquote><p><strong>首先,放上<a href="http://ionicframework.com/docs/api/service/$ionicPlatform/" target="_blank" rel="noopener">官方文档</a>和<a href="https://github.com/driftyco/ionic/blob/master/js/angular/service/platform.js#L2" target="_blank" rel="noopener">源码地址</a>,懒得看英文的,就先看我这个吧</strong></p><h3 id="ionicPlatform-registerBackButtonAction-callback-priority-actionId"><a href="#ionicPlatform-registerBackButtonAction-callback-priority-actionId" class="headerlink" title="$ionicPlatform.registerBackButtonAction(callback, priority, [actionId])"></a>$ionicPlatform.registerBackButtonAction(callback, priority, [actionId])</h3><p>这个方法一般放在<code>app.js</code>文件下的<code>run()</code>中,<code>controller</code>中不起作用,实例如下:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ionicPlatform.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $ionicPlatform.registerBackButtonAction(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//1.可以通过$state.current或$location.href()来判断处于哪个页面</span></span><br><span class="line">        <span class="keyword">if</span>($state.current.name==<span class="string">"order"</span>)&#123;</span><br><span class="line">            <span class="comment">//2.因为run方法中无法注入$scope,只能注入$rootScope,此处通过$rootScope来判断子scope中的变量</span></span><br><span class="line">            <span class="keyword">if</span>($rootScope.$$childHead.button1.state)&#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $<span class="built_in">window</span>.history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($state.current.name==<span class="string">"map"</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>($rootScope.$$childHead.locInterval)&#123;</span><br><span class="line">                $interval.cancel($rootScope.$$childHead.locInterval);</span><br><span class="line">                <span class="built_in">console</span>.debug(<span class="string">'清除map计时器'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $<span class="built_in">window</span>.history.back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.阻止默认的行为</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,<span class="number">101</span>)<span class="comment">//101优先级常用于覆盖‘返回上一个页面’的默认行为  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>callback</td><td>回调方法</td></tr><tr><td>priority</td><td><strong>优先级</strong>:常用的优先级有:100=返回上一个页面;150=side menu;200=关闭modal;300=关闭action sheet;400=关闭popup;500=关闭loading overlay;<strong><em>大于哪个就会覆盖掉哪个默认行为</em></strong></td></tr><tr><td>actionId</td><td>唯一id(选填)</td></tr></tbody></table><h3 id="ionicPlatform-onHardwareBackButton-callback"><a href="#ionicPlatform-onHardwareBackButton-callback" class="headerlink" title="$ionicPlatform.onHardwareBackButton(callback)"></a>$ionicPlatform.onHardwareBackButton(callback)</h3><p>这个方法可以写在<code>controller</code>中,但有个很严重的bug,实例如下:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ionicPlatform.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $ionicPlatform.onHardwareBackButton(back);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'真机返回键事件'</span>);</span><br><span class="line">    <span class="comment">//严重的bug:无法阻止默认的返回事件:返回到上个页面,下面的语句都不起作用</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopProgation();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>取消注册的返回事件:<code>$ionicPlatform.offHardwareBackButton(callback)</code></p><p>我将此方法写入controller,在按返回键的时候,发生了很奇怪的事:</p><ul><li>第一次进入此页面按返回键:console打印了一遍</li><li>第二次进入此页面按返回键:console打印了二遍</li><li>第三次进入此页面按返回键:console打印了三遍</li></ul><p><strong><em>我分析的原因:</em></strong>虽然事件注册在这个controller里,但是此事件是全局的,每次进入此页面都会多注册一次</p><p><strong><em>解决方案:</em></strong>代码如下:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ionicPlatform.offHardwareBackButton($scope.goBack);</span><br><span class="line">$ionicPlatform.onHardwareBackButton($scope.goBack);</span><br><span class="line">$scope.goBack=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*这儿要先把之前注册的事件清掉*/</span></span><br><span class="line">    $ionicPlatform.offHardwareBackButton($scope.goBack);</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="document-addEventListener-‘backbutton’-function-false"><a href="#document-addEventListener-‘backbutton’-function-false" class="headerlink" title="document.addEventListener(‘backbutton’,function,false)"></a>document.addEventListener(‘backbutton’,function,false)</h3><p>这个方法也有那个严重bug,跟上面的<code>onHardwareBackButton</code>的bug一样.<br><strong><em>因为</em></strong>:<code>onHardwareBackButton</code>的源码就是封装的document.addEventListener(‘backbutton’,function,false)</p>]]></content>
      
        <categories>
            
            <category> ionic </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ionic </tag>
            
            <tag> $ionicPlatform </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular数据双向绑定bug]]></title>
      <url>http://jintang.github.io/2016/05/05/angular%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>本文主要参考:<a href="http://www.ngnice.com/posts/2c8208220edb94" target="_blank" rel="noopener">http://www.ngnice.com/posts/2c8208220edb94</a></p><blockquote><p>angular不推荐直接操作dom,建议使用双向绑定的数据来操作</p></blockquote><h3 id="1-从controller绑定到html上-有时候数据改变了-但是html并不刷新"><a href="#1-从controller绑定到html上-有时候数据改变了-但是html并不刷新" class="headerlink" title="1.从controller绑定到html上,有时候数据改变了,但是html并不刷新"></a>1.从controller绑定到html上,有时候数据改变了,但是html并不刷新</h3><p><strong>原因:</strong>一般是$apply导致的,对于大多数操作，$apply都会自动执行，所以不用担心，但是如果使用了angular之外的功能，比如直接调用了setTimeout函数、挂接了jquery的事件、使用了jquery的ajax操作等等.那么系统就没有机会帮你调用$apply，界面也就没有机会刷新了，但是你如果之后又做了其他会导致$apply的操作，你会发现以前“欠下”的那次界面刷新被正常执行了</p><p><em>例:</em><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种情况下你在页面中绑定的time变量将不会被自动刷新</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p></p><p><strong>解决方案:</strong></p><p>(1). 手动刷新:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p></p><p>(2). 使用angular内置指令:<strong>因为angular内置指令最后会调用$apply()</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="2-从html绑定到controller里-html动态改变了数据-但是controller中数据并不改变"><a href="#2-从html绑定到controller里-html动态改变了数据-但是controller中数据并不改变" class="headerlink" title="2.从html绑定到controller里,html动态改变了数据,但是controller中数据并不改变"></a>2.从html绑定到controller里,html动态改变了数据,但是controller中数据并不改变</h3><p><em>例1:这段代码运行正常</em><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"red"</span>&gt;</span>  Red <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span> Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"blue"</span>&gt;</span> Blue <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;!-- color的值会随着选中的单选按钮而改变 --&gt;</span><br><span class="line">&#123;&#123;color&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>例2:这段代码工作不正常，color值将不会随着选择而变化</em><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-repeat=<span class="string">"value in ['red', 'green', 'blue']"</span>&gt;</span><br><span class="line">  &lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"color"</span> <span class="attr">ng-value</span>=<span class="string">"value"</span>&gt;</span>  &#123;&#123;value&#125;&#125; <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123;color&#125;&#125;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>原因:</strong>ng-repeat创建了一个子scope,对color值的修改，会去修改子级的变量，而父级的同名变量不会被修改。因为<code>angular的继承方式是js的原型继承,外层的color读到的是外层scope的变量,而不会读到子层scope的</code></p><p><strong>解决方案:</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div ng-repeat=<span class="string">"value in ['red', 'green', 'blue']"</span>&gt;</span><br><span class="line">  &lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">ng-model</span>=<span class="string">"vm.color"</span> <span class="attr">ng-value</span>=<span class="string">"value"</span>&gt;</span>  &#123;&#123;value&#125;&#125; <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123;vm.color&#125;&#125;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>分析:</strong>外层scope定义了对象$scope.vm={}(vm此处的寓意是ViewModel),根据js中基本类型与引用类型存储的堆栈方式,在子scope中绑定的是vm.color,改变的vm对象的属性,而不是vm这个对象,所以,赋值会正确的作用到父级scope上.</p><p><strong>关键理解:原型继承,基本类型与引用类型在堆栈中的存储方式</strong></p>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular数据双向绑定 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[兔子问题(斐波那契数列)]]></title>
      <url>http://jintang.github.io/2016/04/21/%E5%85%94%E5%AD%90%E9%97%AE%E9%A2%98-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>有这样一个题目:</strong>已知一对兔子每一个月可以生一对小兔子，而一对兔子出生后第三个月开始生小兔子假如一年内没有发生死亡，则一对兔子一年内能繁殖成多少对？</p><p>之前有人做过,我却怎么想都不明白,今天自己终于想出了方法,唉,这算是我的逻辑觉醒吗?</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        arr[i]=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        arr[i].count=<span class="number">0</span>;</span><br><span class="line">        arr[i].birth=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[<span class="number">0</span>].count=<span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">1</span>].count=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">        addBirth(i);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            arr[i].count=dealCount(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="number">1</span>+<span class="string">"月为:"</span>+arr[i].count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加兔子的月份</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addBirth</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">        arr[i].birth++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算当前月的数量=初始时的一对兔子+当前月1个月前的所有能生小兔子的数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealCount</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rabbit=arr[<span class="number">0</span>].count;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].birth&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            rabbit+=arr[i].count;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> rabbit;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>这种方法其实不是正常的逻辑,我们知道,斐波那契数列的特征是:f(n)=f(n-1)+f(n-2),按照我的正常逻辑:当月的兔子数=当前月前一个月的兔子数+前一个月可以生育的兔子生下来的兔子数,而我在上面是这样计算的:当月的兔子数=刚开始的1对+1月到当月前一个月所有会生下的兔子数<br>最后的结果是正确的</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRabbit</span> (<span class="params">birth</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">     obj.birth=birth || <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            item.push(createRabbit());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            item.push(createRabbit(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i]=item;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            addBirth(i);</span><br><span class="line">            dealCount(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="number">1</span>+<span class="string">"月为:"</span>+arr[i].length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addBirth</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr[x<span class="number">-1</span>].length;i++)&#123;</span><br><span class="line">        arr[x<span class="number">-1</span>][i].birth++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealCount</span> (<span class="params">x</span>) </span>&#123;   </span><br><span class="line">    <span class="comment">//1.先把前一个月的对象赋给这个月, 然后对象里的月份加1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;arr[x<span class="number">-1</span>].length;k++)&#123;</span><br><span class="line">        <span class="keyword">var</span> obj=createRabbit(arr[x<span class="number">-1</span>][k].birth);</span><br><span class="line">        arr[x].push(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断里面的兔子月份,超出则判断生小兔子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr[x].length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[x][i].birth&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            arr[x].push(createRabbit());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法就实现了正常的逻辑,注意里面对象的赋值,区分什么时候该新创建对象,因为对象的值在堆里,改动任何一个该对象的引用都会改变该对象的值</p>]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular中promise的用法]]></title>
      <url>http://jintang.github.io/2016/04/19/angular%E4%B9%8Bpromise%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>本文参考自<a href="http://www.cnblogs.com/mliudong/p/4151594.html" target="_blank" rel="noopener">http://www.cnblogs.com/mliudong/p/4151594.html</a></p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>Promise是一种模式，以同步操作的流程形式来操作异步事件，避免了层层嵌套，可以链式操作异步事件。</p><p><strong>Service:HelloWorld的定义如下:</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.factory(<span class="string">'HelloWorld'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$q, $timeout</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getMessages = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">        $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            deferred.resolve([<span class="string">'Hello'</span>, <span class="string">'world'</span>]);</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> deferred.promise;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getMessages: getMessages</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p><strong>Controller代码:</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defer = $q.defer();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            defer.notify(<span class="string">"查询性别中"</span>);</span><br><span class="line">            <span class="keyword">if</span> (sex==<span class="string">'male'</span>) &#123;</span><br><span class="line">                defer.resolve(<span class="string">'性别是'</span> + sex );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                defer.reject(<span class="string">'性别不是 '</span> + sex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> defer.promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sex=<span class="string">'male'</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> promiseA = <span class="keyword">async</span>(sex);</span><br><span class="line">promiseB=promiseA.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第一次promise:"</span>+response);</span><br><span class="line">    <span class="comment">//可以直接返回值</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;); </span><br><span class="line">promiseC=promiseB.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defer=$q.defer();</span><br><span class="line">    HelloWorld.getMessages().then(<span class="function"><span class="keyword">function</span>(<span class="params">rrr</span>)</span>&#123;</span><br><span class="line">        defer.resolve(<span class="string">'rrr===='</span>+rrr);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"第二次promise:"</span>+rrr);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//如果promise里面有回调,不能直接返回,还是要用defer处理后返回defer.promise</span></span><br><span class="line">     <span class="keyword">return</span> defer.promise; </span><br><span class="line">&#125;)</span><br><span class="line">promiseC.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"第三次promise:"</span>+response);</span><br><span class="line">    &#125;, <span class="number">800</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>结果如下:</strong><br>promiseA花费的时间为:1000ms;<br>promiseB花费的时间为:500ms;<br>promiseC花费的时间为:800ms;<br>虽然promiseB花费的时间最短,但是还是按链式执行,结果如下:<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/promise.png" alt="结果"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h4 id="1-通过调用-q-defferd-返回deffered对象以链式调用"><a href="#1-通过调用-q-defferd-返回deffered对象以链式调用" class="headerlink" title="1. 通过调用 $q.defferd 返回deffered对象以链式调用"></a>1. 通过调用 <code>$q.defferd</code> 返回<code>deffered</code>对象以链式调用</h4><p>获得<code>var defer = $q.defer()</code>;<br><strong>defer有三种方法:</strong></p><ul><li>resolve(value):表示promise执行成功</li><li>reject(reason):表示promise执行失败</li><li>notify(value): 通知promise的执行状态,会被调用0到多次</li></ul><p><strong>deffered 对象属性:</strong></p><p><code>promise</code> ：最后返回的是一个新的deferred对象 promise 属性，而不是原来的deferred对象。这个新的Promise对象只能观察原来Promise对象的状态，而无法修改deferred对象的内在状态。</p><h4 id="2-当创建-deferred-对象时会创建一个新的-promise-对象-并可以通过-deferred-promise-得到该引用。"><a href="#2-当创建-deferred-对象时会创建一个新的-promise-对象-并可以通过-deferred-promise-得到该引用。" class="headerlink" title="2. 当创建 deferred 对象时会创建一个新的 promise 对象,并可以通过 deferred.promise 得到该引用。"></a>2. 当创建 deferred 对象时会创建一个新的 promise 对象,并可以通过 deferred.promise 得到该引用。</h4><p>promise 对象的目的是在 deferred 任务完成时,允许感兴趣的部分取得其执行结果。</p><p><strong>promise的方法:</strong></p><ul><li><em>then(errorHandler, fulfilledHandler, progressHandler)</em> ：then方法用来监听一个Promise的不同状态。errorHandler监听failed状态，fulfilledHandler监听fulfilled状态，progressHandler监听unfulfilled（未完成）状态。此外,notify 回调可能被调用 0到多次，提供一个进度指示在解决或拒绝（resolve和rejected）之前</li><li><em>catch(errorCallback)</em> : promise.then(null, errorCallback) 的快捷方式</li><li><em>finally(callback)</em> : 让你可以观察到一个 promise 是被执行还是被拒绝, 但这样做不用修改最后的 value值。 这可以用来做一些释放资源或者清理无用对象的工作,不管promise 被拒绝还是解决</li></ul><p><strong>Tip:通过then()方法可以实现promise链式调用</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promiseB = promiseA.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> result + <span class="number">1</span>;  </span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">//promiseB 将会在处理完 promiseA 之后立刻被处理, 并且其result值是promiseA的返回值  </span></span><br><span class="line">promiseB.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do something   </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular </tag>
            
            <tag> promise </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浮动闭合的css方法]]></title>
      <url>http://jintang.github.io/2016/04/17/%E5%89%8D%E7%AB%AF%E6%B5%AE%E5%8A%A8%E9%97%AD%E5%90%88%E7%9A%84css%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>本文参考自：<a href="http://www.daqianduan.com/3606.html" target="_blank" rel="noopener">大前端</a><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span>&#123;<span class="attribute">background</span>: <span class="number">#ff0</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span>&#123;<span class="attribute">float</span>: left;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="1-传统的万能清除方法"><a href="#1-传统的万能清除方法" class="headerlink" title="1.传统的万能清除方法:"></a>1.传统的万能清除方法:</h3><p>给末尾的li元素后面增加一个元素：<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code><br>其样式为：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="2-常用的清除方法"><a href="#2-常用的清除方法" class="headerlink" title="2.常用的清除方法:"></a>2.常用的清除方法:</h3><p>在父类元素上面加类：<code>&lt;ul class=&quot;clearfix&quot;&gt;&lt;/ul&gt;</code>，后面的两个方法也是在父元素上加clearfix类<br>利用伪类,其样式为：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;<span class="comment">/*table也可以*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="3-最优浮动闭合方案："><a href="#3-最优浮动闭合方案：" class="headerlink" title="3.最优浮动闭合方案："></a>3.最优浮动闭合方案：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;*+height:1%;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="4-很拉轰的浮动闭合办法："><a href="#4-很拉轰的浮动闭合办法：" class="headerlink" title="4.很拉轰的浮动闭合办法："></a>4.很拉轰的浮动闭合办法：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">overflow</span>:auto;<span class="attribute">_height</span>:<span class="number">1%</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="5-一位网友-radom-提供的"><a href="#5-一位网友-radom-提供的" class="headerlink" title="5.一位网友(radom)提供的:"></a>5.一位网友(radom)提供的:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">_zoom</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ionic.AngularJs下上传照片]]></title>
      <url>http://jintang.github.io/2016/03/15/angularJs%E3%80%81Ionic%E4%B8%8B%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87/</url>
      <content type="html"><![CDATA[<h3 id="1-安装上传照片需要的插件"><a href="#1-安装上传照片需要的插件" class="headerlink" title="1.安装上传照片需要的插件"></a>1.安装上传照片需要的插件</h3><p>1.先新建一个ionic项目<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ionic start <span class="built_in">test</span> tabs</span></span><br></pre></td></tr></table></figure><p></p><p>2.安装插件<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cordova plugin <span class="keyword">add</span><span class="bash"> cordova-plugin-image-picker</span></span><br><span class="line"><span class="bash">$ cordova plugin add cordova-plugin-camera</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>我们的yongche项目之前使用的camera插件是org.apache.cordova.camera,此处更新为cordova-plugin-camera,目前老版本的还可以使用</p></blockquote><p>3.添加android环境<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ionic platform add android</span></span><br></pre></td></tr></table></figure><p></p><h3 id="2-配置ng-cordova-js"><a href="#2-配置ng-cordova-js" class="headerlink" title="2.配置ng-cordova.js"></a>2.配置ng-cordova.js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在index.html中cordova.js旁边引入ng-cordova.js</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"cordova.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/ng-cordova.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在app.js中注入ngCordova</span></span><br><span class="line">angular.module(<span class="string">'starter'</span>, [<span class="string">'ionic'</span>,<span class="string">'ngCordova'</span>]).run(...)</span><br></pre></td></tr></table></figure><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>参考:<a href="https://cordova.apache.org/docs/en/latest/cordova-plugin-camera/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/cordova-plugin-camera/index.html</a><br><a id="more"></a><br>1.controller代码:</p><ul><li>照片被插件处理为base64编码</li><li>上传到处理照片的接口,返回照片的名称(这一步照片其实已经保存在了服务器)</li><li>将所有数据提交到接口,此时照片的字段为照片文件名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'starter.controllers'</span>, [])</span><br><span class="line">.controller(<span class="string">'TestCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,$ionicActionSheet,$compile,$timeout,$ionicPopup,$window,uploadPictureService</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//此处有两个数组分别用来控制添加和删除照片的逻辑,这两个逻辑有冲突,所以要放两个数组</span></span><br><span class="line">    <span class="keyword">var</span> imageURIs= [];</span><br><span class="line">    <span class="keyword">var</span> finalImgUrls=[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//讲上传的照片动态编译到html上</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showOnPage</span> (<span class="params">imageURI</span>) </span>&#123;</span><br><span class="line">        imageURIs.push(imageURI);</span><br><span class="line">        finalImgUrls.push(imageURI);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//所以还需要引入jquery</span></span><br><span class="line">        jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> im = $(<span class="string">'&lt;div class="col col-33" style="position:relative" id="img_'</span> + imageURIs.length + <span class="string">'"&gt;&lt;span class="delected" ng-click="rmEleApp('</span> + imageURIs.length + <span class="string">')" style="position:absolute;right:15px;top:-10px;font-size:18px;"&gt;x&lt;/span&gt;&lt;img  ng-src="data:image/jpeg;base64,'</span> + imageURI + <span class="string">'"  style="width:70px;height:70px;display:block;margin:0 auto;"  ng-click="scaleImg('</span> + finalImgUrls.length + <span class="string">')" /&gt;&lt;/div&gt;'</span>).prependTo(<span class="string">'#img_up'</span>);</span><br><span class="line">          $compile(im)($scope);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击弹出图片选择</span></span><br><span class="line">  $scope.showImageUploadChoices = <span class="function"><span class="keyword">function</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hideSheet = $ionicActionSheet.show(&#123;</span><br><span class="line">      buttons: [&#123;</span><br><span class="line">        text: <span class="string">'拍照上传'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        text: <span class="string">'从相册中选'</span></span><br><span class="line">      &#125;],</span><br><span class="line">      titleText: <span class="string">'图片上传'</span>,</span><br><span class="line">      cancelText: <span class="string">'取 消'</span>,</span><br><span class="line">      cancel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      buttonClicked: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123; <span class="comment">// 拍照上传</span></span><br><span class="line">          uploadPictureService.taskPicture(prop).then(<span class="function"><span class="keyword">function</span>(<span class="params">imageURI</span>) </span>&#123;</span><br><span class="line">              showOnPage(imageURI);</span><br><span class="line">          &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'wrong'</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123; <span class="comment">// 相册文件选择上传</span></span><br><span class="line">          uploadPictureService.readalbum(prop).then(<span class="function"><span class="keyword">function</span>(<span class="params">imageURI</span>) </span>&#123;</span><br><span class="line">            showOnPage(imageURI);</span><br><span class="line">          &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'wrong'</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//照片右上角的X号的触发事件</span></span><br><span class="line">  $scope.rmEleApp = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myEl = angular.element(<span class="built_in">document</span>.querySelector(<span class="string">'#img_'</span> + obj));</span><br><span class="line">    myEl.remove();</span><br><span class="line">    images.imageURIs[obj<span class="number">-1</span>]=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">'#addPic'</span>).is(<span class="string">':hidden'</span>)) &#123;<span class="comment">//如果加号图片隐藏了,就显示</span></span><br><span class="line">      $(<span class="string">'#addPic'</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//点击图片放大</span></span><br><span class="line">  $scope.scaleImg = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    $ionicPopup.alert(&#123;</span><br><span class="line">      template: <span class="string">'&lt;img src=data:image/jpeg;base64,'</span> + finalImgUrls[index - <span class="number">1</span>] + <span class="string">' style=" display: block; margin: 0 auto;"&gt;'</span>,</span><br><span class="line">      okText: <span class="string">'&lt;span style="background:#fff;"&gt;x&lt;/span&gt;'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*上面的步骤将照片显示在了页面上,但并没有上传到接口-------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的imageURL是用base64加密的很长很长的字串,所以需要另外一个接口单独处理下才可以上传到正式接口</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>2.公共配置上传照片的service与factory<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'starter'</span>)</span><br><span class="line">  .factory(<span class="string">'Camera'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getPicture: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> q = $q.defer();</span><br><span class="line">            navigator.camera.getPicture(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// Do any magic you need</span></span><br><span class="line">                q.resolve(result);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                q.reject(err);</span><br><span class="line">            &#125;, options);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> q.promise;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.factory(<span class="string">'uploadPictureService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$http,$timeout,$compile,Camera,$cordovaImagePicker</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="comment">// 读用户相册</span></span><br><span class="line">    readalbum : <span class="function"><span class="keyword">function</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pictureSource;  <span class="comment">//设定图片来源</span></span><br><span class="line">          <span class="keyword">var</span> destinationType; <span class="comment">//选择返回数据的格式</span></span><br><span class="line">          <span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,onDeviceReady,<span class="literal">false</span>);</span><br><span class="line">          <span class="comment">// Cordova准备好了可以使用了</span></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              pictureSource=navigator.camera.PictureSourceType;</span><br><span class="line">              destinationType=navigator.camera.DestinationType;</span><br><span class="line">              encodingType = navigator.camera.EncodingType.JPEG;</span><br><span class="line">              sourceType=pictureSource.SAVEDPHOTOALBUM;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">          <span class="comment">// maximumImagesCount: 9,</span></span><br><span class="line">          quality: <span class="number">80</span>,</span><br><span class="line">          targetWidth: <span class="number">400</span>,</span><br><span class="line">          targetHeight: <span class="number">400</span>,</span><br><span class="line">          saveToPhotoAlbum: <span class="literal">false</span>,</span><br><span class="line">          destinationType: destinationType.DATA_URL,</span><br><span class="line">          encodingType: encodingType,</span><br><span class="line">          sourceType: sourceType</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Camera.getPicture(options);</span><br><span class="line">         <span class="comment">// return $cordovaImagePicker.getPictures(options);</span></span><br><span class="line">         <span class="comment">// $cordovaImagePicker.getPictures(options)</span></span><br><span class="line">         <span class="comment">//    .then(function (results) &#123;</span></span><br><span class="line">         <span class="comment">//      for (var i = 0; i &lt; results.length; i++) &#123;</span></span><br><span class="line">         <span class="comment">//        console.log('Image URI: ' + results[i]);</span></span><br><span class="line">         <span class="comment">//      &#125;</span></span><br><span class="line">         <span class="comment">//    &#125;, function(error) &#123;</span></span><br><span class="line">         <span class="comment">//      // error getting photos</span></span><br><span class="line">         <span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍照</span></span><br><span class="line">    taskPicture : <span class="function"><span class="keyword">function</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!navigator.camera) &#123;</span><br><span class="line">          <span class="built_in">window</span>.plugins.toast.show(<span class="string">'请在真机环境中使用拍照上传。'</span>, <span class="string">'short'</span>, <span class="string">'center'</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pictureSource;  <span class="comment">//设定图片来源</span></span><br><span class="line">          <span class="keyword">var</span> destinationType; <span class="comment">//选择返回数据的格式</span></span><br><span class="line">          <span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,onDeviceReady,<span class="literal">false</span>);</span><br><span class="line">          <span class="comment">// Cordova准备好了可以使用了</span></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              pictureSource=navigator.camera.PictureSourceType;</span><br><span class="line">              destinationType=navigator.camera.DestinationType;</span><br><span class="line">              encodingType = navigator.camera.EncodingType.JPEG;</span><br><span class="line">              <span class="comment">// sourceType=pictureSource.SAVEDPHOTOALBUM;</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">          quality: <span class="number">80</span>,</span><br><span class="line">          targetWidth: <span class="number">400</span>,</span><br><span class="line">          targetHeight: <span class="number">400</span>,</span><br><span class="line">          saveToPhotoAlbum: <span class="literal">false</span>,</span><br><span class="line">          destinationType: destinationType.DATA_URL,</span><br><span class="line">          encodingType: encodingType,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Camera.getPicture(options);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>大功告成!</p>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ionic </tag>
            
            <tag> cordova </tag>
            
            <tag> $cordovaImagePicker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html屏幕自适应]]></title>
      <url>http://jintang.github.io/2016/02/19/html%E5%B1%8F%E5%B9%95%E8%87%AA%E9%80%82%E5%BA%94/</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="noopener">阮一峰的博客</a></p><h4 id="“自适应网页设计”的核心是：利用media属性判断不同的屏幕分辨率，并根据不同的分辨率适配不同的css"><a href="#“自适应网页设计”的核心是：利用media属性判断不同的屏幕分辨率，并根据不同的分辨率适配不同的css" class="headerlink" title="“自适应网页设计”的核心是：利用media属性判断不同的屏幕分辨率，并根据不同的分辨率适配不同的css"></a>“自适应网页设计”的核心是：利用media属性判断不同的屏幕分辨率，并根据不同的分辨率适配不同的css</h4><p>首先，在网页代码的头部，加入一行viewport元标签:允许网页宽度自动调整。</p><ul><li><p>主流浏览器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100% --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>老式浏览器（主要是IE6、7、8）：要用<a href="https://code.google.com/archive/p/css3-mediaqueries-js" target="_blank" rel="noopener">css3-mediaqueries.js</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">　　&lt;script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p><strong>1.适配不同css文件</strong></p><p>html中：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (max-device-width: 400px)"</span> <span class="attr">href</span>=<span class="string">"tinyScreen.css"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果屏幕宽度 小于400像素（max-device-width: 400px），就加载tinyScreen.css文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width: 400px) and (max-device-width: 600px)"</span> <span class="attr">href</span>=<span class="string">"smallScreen.css"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件 --&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>css中：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(<span class="string">"tinyScreen.css"</span>) screen and (max-device-width: <span class="number">400px</span>);</span><br><span class="line"><span class="comment">/*如果屏幕宽度 小于400像素（max-device-width: 400px），就加载tinyScreen.css文件*/</span></span><br></pre></td></tr></table></figure><p></p><p><strong>2.同一个css文件中也可以适配不同的分辨率</strong><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) &#123;</span><br><span class="line">　   <span class="comment">/*屏幕宽度 小于400像素（max-device-width: 400px）时采用的样式*/</span>　　　</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular下拉列表]]></title>
      <url>http://jintang.github.io/2016/01/07/angular%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>先自定义用的变量<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$scope.list=[</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'小明'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'小红'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">//select默认选中的值</span></span><br><span class="line">$scope.default=$scope.list[<span class="number">0</span>].id;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- as前的变量会实现为：&lt;option value="item.id"&gt;，是真实的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- as后的变量会实现为：&lt;option&gt;item.name&lt;/option&gt;，是显示的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ng-model绑定的值是选中的&lt;option value&gt;，数据是双向绑定的，所以不再事件传值。值得注意的是：default的类型必须是as前变量的值一致 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-options</span>=<span class="string">"item.id as item.name for item in list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ng-model</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下面这个可以不要，有的话会多一个无用选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>上面的效果是：</strong><br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/angular_select.png" alt="select效果图"></p>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular下拉列表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS我们所应该知道的]]></title>
      <url>http://jintang.github.io/2015/12/24/CSS%E6%88%91%E4%BB%AC%E6%89%80%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="文字换行属性-white-space"><a href="#文字换行属性-white-space" class="headerlink" title="文字换行属性:white-space"></a>文字换行属性:<code>white-space</code></h3><p>该属性的常用的值(容器的宽度固定)：</p><ul><li><code>normal</code>: 默认，超出容器范围时换行</li><li><code>nowrap</code>: 超出容器的范围也不换行</li></ul><h3 id="为什么要设置margin-0-padding-0"><a href="#为什么要设置margin-0-padding-0" class="headerlink" title="为什么要设置margin:0;padding:0;"></a>为什么要设置<code>margin:0;padding:0;</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;<span class="comment">/*去除li前默认的小圆点*/</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*防止li出现再ul外*/</span></span><br><span class="line">&#125;</span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto。不同的浏览器默认的margin和padding等属性都不相同，为了保证各浏览器的一致性，所以用下述办法：</p><ol><li>直接用<code>*{margin:0;padding:0;}</code>(不推荐)</li><li>使用<a href="https://github.com/necolas/normalize.css/blob/master/normalize.css" target="_blank" rel="noopener">normalize.css</a>，优于<code>Reset CSS</code>。</li></ol><p><em>淘宝的css初始化：</em><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125;</span><br><span class="line"><span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125;</span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125;</span><br><span class="line"><span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125;</span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a><code>DOCTYPE</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。</p><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>翻译自：<a href="http://archives.molly.com/2005/10/06/css2-and-css21-specificity-clarified/" target="_blank" rel="noopener">这儿</a></p><table><thead><tr><th>例子</th><th>行内css</th><th>ID 选择器</th><th>class 选择器</th><th>节点 选择器</th></tr></thead><tbody><tr><td>#name p.warning</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>每一项的默认值都是<code>0</code>，哪一项满足一次就<code>+1</code>，比较最终的值<br><em>特殊：</em></p><ul><li><code>*</code>选择器：<code>0 0 0 0</code></li><li>继承的权重，所有继承的权重都是<code>null</code>。若某项属性继承自多个父辈元素，那取最近的父辈元素的属性</li><li>伪元素的权重 <strong>=</strong> 节点选择器的权重，伪类的权重 <strong>=</strong> 属性选择器的权重 <strong>=</strong> class选择器的权重</li></ul><blockquote><p>伪元素的权重还有争议，有种说法是伪元素的权重忽略不计</p></blockquote><h3 id="多类选择器-class-quot-sty1-sty2-quot"><a href="#多类选择器-class-quot-sty1-sty2-quot" class="headerlink" title="多类选择器:class=&quot;sty1 sty2&quot;"></a>多类选择器:<code>class=&quot;sty1 sty2&quot;</code></h3><pre><code>在html中声明的`&lt;p class=&quot;sty1 sty2&quot;&gt;你好&lt;/p&gt;`的对应的css样式为:
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sty1</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sty2</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sty1</span><span class="selector-class">.sty2</span>&#123;<span class="comment">/*中间没有空格*/</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:<br><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/css-float-1.png" alt="多类选择器结果"></p><p>总结:<br><strong>多类选择器</strong>会匹配其所有<strong><em>子元素</em></strong>任意组合的样式，如：<br><code>class=&quot;sty1 sty2 sty3&quot;</code>会匹配<code>.sty1{}</code>,<code>.sty2{}</code>,<code>sty3{}</code>,<code>.sty1.sty2{}</code>,<code>.sty1.sty3{}</code>,<code>.sty2.sty3{}</code>,<code>.sty1.sty2.sty3{}</code>;</p><p><strong>当有属性重叠时,根据权重来适应</strong>.</p><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题:"></a>乱码问题:</h3><p>我们知道,乱码问题都是因为编码问题引起的,但是具体哪儿导致的问题,整个过程其实不清楚,现总结如下:</p><ul><li>编辑器的编码:我用的<code>sublime3</code>,下了<code>ConvertToUTF8</code>这个插件,可以让<strong>内容</strong>使用<code>utf-8</code>编码,当然,默认就是<code>utf-8</code>;</li><li>网页的源代码编码:html文件在头部声明了如下代码:<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>,浏览器的核心其实是渲染器与js解析器,那么,渲染器会根据网页源文件里面设定的编码渲染网页;</li></ul><p><strong>只要这两个地方统一了,一般浏览器上就不会再出现乱码.如果还有,看看是不是浏览器设定的编码格式不统一.</strong></p><h3 id="浏览器的滚动条"><a href="#浏览器的滚动条" class="headerlink" title="浏览器的滚动条:"></a>浏览器的滚动条:</h3><p><img src="https://tang-blog-1257996120.cos-website.ap-chengdu.myqcloud.com/jike_baidu_product_bug.jpg" alt="百度首页更多产品bug"> 在批改极客学院作业的过程中，有个小bug印象特别深刻，让我想了一个周都没有想明白，表现为：<br>当移动到右侧的更多产品时，会向下弹出来该下拉列表，而且会向左偏移一段距离。原因是为了沾满整个屏幕，给此div设置了<code>min-height=667</code>，而这个高度大于我的屏幕高度，所以导致右侧出来了一个滚动条，这个滚动条是占宽度的。所以会向左偏移。</p><p>解决方案：设置滚动条的宽高为0，如下：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h3><p>这是css3中常用到的计算方法，但是当要使用<code>+ - * /</code>等运算符的时候，+、-运算符两边要使用<strong>空格</strong>隔开，否则不起作用，如下是正确的方法：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="built_in">calc</span>(100% - 10px);<span class="comment">/*运算的具体数值要带单位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><p>此属性对 <strong>tr</strong> 不起作用，因为 <strong>tr</strong> 为<code>display:table-row;</code>,<code>box-shadow</code>只对<code>display:block;</code>生效</p><h3 id="常用的CSS-hack技巧"><a href="#常用的CSS-hack技巧" class="headerlink" title="常用的CSS hack技巧"></a>常用的<code>CSS hack</code>技巧</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb</span>&#123;</span><br><span class="line">       <span class="attribute">background-color</span>:<span class="number">#f1ee18</span>;<span class="comment">/*所有识别*/</span></span><br><span class="line">      <span class="attribute">.background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; <span class="comment">/*IE6、7、8识别，ie8的最终样式*/</span></span><br><span class="line">      +background-color:#a200ff;/*IE6、7识别，ie7的最终样式*/</span><br><span class="line">      _<span class="selector-tag">background-color</span>:<span class="selector-id">#1e0bd1</span>;<span class="comment">/*IE6识别，ie6的最终样式*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超链接访问过后hover样式就不出现了"><a href="#超链接访问过后hover样式就不出现了" class="headerlink" title="超链接访问过后hover样式就不出现了"></a>超链接访问过后hover样式就不出现了</h3><p>因为被点击访问过的超链接样式不在具有 <code>hover</code> 和 <code>active</code> 了。解决方法是改变 <code>CSS</code> 属性的排列顺序 <strong>L-V-H-A</strong>:<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;&#125; <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;&#125; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;&#125; <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><p><strong>提示</strong>：需要把 <code>background-attachment</code> 属性设置为 <code>fixed</code>，才能保证该属性在 <strong>Firefox</strong> 和 <strong>Opera</strong> 中正常工作。<br><strong>理解</strong>: 一个宽高固定的 <strong>div</strong> ，如果背景图片大于那个宽高，显示的背景图只是从左上角开始的一部分，而并不会缩放该图片<br><code>background-position:x y;</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>top left<br>top center<br>top right<br>center left<br>center center<br>center right<br>bottom left<br>bottom center<br>bottom right</td><td>如果您仅规定了一个关键词，那么第二个值将是”center”。<br>默认值：0% 0%。</td></tr><tr><td>x% y%</td><td>第一个值是水平位置，第二个值是垂直位置。<br><strong style="color:red">左上角是 0% 0%。右下角是 100% 100%。</strong><br>如果您仅规定了一个值，另一个值将是 50%。</td></tr><tr><td>xpx ypx</td><td>第一个值是水平位置，第二个值是垂直位置。<br>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。<br>如果您仅规定了一个值，另一个值将是50%。<br>您可以混合使用 % 和 position 值。</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angularJs我们所应该知道的]]></title>
      <url>http://jintang.github.io/2015/12/23/angularJs%E6%88%91%E4%BB%AC%E6%89%80%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84/</url>
      <content type="html"><![CDATA[<h3 id="scope-on-name-function"><a href="#scope-on-name-function" class="headerlink" title="$scope.$on(name,function):"></a>$scope.$on(name,function):</h3><p>在<code>controller</code>里放了这样的语句:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$scope.$on(<span class="string">'$ionicView.enter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$scope.$on(<span class="string">'$ionicView.beforeEnter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>在刚进入controller的时候会先执行直接放在controller里的代码，然后再执行上面的<br>两个方法。所以，无法用上面的方法对进入controller前进行预处理。</p><blockquote><ul><li><a href="http://ionicframework.com/docs/api/directive/ionView/" target="_blank" rel="noopener">官方视图生命周期及事件集</a></li><li><a href="http://ngionic.com/2014/12/ionic-javascript-api-ion-view-%E8%A7%86%E5%9B%BE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8A%E4%BA%8B%E4%BB%B6%E9%9B%86%E5%90%88/" target="_blank" rel="noopener">中文视图生命周期</a></li></ul></blockquote><p>视图生命周期:</p><table><thead><tr><th>事件名称</th><th>作用</th></tr></thead><tbody><tr><td><code>$ionicView.loaded</code></td><td>视图已经被加载了。这事件只发生一次当视图被创建并添加到Dom中。当跳出页面并且被缓存了的话，再次访问这个页面时这个时间将不会被激活。Loaded事件是个好方式让你为这个视图设置你的代码； 然而，他并不是我们推荐的时间去监听视图被激活。</td></tr><tr><td><code>$ionicView.enter</code></td><td>进入视图并被激活。这事件被激活来判断这个视图是第一个加载还是被缓存了的。</td></tr><tr><td><code>$ionicView.leave</code></td><td>离开这个视图并且不是活动页面。调用这个事件判断应该被缓存还是摧毁。</td></tr><tr><td><code>$ionicView.beforeEnter</code></td><td>视图即将被打开变成活动页面。</td></tr><tr><td><code>$ionicView.beforeLeave</code></td><td>视图将被关闭并且不是活动页面。</td></tr><tr><td><code>$ionicView.afterEnter</code></td><td>进入视图并是当前的活动页面</td></tr><tr><td><code>$ionicView.afterLeave</code></td><td>已经离开视图，并成为非激活页面</td></tr><tr><td><code>$ionicView.unloaded</code></td><td>视图的Controller已经被摧毁并且他的页面元素也从Dom中移除</td></tr></tbody></table><a id="more"></a><h3 id="run-注射器加载完所有模块时，此方法执行一次"><a href="#run-注射器加载完所有模块时，此方法执行一次" class="headerlink" title="run():注射器加载完所有模块时，此方法执行一次"></a>run():注射器加载完所有模块时，此方法执行一次</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'yongche'</span>,[])</span><br><span class="line">    .run(<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular需知 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angularJs 常见错误]]></title>
      <url>http://jintang.github.io/2015/12/17/angularJs%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="ng-show和ng-hide作用相反了，即：ng-show-”true”时隐藏，ng-hide-”true”时显示。"><a href="#ng-show和ng-hide作用相反了，即：ng-show-”true”时隐藏，ng-hide-”true”时显示。" class="headerlink" title="ng-show和ng-hide作用相反了，即：ng-show=”true”时隐藏，ng-hide=”true”时显示。"></a>ng-show和ng-hide作用相反了，即：ng-show=”true”时隐藏，ng-hide=”true”时显示。</h4><p><strong>原因：</strong>指令前带ng的都是AngularJs的内置指令，对应的值不应该带”花括号”，以ng-show为例，而我是这样写的:</p><pre><code>&lt;div ng-show=&quot;{{myArg}}&quot;&gt;&lt;/div&gt;
</code></pre><p>应该这样写：</p><pre><code>&lt;div ng-show=&quot;myArg&quot;&gt;&lt;/div&gt;
</code></pre><p>当时百思不得其解，ng-show与ng-hide的规则竟然会相反，原来是因为这样。</p><p><strong>结论：AngularJs自带的指令不能使用”双花括号”</strong><br><a id="more"></a></p><h4 id="Unknown-Provider：某某1-←-某某2-←-某某3："><a href="#Unknown-Provider：某某1-←-某某2-←-某某3：" class="headerlink" title="Unknown Provider：某某1 ← 某某2 ← 某某3："></a>Unknown Provider：某某1 ← 某某2 ← 某某3：</h4><p><strong>原因：</strong>js文件中有不能识别的”依赖”，从属关系为：某某1出现在某某2中，某某2出现在某某3中，所以直接找某某3中依赖的东西，将不能识别的删除即可。以前老看不明白这是什么意思，今天明白了。</p><h4 id="打包在真机的app在三星手机上ng-click不触发"><a href="#打包在真机的app在三星手机上ng-click不触发" class="headerlink" title="打包在真机的app在三星手机上ng-click不触发"></a>打包在真机的app在三星手机上ng-click不触发</h4><p><strong>原因:</strong>无法触发<code>ng-click</code>的元素都是脱离了普通文档流的:<code>position:absolute;float</code>等。不知道三星的手机浏览器具体是什么内核,而其他品牌的手机都可以</p><p><strong>解决方案:</strong>既然知道了浅层次的原因,解决方法也呼之欲出。使用其他布局代替<code>position:absolute;float</code>就好了。</p>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular常见错误 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows安装sublime3遇到的问题与设置风格]]></title>
      <url>http://jintang.github.io/2015/12/16/windows%E5%AE%89%E8%A3%85sublime3%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%AE%BE%E7%BD%AE%E9%A3%8E%E6%A0%BC/</url>
      <content type="html"><![CDATA[<blockquote><p>工欲善其事必先利其器，家里的电脑太烂，网速太垃圾，游戏都玩不了，所以安安静静的配个环境吧。</p></blockquote><h3 id="一、开启debug模式"><a href="#一、开启debug模式" class="headerlink" title="一、开启debug模式"></a>一、开启debug模式</h3><p>如果你在安装<code>sublime</code>的过程中出现了错误，建议要开启sublime3的debug模式，虽然我并没体会到什么区别，但是网上大神都这样说，应该是没有错的。开启方法如下：</p><p>将PackageControl.sublime-settings文件中的debug参数设为true，默认是false，表现为：<strong>“debug”: true,</strong> ，配置是个json文件，所以注意格式，特别是前后的”，”。网上都说在安装目录的什么下，比如说</p><p><code>D:\Program Files\Sublime Text 2\Data\Packages\PackageControl\PackageControl.sublime-settings</code></p><p>说实话，我完全找不到，没有隐藏文件夹！而我的在这儿：</p><p><code>C:\Users\Administrator\AppData\Roaming\Sublime Text 3\Packages\User</code><br><a id="more"></a><br>正如大家所看到的，这个AppData文件里面有你所有安装程序的配置，具体的作用还不明确。所以不论你的sublime3装在那儿，这个文件都要在这个文件夹下去找你程序对应的配置文件。这儿有稍微便捷点的方式：</p><p>打开<code>sublime——Preference——Browse Packages..</code>就可以直接到刚刚那个目录下面，然后在进入到user文件夹，你就可以看到PackageControl.sublime-settings文件了。修改即可！<br>这儿还有更简单的方法，不过前提是你装了Package Controller：</p><p>打开<code>sublime——Preference——Packages setting——Package Controller——选择Settings-User</code>，里面加上”debug”: true,即可。细心的朋友相比注意到了旁边的Settings-Default，看英文单词你也可以明白意思，这个改不了，但是可以参考！哈哈，里面就可以找到”debug”这个属性，这个文件里设的false。</p><p>好的，debug模式已经打开了。</p><h3 id="二、错误：There-are-no-packages-available-for-installation"><a href="#二、错误：There-are-no-packages-available-for-installation" class="headerlink" title="二、错误：There are no packages available for installation"></a>二、错误：There are no packages available for installation</h3><p>之前在电脑上安装过sublime3，但是最强大的Package Controller功能用不了，具体表现为：ctrl+shift+p可以打开，选择install package的时候打不开，并报此错误：</p><pre><code>There are no packages available for installation
</code></pre><p>网上说是IPv6造成，要修改hosts文件，我也改了，但并没有起作用，不知道为什么。可能这个sublime3太久远了。这个给个链接吧，因为我觉得网上说的是有道理的，即使我的并没有起作用。<br>国外：<a href="http://stackoverflow.com/questions/25105139/sublime-text-2-there-are-no-packages-available-for-installation" target="_blank" rel="noopener">http://stackoverflow.com/questions/25105139/sublime-text-2-there-are-no-packages-available-for-installation</a><br>国内：<a href="http://www.w3cfuns.com/blog-5439979-5405518.html" target="_blank" rel="noopener">http://www.w3cfuns.com/blog-5439979-5405518.html</a></p><p>这两个链接对此问题的解决方案是一样的，国内的看着明白，那为什么放国外的呢，多看看总是有好处的。</p><p>上回说到，我并没有因为上面的措施而解决掉问题，那我是怎么解决的呢。很傻的办法，我把sublime3卸载了…重新安装了一遍….</p><p>汗！重新之后还是不行，我看到我还没有装Package Controller，但是重新安装后却已经存在了，于是，我把C盘下那个AppData里Sublime3文件夹整个删除了， 重启后Package Controller才消失的。然后按照官方的指导安装了Package Controller，链接如下：<br><a href="https://packagecontrol.io/installation#st3" target="_blank" rel="noopener">https://packagecontrol.io/installation#st3</a><br>网上虽然可以搜到一大堆这个教程，但是有时候官方会更新的，所以有时候就用不了，所以，尽量选择官方文档。</p><p>这下果然成功了，装完之后，我开始用Package Controller装其他插件，第一个jsFormat,好吧，第一个又报错了！错误如下：</p><pre><code>ignored packages updated to: [&quot;Vintage&quot;]
</code></pre><p>这个很好解决，首先给个链接：<br><a href="https://www.sublimetext.com/docs/3/vintage.html" target="_blank" rel="noopener">https://www.sublimetext.com/docs/3/vintage.html</a><br>恩，这个是官方的文档，然后按官方的改就可以！</p><p>懒得看的同学看这里：<br>打开<code>sublime——Preferences——选择Settings-User</code>，打开了这个文件，观察到，这也是个json文件，找到了这条语句：<code>&quot;ignored_packages&quot;: [&quot;Vintage&quot;]</code><br>将其改成：<code>&quot;ignored_packages&quot;: []</code> 即可！</p><h5 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h5>]]></content>
      
        <categories>
            
            <category> sublime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> sublime3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angularJs———directive创建自定义指令]]></title>
      <url>http://jintang.github.io/2015/12/13/angularJs-directive%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>directive:中文是”指令”的意思。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'myApp'</span>, [])</span><br><span class="line">.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接受两个参数，第一个参数是自定义指令名，第二个是一个方法</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        restrict:<span class="comment">//有E(element)、A(Attribute)、C(Class)、M(Mark)，默认为A。</span></span><br><span class="line">        priority: Numbmer,<span class="comment">//优先级</span></span><br><span class="line">        terminal: <span class="built_in">Boolean</span>,</span><br><span class="line">        template: <span class="built_in">String</span> or Template <span class="built_in">Function</span>:<span class="function"><span class="keyword">function</span>(<span class="params">tElement, tAttrs</span>) (<span class="params">...&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">        templateUrl: String,</span></span></span><br><span class="line"><span class="function"><span class="params">        replace: Boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="regexp">/*默认为false，表示模板会被当作子元素插入到调用此指令的元素内部；</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        为true表示模板会代替调用次指令的元素；*/</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        transclude: Boolean,<span class="regexp">//</span>是否允许指令嵌入，默认为false(不允许嵌套</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">scope</span>: <span class="title">Boolean</span> <span class="title">or</span> <span class="title">Object</span>,</span></span><br><span class="line"><span class="function">        /*创建独立作用域。</span></span><br><span class="line"><span class="function">        当为<span class="title">Object</span>时，指令的作用域与<span class="title">dom</span>所对应的<span class="title">controller</span>绑定的规则有：</span></span><br><span class="line"><span class="function">            @(<span class="params">dom绑定到指令作用域</span>)、</span></span><br><span class="line"><span class="function">            =(<span class="params">dom与指令作用域双向绑定</span>)、</span></span><br><span class="line"><span class="function">            &amp;(<span class="params">将dom对方法的引用传到指定作用域</span>)。</span></span><br><span class="line"><span class="function">        */</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">controller</span>: <span class="title">String</span> <span class="title">or</span> <span class="title">function</span>(<span class="params">$scope, $element, $attrs, $transclude,otherInjectables</span>) </span>&#123; ... &#125;,</span><br><span class="line">        <span class="comment">/*在此controller中定义的方法是暴露给外面，供外面调用的。</span></span><br><span class="line"><span class="comment">            String时表示controller的名字，会查找定义在应用中的controller；</span></span><br><span class="line"><span class="comment">            function时表示是一个内部的controller，直接定义在这儿；</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        controllerAs: <span class="built_in">String</span>,<span class="comment">//给controller起的别名</span></span><br><span class="line">        <span class="built_in">require</span>: <span class="built_in">String</span>,<span class="comment">//此指令依赖的对象，可以是另一个指令</span></span><br><span class="line">        link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attr, 父控制器(可选</span>)) </span>&#123; </span><br><span class="line">            <span class="comment">//给此指令绑定一个dom事件:滑动</span></span><br><span class="line">            element.bind(<span class="string">'mouseenter'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'鼠标滑动了'</span>);</span><br><span class="line">                <span class="comment">//可直接调用controller中的$scope.test()</span></span><br><span class="line">                scope.test();</span><br><span class="line">                <span class="comment">//也可以这样写,作用和上面一样</span></span><br><span class="line">                scope.$apply(<span class="string">"test()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="指令的一些技巧："><a href="#指令的一些技巧：" class="headerlink" title="指令的一些技巧："></a>指令的一些技巧：</h3><h5 id="1-指令的复用"><a href="#1-指令的复用" class="headerlink" title="1.指令的复用"></a>1.指令的复用</h5><p>上面学会了如何在link()中调用controller中的方法，那指令在不同的地方如何调用不同的方法呢？<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为自定义指令添加了一个自定义属性,自定义属性绑定了controller中的方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myDirective</span> <span class="attr">whereUse</span>=<span class="string">"use1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">myDirective</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myDirective</span> <span class="attr">whereUse</span>=<span class="string">"use2()"</span>&gt;</span><span class="tag">&lt;/<span class="name">myDirective</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">'myCtrl1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.use1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"111111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.controller(<span class="string">'myCtrl2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.use2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"22222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       restrict:<span class="string">'EA'</span>,</span><br><span class="line">       link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attr</span>) </span>&#123; </span><br><span class="line">            element.bind(<span class="string">'mouseenter'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">/*tip:若页面上是驼峰式写法，此处获取属性要用小写，因为directive是json格式的，至于json为什么要小写，我也不明白。这儿是个坑*/</span></span><br><span class="line">                <span class="comment">//attr.whereuse();//获取到绑定的方法</span></span><br><span class="line">                scope.$apply(attr.whereuse);<span class="comment">//调用该方法，里面不是whereuser()</span></span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="指令执行的机制："><a href="#指令执行的机制：" class="headerlink" title="指令执行的机制："></a>指令执行的机制：</h3><h4 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1.加载阶段"></a>1.加载阶段</h4><p>加载angular.js，找到ng-app指令，确定应用边界。</p><h4 id="2-编译阶段-compile"><a href="#2-编译阶段-compile" class="headerlink" title="2.编译阶段(compile)"></a>2.编译阶段(compile)</h4><h5 id="（1）遍历dom，找到所有的指令"><a href="#（1）遍历dom，找到所有的指令" class="headerlink" title="（1）遍历dom，找到所有的指令"></a>（1）遍历dom，找到所有的指令</h5><h5 id="（2）-根据指令的属性，如replace、template等转换为dom结构"><a href="#（2）-根据指令的属性，如replace、template等转换为dom结构" class="headerlink" title="（2） 根据指令的属性，如replace、template等转换为dom结构"></a>（2） 根据指令的属性，如replace、template等转换为dom结构</h5><h5 id="（3）如果指令中存在compile-则调用。"><a href="#（3）如果指令中存在compile-则调用。" class="headerlink" title="（3）如果指令中存在compile( )则调用。"></a>（3）如果指令中存在compile( )则调用。</h5><p>但一般不在指令内部写compile()，因为要写的话里面还需要调用angular默认的compile()</p><h4 id="3-链接阶段-link"><a href="#3-链接阶段-link" class="headerlink" title="3.链接阶段(link)"></a>3.链接阶段(link)</h4><h5 id="（1）对每一条指令运行link"><a href="#（1）对每一条指令运行link" class="headerlink" title="（1）对每一条指令运行link()"></a>（1）对每一条指令运行link()</h5><h5 id="（2）link函数一般用来操作dom、绑定事件监听器"><a href="#（2）link函数一般用来操作dom、绑定事件监听器" class="headerlink" title="（2）link函数一般用来操作dom、绑定事件监听器"></a>（2）link函数一般用来操作dom、绑定事件监听器</h5><p>比如：指令和数据间的操作，就是在link()里面执行的。</p><p>tip：</p><blockquote><p>1.compile()用于对模板自身进行转换，而link()负责在模型和视图之间进行动态关联；<br>2.compile()仅在编译阶段运行一次，而对于指令的每个实例，link()都会执行一次；<br>3.如前所述，大多数时候我们不写compile()，只写link()；</p></blockquote><blockquote><p>以下几点先做留存，没有理解：<br>4.compile()可以返回preLink()与postLink()，而link()只会返回postLink();<br>5.如果需要修改dom，应该在postLink()中修改，在preLink()中修改会出错；<br>6.作用域在链接阶段才会绑定到编译之后的link()上；</p></blockquote>]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular </tag>
            
            <tag> directive </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使用github与hexo建立个人博客]]></title>
      <url>http://jintang.github.io/2015/12/09/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E4%B8%8Ehexo%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote><p>刚刚用github与hexo搭建了个人博客，对于这么个专属于自己的东西还是蛮开心的，不过过程中也遇到了很多不懂的东西，所以还是想把这个过程写下来，希望对新人有些帮助！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/" target="_blank" rel="noopener">github</a>是全世界最大的”开源”社区，有很多神奇的功能，有许许多多的大牛，所有著名的大公司都收益于github，我们的博客就是依托于github，github可以给你一个二级免费域名，这就是我们的博客，名字是我们自己起的，比如我的: <a href="http://jintang.github.io/">堂的博客</a>，前面的jintang是我的名字，是不是很炫酷！那么<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是什么呢？hexo我简单理解为一个工具，就是用来发布博客的，你在本地电脑上写了文章，然后就可以通过hexo命令来发布你的文章。<br>了解了这是什么东西，我们就开始建立博客吧！！</p><h2 id="安装环境与工具"><a href="#安装环境与工具" class="headerlink" title="安装环境与工具"></a>安装环境与工具</h2><ol><li><a href="http://git-scm.com/" target="_blank" rel="noopener">git</a>：版本控制工具，可以向github推送你的代码，github是免费托管的</li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a>：一个js环境，很强大的，内置了许多对象与方法，我们在这儿只需要使用npm命令装一些东西，装了node.js就可以使用npm命令了。<br>下载安装你对应系统的即可，最新的node.js在安装的过程中会自动配置你的环境变量，所以这个就不用我们操心了。<a id="more"></a></li></ol><h2 id="注册github账号并发布博客页面"><a href="#注册github账号并发布博客页面" class="headerlink" title="注册github账号并发布博客页面"></a>注册github账号并发布博客页面</h2><p><strong>1.访问github网址：</strong><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>起个好听的username吧，虽然只能是英文数字连字符，唉，可惜了我的文艺细胞，可以起中文的话可以给博客起一个很好听的域名。对，你没理解错，起的名字就会成为你的博客域名，我的名字是jintang，然后域名就是<a href="http://jintang.github.io/">http://jintang.github.io/</a> ,其实说了些废话，现在github是可以改username的，单字的恐怕已经都被注册光了，唉…</p><p>注册了之后要另外绑定一个邮箱，不是创建账号绑定的那个，而是要在个人账号设置里另外在绑定一个，这个邮箱专门用来接受github的各种通知,比如建立博客时就会发送通知。如果你收不到激活的邮件，可以尝试下gamil等国外邮箱。</p><p><strong>2.新建Repository(仓库)：</strong>之前说我们的博客是依托于github的，准确的说，有两种博客页面：</p><ul><li>依托于Repository（仓库）</li><li>依托于Organization（组织）</li></ul><p>位置如下（暂不放图）：</p><p>推荐使用第一种方式，新建一个Repository，新建的过程如下图：（图片先不放了）</p><p><strong>tip：</strong>仓库的名字必须是：<strong>username.github.io</strong>，里面的username和你github账号的username一致，大小写不要紧。</p><p>点击确定即可，仓库已创建成功。</p><p><strong>3.发布你的博客：</strong></p><p>点击setting——点击Launch automatic page generator——点击Continue to layouts——选一个默认的模板点击Publish page即可。如图所示：</p><p><strong>tip:这只是将博客页面发布了出去，使用的github默认工具渲染的页面，选什么模板并不重要，之后都会用hexo修改掉</strong></p><p>现在已经可以访问你自己的博客页面了，网址是：<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> ，跟你的仓库名是一样的哦。第一次发布需要等几分钟才可以访问。如果404不要着急哦！如果一直访问不了，去github上绑定的邮箱上看看，不论你的github pages建立成功还是失败，github都会发邮件通知你的！我刚开始失败了，原因是没有给github账号绑定一个邮箱。</p>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
